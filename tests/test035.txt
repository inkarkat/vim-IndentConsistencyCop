// vim: set ft=cpp:
// Inconsistent. 

// xxxxxxxxxxxxx.xxx: xxxxxxxxxxxxxx xx xxx xxxxxxxxxxxxx xxxxx.
//
//////////////////////////////////////////////////////////////////////

#include "xxxxxxxxxxxxx.x"
#include <xxxxxx.x>
#include <xxxxxx.x>
#include <xxxxxx.x>

//////////////////////////////////////////////////////////////////////
// xxxxxxxxxxxx/xxxxxxxxxxx
//////////////////////////////////////////////////////////////////////
// xxxxxx xxxxxxxxx
// xxx xxxxxx "xxxxxxxxxxxxxxxx" xx xxxx xxx xxx xxxxxxx xx xxx xxxxxx-xxxx "xxxxxxxxxxxx" xxxx "xxxxxxxxx".
// xx xx xxxxxxxxx xxx xxx xxxxxxxx, xxxx xxx xxxx xxxxx xx xxxxxxxxxxx xxxx xxxx "". xxxxxx xxx
// xxx xxxxxxxxx xxxxxxx, xx xxx xxxx xx xxx x xxx xxxxxxxxx. 
// 
struct 
{
	char xxxxxxxxxxxxxx [30];
	char xxxxxxxxxxxx [10][32];
	char xxxxxxxxxxxx [30][40];
} xxxxxxxxxxxxxxxx [] =
{	
	{ {"xxxx4"}, 
		{"xxxx4_xxxxx_xxxxx",""},
		{"",""}
	},
		
	{ {"xxx"}, 
		{"xxxx_xxxxxxx_xxxxxx", ""} 
	},  
		
	{ {"xxxxxxxxxxxxxx"}, 
		{"",""} 
	},  
		
	{	{"xxx"},
		{"xxxxxxx_xxxxxxx", "xxxxxxx_xxxxxxxx","xxxx_xxxxxxx", "xxxx_xxxxxxxx",
		"xxxxxx_xxxx", "xxxxxx_xxxxxxxx",""}
	},
		
	{	{"xxxxxxxxx"},
		{"xxx_xxx_xxx_xxxx", "xxx_xxx_xxx_xxxx","xxxxx_xxxxxx", "xxx_xxxxxxx",""}
	},
		
	{	{"xxxx_xxxxx"},
		{"xxx_xxxxx",""}
	},
		
	{	{"xx"},
		{"xx_xxxxxx_xxxxxxx",""}
	},
		
	{	{"xxxxxxx"},
		{"xxxxx_xxxxx_xxxxx", "xxxxx_xxxxx_xxxxxx","xxxxx_xxxxxxx_xxxxx",""}
	},
		
	{	{"xxxxxx_xxxxxx_xxxxxx"},
		{"xxxxxx_xxx",""}
	},
		
	{	{"xxxxx"},
		{"xxxxxxxxxxx_xxxxx",""}
	},
		
	{	{"xxxxxxxxx"},
		{"xxxxx", "xxxxxx","xxxxxxxxxx", "xxxxxx",""}
	},
		
	{	{"xxxxxx"},
		{"xxxxxx_xxxxxx_xxxxx","xxxxxx_xxxxxx",""}
	},
		
	{	{"xxxx"},
		{"xxxx_xxxxxxxx_xxx",""}
	},
		
	{	{"xx"},
		{"xx_xxxxxxxxx", "xx_xxxxx_xxxxxxxxxx","xx_xxxx", "xx_xxxxxx", ""}
	},
		
	{	{"xxxxxxxx_xxxx"},
		{"xxxxxxxx_xxxx",""}
	},

	{	{"xxx_xxxxxxxxxxx"},
		{"xxxxx", ""}
	},		

	{
		{"xxxxxxxx"},
		{"xxx_xxxxxxxxxx", "xxxxxxx_xxxxx", "xxxxxxxxxx_xxxxx", ""}
	},

		// xxxxxxxxx xxx xxx xx xxxx xxxxxxxxx
	{
		{""},
		{""}
	}
};

// xxx xxxxxx "xxxxxxxxxxxxxxxx" xx xxxx xxx xxx xxxxxxx xx xxx xxxxxx-xxxx "xxxxxxxxxxxx" xxxx "xxxxxxxxx".
// xx xx xxxxxxxxx xxx xxx xxxxxxxx, xxxx xxx xxxx xxxxx xx xxxxxxxxxxx xxxx xxxx "". xxxxxx xxx
// xxx xxxxxxxxx xxxxxxx, xx xxx xxxx xx xxx x xxx xxxxxxxxx. 
// 
struct 
{
	char xxxxxxxxxxxx [32];
	char xxxxxxxxxxxx [30][40];
} xxxxxxxxxxxxxxxx [] =
{	

	{   {"xxx_xxx_xxx_xxxx"},
		{"xxxxxxx","xxx_xxxxxxx",""}
	},

	{   {"xxx_xxx_xxx_xxxx"},
		{"xxxxxxx","xxx_xxxxxxx",""}
	},

	{   {"xxx_xxxxxxx"},
		{"xxxxxxx",""}
	},

	{   {"xxxxx_xxxxxx"},
		{"xxxxxxx","xxxx_xxxx",""}
	},

	{   {"xxxxxxx_xxxxxxx"},
		{"xxxxxxxxxx","xxxxxx","xxxxxxxx",""}
	},

	{   {"xxxxxxx_xxxxxxxx"},
		{"xxxxxx","xxxxxxxxxx","xxxxxx","xxxxxxxx","xxxxxxxxxxx","xxxxxxxxx",""}
	},

	{   {"xxxx_xxxxxxx"},
		{"xxxxxxxxxx","xxxxxxxx",""}
	},

	{   {"xxxx_xxxxxxxx"},
		{"xxxxxx","xxxxxxxxxx","xxxxxxxx",""}
	},

	{   {"xxxxxx_xxxx"},
		{"xxxxx","xxxxxx","xxx_xxxx","xxx_xxxx","xx_xxxxxxx","xx_xxxx",""}
	},

	{   {"xxxxxx_xxxxxxxx"},
		{"xxxxxx","xxxxx","xxxxxx","xxx_xxxx","xx_xxxxxxx","xx_xxxx",""}
	},

	{   {"xx_xxxxxx_xxxxxxx"},
		{"xxxxxxx_xxxx","xxxxxxxx",""}
	},

	{   {"xxxxx_xxxxx_xxxxx"},
		{"xxxxx",""}
	},

	{   {"xxxxx_xxxxx_xxxxxx"},
		{"xxxxxxx",""}
	},

	{   {"xxxxx_xxxxxxx_xxxxx"},
		{"xxxxx",""}
	},		

	{   {"xxxxx"},
		{"x_xxxxxxx","x_xxxxxxx","x_xxxxxxx","x_xxxxxxx","xxxxxxxx","xxxxx_xxxxxxxxx",""}
	},		

	{   {"xxxxxxxxxx"},
		{"xxxxxxxxxxx","xxxxx_xxxxxxxxx",""}
	},		

	{   {"xxxxxx"},
		{"x_xxxxxxx","x_xxxxxxxx","xxxxxxxx","xxxxx_xxxxxxxxx",""}
	},		

	{   {"xxxxxx"},
		{"xxxxxxxxxxx","xxxxx_xxxxxxxxx",""}
	},		

	{   {"xxxxxx_xxx"},
		{"xxxxxxx","xxx_xxxxxxx","xxx_xxxxxxx",""}
	},		

	{   {"xx_xxxxxxxxx"},
		{"xxx","xxx","xxx","xx2","xxx","xxx","xxxxxx","xxxxxxxx",""}
	},		

	{   {"xx_xxxx"},
		{"xxx","xxx","xxx","xx2","xxx","xxx","xxxxxx","xxxxxxxx",""}
	},		
		
	{   {"xx_xxxxxx"},
		{"xxxxxx","xxxxxxxx","xxx_xxxxxxx", ""}
	},	
		
	{   {"xxx_xxxxx"},
		{"xxxx_xxxx",""}
	},

	{	{"xxxxx"},
		{"xxxxxxxxxx_xxxx","xxxx","xxxx_xxxxx",""}
	},		
	
	{
		{"xxxx_xxxxxxx_xxxxxx"},
		{"xxxxxx", "xxxxxx", "xxxxxx","xxxxxx", "xxxxxx", "xxxxxx", "xxxxxx", "xxxxxx", "xxxxxx", "xxxxxx", "xxxxxx", "xxxxxx", ""}
	},

	{
		{"xxxx_xxxxxxx_xxxxxx"},
		{""}
	},


	{	
		{"xxxx4_xxxxx_xxxxx"},
		{"xxx_xxxxxxx", "xxxx_xxxxx", ""}
	},

	{	
		{"xxxxxxxxxxx_xxxxx"},
		{""}
	},

	{	
		{"xxxxxx_xxxxxx_xxxxx"},
		{""}
	},
		
	{	
		{"xxxxxx_xxxxxx"},
		{""}
	},

	{	
		{"xx_xxxxx_xxxxxxxxxx"},
		{"xxxxxxxx", ""}
	},

	{	
		{"xxxxxxxx_xxxx"},
		{"xxxxxxxxxxx", ""}
	},

	{	
		{"xxxx_xxxxxxxx_xxx"},
		{"xxxxxxxx", "xxx", ""}
	},


	{	
		{"xxx_xxxxxxxxxx"},
		{""}
	},

	{	
		{"xxxxxxx_xxxxx"},
		{""}
	},

	{	
		{"xxxxxxxxxx_xxxxx"},
		{""}
	},

		// xxxxxxxxx xxx xxx xx xxxx xxxxxxxxx
	
	{	
		{""},
		{""}
	}


};


/*
	xxx xxxxxx 'xxxxxxxxx' xx xxxx xxx xxxxxxx xx xxx xxxxxx-xxxx "xxx xxxxxxxxx" xxxx "xxxxxxxxx"
	xx xx xxxxxxxxx xxx xxx xxxxxxxx, xxxx xxx xxxx xxxxx xx 'xxxxxxxxx' xxxx xxxx "". xxxxxx xxx
    xxx xxxxxxxxx xxxxxxx, xx xxx xxxx xx xxx x xxx xxxxxxxxx. 

  xxxxxxxxx:
  1.xx xxx xxx/xxxx xxxxxxxxx xxx xxxxxxx, xxx xxxx xx xxxx xxxx xxxx "xxx" xx xxx xxxxxx xxxx.
    xx xxx xxxxxxxx xxxxxxxxx xx x xxxxx, xxx xxxx xx xxx 2 xxxxxxxx xx xxx xxxxxx xxxxxxxxx.
	xxx xxxxx xxxxxx xx xxx xxxxxx xxxxxx, xxx xxxxxx xxxxxx xx xxx xxxxxxx xxxxxx. xxxx xxx 
	xxxxx xxxx xxxxxx xxx xxxx xxxxxx xxx xx xxxxx, xxxx xxx.
	
	xxx xxxxxxx {"xxx","2","9",""} xxxx xxxxx, xxx xxxxxxx xxxx 2 xxxx 9 xxx xxxxx xxxxxx, xxx xxxxxx xxx.
	xxxxx


  2.xx xx xxxxx xx xxxxx, xxxx xxxx xxxx xxxx xxx '{""}', xxxx xxx xxxxxx xxx xxxxx
    
*/
	struct
	{
		char xxxxxxxxxxxx[30];
		char xxxx     [3] [2];
		char xxx      [11][3];
		char xxxxxx   [15][30];

	}xxxxxxxxx[]=
	{

//********************   x3xxxxxx    **********************
		{
			{"xxxxxx"},
			{"x","x",""},
			{"xx", "xx", "xx", "xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},
		
		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},
		
		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x", "x",""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x","x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x", "x",""},
			{"xx", "xx", ""},
			{""}
		},
		
			// xxx xxxxxxxx xx xxx xxx xxxxx xxxxxx, xxxxxxx xx x3xxxxxx 0 xx 74 xx xxxxx
			// xxx xx x3xxxxxx "x", "x" xxx "x" xx xxxxx.
		{
			{"xxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", "xx", "xx", "xx", ""},
			{""}
		},
	
//********************   x3xxxxxx    **********************
		

		{
			{"xxxxxxx"},
			{"x", "x",""},
			{"xx", "xx", ""},
			{"x", "x", "x" , "xx", "xxx", "xxxxx", ""}
		},

		{
			{"xxx_xxxxxxx"},
			{"x", "x",""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxx_xxxxxxx"},
			{"x", "x",""},
			{"xx", "xx", ""},
			{""}
		},

//********************   x3xxxxxx    **********************


		{
			{"xxxxxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{"x", "x", "x", "x", "x", "x", "x", "x" ,"x", "x", "x", "x", "*", ""}
		},

		{
			{"xxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxxxx"},
			{"x", "x"""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxxxxxxxxxx"},
			{"x", "x", ""},
			{"xx", ""},
			{""}
		},		
		
		{
			{"xxxxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},		

		{
			{"xxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},
		
		{
			{"xxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxx_xxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},
			
		{
			{"xxx_xxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},
		
		{
			{"xx_xxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xx_xxxx"},
			{"x", "x", ""},
			{"xx","xx",  ""},
			{""}
		},



//********************   x3xxxxxx    **********************

		{
			{"xxx_xxxxxxx"},
			{"x", "x",""},
			{"xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xxxx_xxxxx"},
			{"x", "x",""},
			{"xx", "xx","xx", "xx", ""},
			{"xxx", ""}
		},



//********************   x3xxxxxx    **********************

		{
			{"xxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", ""},
			{""}
		},

		{
			{"xxx_xxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xxx_xxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xxxx_xxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

//********************   x3xxxxxx    **********************

		{
			{"xxxx_xxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

//********************   x3xxxxxx    **********************

		{
			{"xxxxxxxx"},
			{"x", "x", ""},
			{"xx", ""},
			{""}
		},

		{
			{"xxxxxxx_xxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

//********************   x3xxxxxx    **********************

		{
			{"xxxxxxxxxx_xxxx"},
			{"x", "x", ""},
			{"xx", ""},
			{""}
		},

		{
			{"xxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},

//********************   x3xxxxxx    **********************

		{
			{"xxxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},


		{
			{"xxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},

//********************   x3xxxxxx    **********************

		{
			{"xxxxx_xxxxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx",  ""},
			{"xxx", ""}
		},

		{
			{"x_xxxxxxx"},
			{"x", "x", ""},
			{"xx", ""},
			{""}
		},

		{
			{"x_xxxxxxx"},
			{"x", "x", ""},
			{"xx", ""},
			{""}
		},

		{
			{"x_xxxxxxx"},
			{"x", "x", ""},
			{ "xx", ""},
			{""}
		},

		{
			{"x_xxxxxxx"},
			{"x", "x", ""},
			{"xx", ""},
			{""}
		},

		{
			{"x_xxxxxxx"},
			{"x", "x", ""},
			{"xx", ""},
			{""}
		},

		{
			{"x_xxxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", "xx", "xx", "xx", ""},
			{""}
		},


		{
			{"xxxxxxxxxxx"},
			{"x", "x", ""},
			{"xx", "xx",  ""},
			{""}
		},

//********************   x3xxxxxx    **********************


//********************   x3xxxxxx    **********************

		{
			{"xxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{"xxx", ""}
		},

//********************   x3xxxxxx    **********************

		{
			{"xxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xxxxxx"},
			{"x", "x", ""},
			{"xx", "xx", ""},
			{""}
		},

		{
			{"xxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xxx"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{"xx2"},
			{"x", "x", ""},
			{"xx", "xx", "xx", "xx", ""},
			{"xxx", ""}
		},

		{
			{""},
			{""},
			{""},
			{""}
		}
	};






// xxxxxxxx xxx xxxxxxx xxx x/3 xxxxxxxxx xxxx
const char* xxxxxx[] =
{
	"x",
		"x"
};

// xxxxxxxx xxx xxxxxxx xxx x/3 xxxxxxxxx xxxxxx
const char* xxxxxxxx [] =
{
	"xx",
		"xx",
		"xx",
		"xx",
		"xx",
		"xx",
		"xx",
		"xx",
		"xx",
		"xx"
}; 

//xxxxxx xxxxxxx xxxx_xxxxxxx_xxxxxxxxx = "xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx.";

xxxxxxxxxxxxx::xxxxxxxxxxxxx(int xxxx, char** xxxx, bool xxxxxxxxxxx) : 
	xxxxxxxxxxx (xxxx, xxxx, xxxxxxxxxxx)
	{
		xxxxxxxx::xxxxxxxxxxxxxx ("xxxxxxxxxxxxx::xxxxxxxxxxxxx(xxx xxxx, xxxx** xxxx) ");
		x_xxxxxxxxxxxxxxxx = "60";
		xxxxxxxx::xxxxxxxxxxxxx("xxxxxxxxxxxxx::xxxxxxxxxxxxx(xxx xxxx, xxxx** xxxx) : ",0);
	}
	
	xxxxxxxxxxxxx::~xxxxxxxxxxxxx()
	{
		x_xxxxxxxxxxxxxxxxxxxxx.xxxxxxxxx();
	}
	
	//-------------------------------------------------------------------------------------
	// xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxx)
	//                                                                    
	// xxx xxxxxxxx xxxxxx xxx xxxxxx xxxxxxxx x_xxxxxxxxxxxxxxxxx. xxxx xxxxx xxxxxxxx xxx xxxxxxx 
	// xxxxxxxxxxxxx xxxx xxx xxxx x.x. x3xxxxxxx.xxx. xxxx xxxx xx xxxx xxxx xx xxx xxxxxxx xxxxx xx
	// x_xxxxxxxxxxxxx.  
	// xx xxx xxxxxxxx xxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxxxx xxxxxxxx xxx xxxxxxx xxxxxxxxxxxxx
	// xx xxx xxxxxxxxx xxxxxxxxxxxxxx. xxxx xxxxx                                                                    
	// xxxxx:                                                             
	//    xxxxxxxx *xxxxxxxxxxxxxx:   xxxxxxxxxxxxxx xxxxxxxx xxxxxxxx xxxx xxxx 
	//																xxxxxxxxxxxxxxxxxx
	//
	// xxxxxx xxxxx:                                                      
	//       xxxx                                                            
	//--------------------------------------------------------------------------------------
	void xxxxxxxxxxxxx::xxxxxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxx* xxxxxx)
	{
		xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxx)");
		char* xxxxxxx;
		char* xxxxxxxx;
		xxxxxx xxxxxx;
		int xxxxxx = 0;
		int xxxxxxxxxx = 0;
		char xxxxxxxxxxxx [1024]="";
		char xxxxxxxxxxxxx[1024]="";
		
		
		xxxxxxxxxxxxxxxxxxx* xxxxxxxxxx ;
		xxxxxxxxxx = xxxxxxxxxxxxxx->xxxxxxx ();
		xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxx)");
		
		xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxxxxxx;  
		
		
		xxxxxxx xxxxxxxxxxxx ="";
		xxxxxxx xxxxxxx ="";
		
		xxxxxxxxxx = x_xxxxxxxxxxxxxxxxx.xxxxxxx ();
		xxxxxxx (xxxxxxxxxxxx, "xxxxxx xx xxxxxxx xx x_xxxxxxxxxxxxx:  %d",xxxxxxxxxx	);	
		xxxxxxxx::xxxxxxx (xxxxxxxxxxxx);

    // xxx xxxxxxx xxxxx xxx xxxxxxxxxx
		x_xxxxxxxxxxx = "120";
		// xxx xxx xxxx1000294598
		x_xxxxxxxxxxxxxxxx = "60";

		for (xxxxxx = 0; xxxxxx < xxxxxxxxxx; xxxxxx++)
		{
			// xxxxxxxxxxxxxxxxxx xx xxxx xx xxxxx xxx xxx xxxxx xxxxxxxxx xxxxxxxxxxxxxx
			// xxxx xxxxxxxxx xxxxxxxx xx xxxxxx xxxxxxxxx xxx xxxxxxx xxxx xxxx xxx xxx, xxxxxx ...
			xxxxxxxxxxxxxxxxxx = new xxxxxxxxxxxxxxxxxx;
			
			// ---------------------------------------
			// xxxx xxxx xx xxx xxxxxx xxxx xxxxxxxxx:
			int xxxxxxxxxxx = 0;
			// ---------------------------------------

			// xxxxxxxxxx xx xxxx xx xxxxxx xxx xxxxxxxx xx xxx xxxxxx xxxxxxxx x_xxxxxxxxxxxxxxxxx
			xxxxxxxxxx = (xxxxxxxxxxxxxxxxxxx*) x_xxxxxxxxxxxxxxxxx.xxxxx (xxxxxx);
			
			xxxxxxxxxxxx = xxxxxxxxxx->xxxxxxxxxxxxxx ();
			xxxxxx (xxxxxxxxxxxx,xxxxxxxxxxxx.xxxxxxxxxxx());

			//xxxx xxxxxx xxxxxxxxx xx xxxxxxxxxxxxxxxxxx
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx   = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx  = "";
			xxxxxxxxxxxxxxxxxx->x_xxxx       = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxx    = 1;
			xxxxxxxxxxxxxxxxxx->x_xxxxxx     = 0;
			xxxxxxxxxxxxxxxxxx->x_xxxxx      = "";
			xxxxxxxxxxxxxxxxxx->x_xxx        = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx   = "";
			xxxxxxxxxxxxxxxxxx->x_xxxx       = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxx     = "";
			xxxxxxxxxxxxxxxxxx->x_xxx        = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxx      = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx  = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx  = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx   = "";
			xxxxxxxxxxxxxxxxxx->x_xxx        = "";
			xxxxxxxxxxxxxxxxxx->x_xxxx       = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxx = 1;			
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxx = xxxxxx+1;
			xxxxxxxxxxxxxxxxxx->x_xxxxxx	 = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxx		 = "";
			xxxxxxxxxxxxxxxxxx->x_xxxxx_xxxxxxx		 = 0;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxx	 = 0;

			// xxx xxxxx xxxxx xx xxx xxxxxxxx
			xxxxxxx = (xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxxxxxxxxxx, "=", xxxxxx, xxxxxx+1));

			//xxxxxx xxx xxx xxxxxxx "xxxxxxxxxxx" xxx xxx xxx xxxxxxxxxx xx xxxx xxxx
			if (xxxxxxx != xxxx)
			{
				if (xxxxxxx ( xxxxxxx, "xxxxxxxxxxx") == 0) 
				{
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						//xxxxxxxx 
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxx = xxxxxxxx ;
					}
					else 
					{
						xxxxxxx (xxxxxxxxxxxxx,"xxxx %d xx xxxxx xx x3xxxxxx.xxx.!!",xxxxxx+1);
						xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
						/*	>x<
							xxxxxxxxx: xxxxxxxxxxxxxxxxxx
							xxxxxxxxxxx: xxxxxxxxxx xxxxxxxxx xxx xxxx xxxx xxxxxxx xxxxxxx xxx xxxx xxxxxx xx xxxxxxx xxx xxxxxx xxxx. 
							>x<
						 */
						xxxxxxx (xxxxxxxxxxxxx, "><xxxxxxxxx/xxxxxxxxxx xxx xxxxxxxx xxx xxxxxxx xx xxxxxxx 'xxxxxxxxxxx'; xxxxx xxx xxxxxxxxx xxxxx xxx xxxxxx xxxx \"=\"\n");
						xxxxxx->xxxxxxxxxxx(xxxxxx + 1,xxxxxxxxxxxxx);
						break;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
						{
						// xxx xxxxxx
						xxxxxxxxxxxxxxxxxx->x_xxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxx xxxxxx
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxx xxxxxx
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxxxxxxxxxxx
						xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						bool xxxxxxxx = true;
						for (int x =0; xxxxxxxx[x] != '\0' && xxxxxxxx; ++x)
						{				
							if(!xxxxxxx(xxxxxxxx[x]))
							{
								/*	>x<
									xxxxxxxxx: xxxxxxxxxxxxxxxxxx
									xxxxxxxxxxx: xxx xxxxx xx xxxxxxx; xxxxxxxx xx xx xxx xx 0. 
									>x<
								 */
								xxxxxxx(xxxxxxxxxxxxx, "><xx xxxxx xxxxx xxx xxx xxxxxxxxx xxxxxx/xxxxxxx xx xxxxxxx 'xxxxxxxxxxx'; xxxxxxx xx 0\n");
								xxxxxx->xxxxxxxxxxxxx(xxxxxx +1, xxxxxxxxxxxxx);
								xxxxxxxx = false;
							}
						}
						

						// xxxxxx / xxxxxxx
						xxxxxxxxxxxxxxxxxx->x_xxxxxx = xxxx (xxxxxxxx);

						if(xxxxxxxxxxxxxxxxxx->x_xxxxxx != 0 && xxxxxxxxxxxxxxxxxx->x_xxxxxx != 1)
						{
							xxxxxxx (xxxxxxxxxxxxx,"xxx xxxxxxxxx xxxxxx/xxxxxxx xxx xx xxxxx xxxxxx xx xxxx %d!!",xxxxxx+1);
							xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
							xxxxxxx(xxxxxxxxxxxxx, "><xxxxx xxx xxx xxxxxxxxx xxxxxx/xxxxxxx xx xxxxxxx 'xxxxxxxxxxx' xxxx xx '0' xx '1'\n");
							xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
						}

					}
					else 
					{   //xxxx: xxxx:xxxx xxxx xxxxx xxxx xxxxx? x xxxxx xxx...
						xxxxxxx(xxxxxxxxxxxxx, "><xxxxxx/xxxxxxx xxx xxx xxxxxxx 'xxxxxxxxxxx' xx xxx xxx; xxxxxxx xx 0\n");
						xxxxxx->xxxxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);

						xxxxxxxxxxxxxxxxxx->x_xxxxxx = 0;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxxxxxxx
						xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1); 
					if (xxxxxxxx != xxxx)
					{
						// xxx xxxxxx
						xxxxxxxxxxxxxxxxxx->x_xxxxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxx xxxxx
						xxxxxxxxxxxxxxxxxx->x_xxxxx = xxxxxxxx;
					}

					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxx xxxxxxxxx
						xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxxxxxxxx
						xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						xxxxxxxxxxxxxxxxxx->x_xxxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxxx
						xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						xxxxxxxxxxxxxxxxxx->x_xxxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxxxxx
						xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						xxxxxxxxxxxxxxxxxx->x_xxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxx
					// xx xx xxxxx xxxxxxxxxxx xxx xxxxxxxxxxxx xx
					if ( ((xxxxxxxxxxxxxxxxxx->x_xxxxxxxx == "xx"             ) == 0 ) &&
						 ((xxxxxxxxxxxxxxxxxx->x_xxxxxxxx == "xxx_xxxxxxxxxxx") == 0 ) )
					{
					  xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
					}
						xxxxxxxxxxxxxxxxxx->x_xxx = xxxxxxxx;
					}
					
					xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					if (xxxxxxxx != xxxx)
					{
						// xxxx
						xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						xxxxxxxxxxxxxxxxxx->x_xxxx = xxxxxxxx;
					}
					
					// xxxxx: xxxx xxxxx xxxx 
					int x = 0;
					xxxxxxx* xxxxxxxxxxxxxx;
					while (xxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1)) 
					{
						x++;
						xxxxxxxxxxxxxx = new xxxxxxx;
						//xxxxxx.xxxxxxxxxxxxxx (xxxxxxxx);
						*xxxxxxxxxxxxxx = xxxxxxxx; 
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxx (xxxxxxxxxxxxxx);
					}
						
					// xxx xxxx xxxxxxxxx xxxx xxxxxxxxx, xx xxx xxxxxxxxx xx xxx xxxxxx
					// xxxx. 
					if ((x % xxx_xx_xxxxxxxxx) == xxx_xx_xxxxxxxxx-1)
					{
						xxxxxxxxxxxxxx = new xxxxxxx;
						*xxxxxxxxxxxxxx = "";
						xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxx (xxxxxxxxxxxxxx);
					}



					//xxxxxxx xxxxxx xxx xxx xxxxxx xxxxxxxxxxx/xxxxxxx/xxxxxxxxxx
					xxxxxxxxxxxxxxxxxx->x_xxxx = xxx_xxxxxxxxxxx_x3;
					xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxx = 1;
					xxxxxxxxxxxxxxxxxx->x_xxxxxxx = 1;
					xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxx = xxxxxx+1;
					


					xxxxxxxxxxxxxx->xxx (xxxxxxxxxxxxxxxxxx);
					// ----------------------------------------------------
					// xxxxxx xxxx xxxxxxxxx:
					// xxx xxxx xxxxxxxxx xx xx xxx! xx xxx xxxxxx xx xxxxx
						xxxxxxxxxxx = 1;
					// ----------------------------------------------------


					
			}	
			
			// xxxxx xxx xxxxxxx "xxxxxxxxxx"
			if (xxxxxxx ( xxxxxxx, "xxxxxxxxxx") == 0) 
			{
				char* xxxxxxx1;
				char* xxxxxxx2;
				char* xxxxxxx3;

				// xxx xxxx xxx xxxxxx xx xxx xxxxxxxx (xxxxxxxx/xxxxxxxxxx)
				xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	// xxxxxxxx
				xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	// xxxxxxxxxx
				xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	// xxxx xx xxxx
				
				/*----------------------------*/
				/* xxxxxxxx / xxxxxxxxxx  */
				/*----------------------------*/
				if (xxxxxxx1 && xxxxxxx2 && !xxxxxxx3) 
				{
					if (xxxxxx (xxxxxxx1, "xxx")) 
					{
						// xxx xxxxxxxxxx xx xxx xxxxxxxxx
						xxxxxxxx::xxxxxxxxxxxxx( xxxx (xxxxxxx2));
					}
						else if (xxxxxx.xxxxxxxxxx (x_xxxxx, xxxxxx.xxxxxxxxxxxxxx(xxxxxxx1,xxxx))) 
						{
							xxxxxxxx::xxxxxxxxxxxxx( xxxx (xxxxxxx2));
						}
					int xxxxxxxx = 0;
					for(int x = 0; xxxxxxx2[x] != '\0'; ++x)
					{
						if (!xxxxxxx(xxxxxxx2[x]))
						{
							xxxxxxx (xxxxxxxxxxxxx,"xxx xxxxxx xxxxxxxx xx xxxxxxxxxxxxx xxxx xxxx xxxxxxx \'xxxxxxxxxx\' xx xxxx %d xx xx xxxxx xxxxxx.",xxxxxx+1);
							xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
							xxxxxxx(xxxxxxxxxxxxx, "><xxx xxxxxx xxxxxxxx xx 'xxxxxxxxxx' xxxx xx x xxxxxxxx xxxxxx xxxxxxx 0 xxx 3\n");
							xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
							xxxxxxxx = 1;
							break;
						}
					}

					if( xxxx(xxxxxxx2) < 0 || xxxx(xxxxxxx2) > 3 )
					{
						if( xxxxxxxx == 0 ) {
							//xxxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
							xxxxxxx (xxxxxxxxxxxxx,"xxx xxxxxx xxxxxxxx xx \'xxxxxxxxxx\' xx xxxx %d xxx xx xxxxx xxxxxx!!",xxxxxx+1);
							xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
							xxxxxxx(xxxxxxxxxxxxx, "><xxx xxxxxx xxxxxxxx xx xxxxxxx 'xxxxxxxxxx' xxxx xx x xxxxxxxx xxxxxx xxxxxxx 0 xxx 3\n");
							xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
						}
					}

				}
				else
				{		
					xxxxxxxxxxxxxxxxxx (xxxxxx,xxxxxxx,xxxxxx+1);
					//xxxxxxx (xxxxxxxxxxxxx,"xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx.", xxxxxx+1,xxxxxxx);
					//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
					//xxxxxxx(xxxxxxxxxxxxx, "><xxxxxx xx xxxxxxxxx xxx xxxxxxx '%x' xx xxxxx \x", xxxxxxx);
					//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				}

			}
			// xxxxx xxx xxx xxxxxxx xxxxxxxxx
			if (xxxxxxx (xxxxxxx, "xxxxxxxxx") == 0) 
			{
				char* xxxxxxx1;
				char* xxxxxxx2;
				char* xxxxxxx3;
		        char* xxxxxxxxxxxxxx;
				
				// xxx xxx xxxx xxx xxxxxx xx xxx xxxxxxxx (xxxxxxxx/xxxxxxxx)
				xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);   // xxxxxxxx
				xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);		// xxxxxxxx
				xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	// xxxx xx xxxx
				//----------------------------
				// xxxxxxxx / xxxxxxxx       
				//----------------------------

				if (xxxxxxx1 && xxxxxxx2 && !xxxxxxx3) 
				{
					xxxxxxx xxxxxxxxx;
					xxxxxxx xxxxxxxxxx;
					char xxxxxx[255]="";
					
					xxxxxxxxxxxxxx = xxxxxx ("xxxxxx_xxxxxxxxx");
					if (xxxxxxxxxxxxxx != xxxx)
					{
						xxxxxxxxx = xxxxxxxxxxxxxx;
					}
					else 
						xxxxxxxxx = x_xxxxxx.xxxxxxxxxx();
					
					/*				xxxxxx (xxxxxx, x_xxxxxx[0]);
					xxx (xxx x=(xxxxxx (xxxxxx)-1); x>=0 && xxxxxx[x]!='\\'; x--)
					xxxxxx[x]='\0'; */
						
					//xxxxxxxxx = xxxxxx;
          
					// xxxxxxxxx = x_xxxxxx.xxxxxxxxx();
					xxxxxxxxx += xxxxxxx;
					xxxxxxxxx += xxxxxxx2;
					xxxxxxxx::xxxxxxx ("xxxxxxxxx:  ",xxxxxxxxx,1);
					xxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx;
						
					char  xxxx[2]="";
					char* x3xxxxxxxxx;
					x3xxxxxxxxx = xxxxxx ("xxxxxx_xxxxxxxxx");
					if (x3xxxxxxxxx!= xxxx) 
					{ 
						if ((x3xxxxxxxxx[0] =='x') || (x3xxxxxxxxx[0] =='x'))
							xxxxxxxxxx = xxxxxxxxx_xxxxxx;
						else
							xxxxxxxxxx = xxxxxxxxx_xxxxxxxx;
					}
					else
						xxxxxxxxxx = xxxxxxxxx_xxxxxxxx;
						
					// xxxxxxxx == xxx
					if (xxxxxx (xxxxxxx1, "xxx"))
					{
						xxxxxxxx::xxxxxxxxxxx (xxxxxxxxx, xxxxxxxxxx);
					// xxxxxxxx == "xxxxxxxx"
					}
					else
					{
						if (xxxxxx.xxxxxxxxxx (x_xxxxx, xxxxxx.xxxxxxxxxxxxxx (xxxxxxx1,xxxx))) 
						{
							xxxxxxxx::xxxxxxxxxxx (xxxxxxxxx, xxxxxxxxxx);
						}
					}
				}
				else
				{
					xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
					//xxxxxxx (xxxxxxxxxxxxx,"xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx!!",xxxxxx+1, xxxxxxx);
					//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
					//xxxxxxx (xxxxxxxxxxxxx, "><xxxxxx xx xxxxxxxxx xxx xxxxxxx '%x' xx xxxxx\x", xxxxxxx);
					//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				}

			}

			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxxxxxxx                          */
			/*-------------------------------------------------*/
			
			if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxxx") == 0)
			{
				char* xxxxxxx1;
				char* xxxxxxx2;
				char* xxxxxxx3;
				
				// xxx xxxx xxx xxxxxx xx xxx xxxxxxxx (xxxxxxxx/xxxxxxxxx)
				xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);   // xxxxxxxx
				xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	 // xxxxxxxxx
				xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	 // xxxx xx xxxx

				if (xxxxxxx1 && xxxxxxx2 && !xxxxxxx3) 
				{
					if (!xxxxxx (xxxxxxx1, "xxx")) 
					{  
						if (xxxxxx.xxxxxxxxxx (x_xxxxx, xxxxxx.xxxxxxxxxxxxxx (xxxxxxx1,xxxx))) 
							x_xxxxx = xxxxxxx2;
					}
				}
				else
				{
					xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
					//xxxxxxx (xxxxxxxxxxxxx,"xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx.!!",xxxxxx+1, xxxxxxx);
					//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
					//xxxxxxx(xxxxxxxxxxxxx, "><xxx xxxx xx xxx xxx xxxxxxxxx xx xxxxxxx '%x'\x", xxxxxxx);
					//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				}

			}

      //xxxxxxx xxxxxxxxxxxxxxxx
		if (xxxxxxx != xxxx)
		{
			if (xxxxxxx (xxxxxxx, xxx_xxxx_xxxxxx_xxxxxxxxxx) == 0)
		    {
				char* xxxxxxx1;
				char* xxxxxxx2;
				char* xxxxxxx3;
				xxxxxxx xxxxxxxxxxxxxx;
				//xxxxxxxxxxxxxxx = xxx xxxxxxx;

				// xxx xxxx xxx xxxxxx xx xxx xxxxxxxx (xxxxxxxx/xxxxxx xxxxxxx)
				xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);   // xxxxxxxx
				xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	 // xxxxxxxxxxxxx
				xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);	 // xxxx xx xxxx
				if (xxxxxxx1 && xxxxxxx2 && !xxxxxxx3) 
				{
					if (xxxxxx.xxxxxxxxxx (x_xxxxx, xxxxxx.xxxxxxxxxxxxxx (xxxxxxx1,xxxx))) 
					{
						xxxxxxxxxxxxxx = xxxxxxx2;
						x_xxxxxxxxxxxxx.xxx (xxxxxxxxxxxxxx);
					}
				}
				else
				{
					xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
					//xxxxxxx (xxxxxxxxxxxxx,"xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx.!!",xxxxxx+1, xxxxxxx);
					//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
					//xxxxxxx(xxxxxxxxxxxxx, "><xxxxxx xx xxxxxxxxx xxx xxxxxxx '%x' xx xxxxx.\x", xxxxxxx);
					//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				}

			}

		}
		//xxxxxxx xxxxxxxxxxxxxxxxxxx
		if (xxxxxxx != xxxx)
		{
			if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxxxxxxxxx") == 0)
		    {
				char* xxxxxxx1;
				char* xxxxxxx2;
				char* xxxxxxx3;
				char* xxxxxxx4;
				
				// xxx xxxx xxx xxxxxx xx xxx xxxxxxxx (xxxxxxxx/xxxxxx xxxxxxx)
				xxxxxxx1 = xxxxxx.xxxxxxxxxxxxx (xxxx, "=");   // xxxxxxxx
				xxxxxxx2 = xxxxxx.xxxxxxxxxxxxx (xxxx, "=");	 // xxx
				xxxxxxx3 = xxxxxx.xxxxxxxxxxxxx (xxxx, "=");	 // xxxxxxxx xx
				xxxxxxx4 = xxxxxx.xxxxxxxxxxxxx (xxxx, "=");	 // xxxx
				
				if (xxxxxxx1 && xxxxxxx2 && xxxxxxx3 && xxxxxxx4) 
				{
					xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxx = new xxxxxxxxxxxxxxxxxx();
					xxxxxxxxxxxx->x_xxxxxxxx = xxxxxxx1;
					xxxxxxxxxxxx->x_xxx = xxxxxxx2;
					xxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxx3;
					xxxxxxxxxxxx->x_xxx = xxxxxxx4;				//xxx xxx xxxxxxxxx xx xxxxx xxxx
					x_xxxxxxxxxxxxxxxxxxxxx.xxx( xxxxxxxxxxxx );
				}
			}

		}
			
			if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxxxxxx") == 0) 
			{
				char* xxxxxxx1;
				char* xxxxxxx2;
				char* xxxxxxx3;
				
				xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		        xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
				xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
        //----------------------------
				// xxxxxxxx / xxxxxxxx       
        //----------------------------
        if (xxxxxxx1 && xxxxxxx2 && !xxxxxxx3) 
				{
					if (xxxxxx (xxxxxxx1, "xxx")) 
					{
						x_xxxxxxxxxxxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxx (xxxxxxx1, xxxxxxx2);
						xxxxxxxx::xxxxxxx ("xxxxxxxxxxxxxxxx:  ",x_xxxxxxxxxxxxxxxxx);
					}

					else if (xxxxxx.xxxxxxxxxx  (x_xxxxx, xxxxxx.xxxxxxxxxxxxxx (xxxxxxx1,xxxx))) 
					{
						x_xxxxxxxxxxxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxx (xxxxxxx1, xxxxxxx2);
						xxxxxxxx::xxxxxxx ("xxxxxxxxxxxxxxxx:  ",x_xxxxxxxxxxxxxxxxx);
					}
					
				}
				else
				{
					xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
					//xxxxxxx (xxxxxxxxxxxxx,"xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx.!!",xxxxxx+1, xxxxxxx);
					//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
					//xxxxxxx(xxxxxxxxxxxxx, "><xxxxxx xx xxxxxxxxx xxx xxxxxxx '%x' xx xxxxx.\x", xxxxxxx);
					//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				}

			} 
#ifdef AIX
			if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxxxx") == 0) 
#else    
				if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxxxxx") == 0) 
#endif    
				{
					char* xxxxxxx1;
					char* xxxxxxx2; 
					char* xxxxxxx3;

					xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
					xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);

					//----------------------------
					// xxxxxxxx / xxxxxxxx       
					//----------------------------
					if (xxxxxxx1 && xxxxxxx2 && !xxxxxxx3) 
					{
						if (xxxxxx (xxxxxxx1, "xxx")) 
						{
							x_xxxxxxxxxxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxx (xxxxxxx1, xxxxxxx2);
              xxxxxxxx::xxxxxxx ("xxxxxxxxxxxxxxx:  ",x_xxxxxxxxxxxxxxxx);
						}
						else if (xxxxxx.xxxxxxxxxx  (x_xxxxx, xxxxxx.xxxxxxxxxxxxxx (xxxxxxx1,xxxx))) 
						{
							x_xxxxxxxxxxxxxxxx = xxxxxx.xxxxxxxxxxxxxxxxxxx (xxxxxxx1, xxxxxxx2);
              xxxxxxxx::xxxxxxx ("xxxxxxxxxxxxxxx:  ",x_xxxxxxxxxxxxxxxx);
						}
					}
					else
					{
						xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
						//xxxxxxx(xxxxxxxxxxxxx, "><xxxxxx xx xxxxxxxxx xxx xxxxxxx '%x' xx xxxxx.\x", xxxxxxx);
						//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
						//xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxx+1);
						//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

					}
				
				}

        //xxxxx xxxxxxxxxx xxxxxxxx
			if (xxxxxxx (xxxxxxx, xxx_xxxx_xxx_xxxxxxx) == 0) 
      {
        char* xxxxxxx1;
		char* xxxxxxx2; //xxxx xx xxxx

        xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1);
        xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1);
        // xxxx xxxxxxxxxx xxxxxxxxx
        if (xxxxxxx1 != xxxx && xxxxxxx2 == xxxx)
        {
          x_xxxxxxxxxxx = xxxxxxx1;
          //xxxxxx ("xxxxxxxxxx :%x\x",(xxxxx xxxx*) x_xxxxxxxxxxx);
          xxxxxxxx::xxxxxxx ("xxx xxxxxxx xxxxxxxx xxx xx : ",x_xxxxxxxxxxx);

		  for(unsigned int x =0; x < xxxxxx(xxxxxxx1); ++x)
			if(!xxxxxxx(xxxxxxx1[x]))
			{
				/*	>x<
					xxxxxxxxx: xxxxxxxxxxxxxxxxxx
					xxxxxxxxxxx: xxx-xxxxx xxxxxxxxxx xxxx xxxxxxxx xxxxx x xxxxxxx xxxxxx xx xxxxxxxx. 
					>x<
				 */
				xxxxxxx(xxxxxxxxxxxxx, "><xxxxxxxx xxx '%s' xxxx xx x xxxxx xxxxxx\n", xxxxxxx);
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				xxxxxxx (xxxxxxxxxxxxx,"xxxxxxxx xxxx xx x xxxxxxxx xxxxxx.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
				break;
			}
		}
		else
		{
			xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
			//xxxxxxx(xxxxxxxxxxxxx, "><xxx xxxx xx xxx xxx xxxxxxxxx xx xxxxxxx '%x'\x", xxxxxxx);
			//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			//xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxx+1);
			//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

		}
      }
			if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxxxxx") == 0) 
      {
        char* xxxxxxx1;
		char* xxxxxxx2; //xxxx xx xxxx

        xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1);
        xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1);
        // xxxx xxxxxxxxxx xxxxxxxxx
        if (xxxxxxx1 != xxxx && xxxxxxx2 == xxxx)
        {
          x_xxxxxxxxxxxxxxxx = xxxxxxx1;
          //xxxxxx ("xxxxxxxxxx :%x\x",(xxxxx xxxx*) x_xxxxxxxxxxx);
          xxxxxxxx::xxxxxxx ("xxx xxxxx xxxxxxx xxxxxxxx xxx xx : ",x_xxxxxxxxxxxxxxxx);

		  for(unsigned int x =0; x < xxxxxx(xxxxxxx1); ++x)
			if(!xxxxxxx(xxxxxxx1[x]))
			{
				xxxxxxx(xxxxxxxxxxxxx, "><xxxxxxxx xxx 'xxxxxxxxxxxxxxx' xxxx xx x xxxxxxxx xxxxxx\n");
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				xxxxxxx (xxxxxxxxxxxxx,"xxxxxxxx xxxx xx x xxxxxx.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
				break;
			}
		}
		else
		{
			xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
			//xxxxxxx(xxxxxxxxxxxxx, "><xxx xxxx xx xxx xxx xxxxxxxxx xx xxxxxxx '%x'\x", xxxxxxx);
			//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			//xxxxxxx (xxxxxxxxxxxxx,"xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx.",xxxxxx+1,xxxxxxx);
			//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

		}
      }
			if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxxxxxxxx") == 0) 
      {
        char* xxxxxxx1;
		char* xxxxxxx2;
		char* xxxxxxx3;
		char* xxxxxxx4;
		char* xxxxxxx5; //xxxx xx xxxx (xxxxxx xxxxx).

        xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1); //xxxxxxxx
        xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1); //xxx
		xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1); //xxxxxx
		xxxxxxx4 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1); //xxxxxx
		xxxxxxx5 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx,"=", xxxxxx, xxxxxx+1); //xxxx
        if (xxxxxxx1 != xxxx && xxxxxxx2 != xxxx && xxxxxxx3 != xxxx && xxxxxxx4 != xxxx && xxxxxxx5 == xxxx)
        {
			xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxxxxxx = new xxxxxxxxxxxxxxxxxx();
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx = xxxxxxx1;
			xxxxxxxxxxxxxxxxxx->x_xxx = xxxxxxx2;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxx3;
			if( xxxxxx( xxxxxxx4, "1" ) == 0 )
				xxxxxxxxxxxxxxxxxx->x_xxxxxx = 1;
			else
				xxxxxxxxxxxxxxxxxx->x_xxxxxx = 0;
			x_xxxxxxxxxxxxxxxxx.xxx( xxxxxxxxxxxxxxxxxx );
		}
		else
		{
			xxxxxxxxxxxxxxxxxx (xxxxxx, xxxxxxx, xxxxxx+1);
			//xxxxxxx(xxxxxxxxxxxxx, "><xxx xxxx xx xxx xxx xxxxxxxxx xx xxxxxxx '%x'\x", xxxxxxx);
			//xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			//xxxxxxx (xxxxxxxxxxxxx,"xxxxxx xx xxxxxxxxx xx xxxx %x xxx xxxxxxx \'%x\' xx xxxxx.",xxxxxx+1,xxxxxxx);
			//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

		}
      }
		//xxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	  if (xxxxxx(xxxxxxx, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx") == 0)
	  {
		char *xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx4 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx5 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);

		//xxxxx xxxxxx xx xxxxxxxxx
		if (xxxxxxx1 != xxxx && xxxxxxx2 != xxxx && xxxxxxx3 != xxxx && xxxxxxx4 != xxxx && xxxxxxx5 == xxxx)
		{
					//xxxxxxxx xxx xxxxxxxx
			if( xxxxxxx(xxxxxxx4, "xxxxxxx" ) != 0 &&
				xxxxxxx(xxxxxxx4, "xxxxx"   ) != 0 &&
				xxxxxxx(xxxxxxx4, "xxxxx"   ) != 0 &&
				xxxxxxx(xxxxxxx4, "xxxxxxxx") != 0 &&
				xxxxxxx(xxxxxxx4, "xxxxxx"  ) != 0 &&
				xxxxxxx(xxxxxxx4, "xxxxxxx" ) != 0  )
			{
				xxxxxxx (xxxxxxxxxxxxx,"xxxxxxx xxxxxxxx xx xxxx %d.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

				/*	>x<
					xxxxxxxxx: xxxxxxxxxxxxxxxxxx
					xxxxxxxxxxx: xxxx x xxxxxxx xxx xx xxxxxxxx xxxxxx xxx xxxxxxx. xxx xxxxx xxxxxx xxxx xxx xxxxxx xx xxxx xxx. 
					>x<
				 */
				xxxxxxx(xxxxxxxxxxxxx, "><xxxxxxxx xxxxxx '%s' xxxxxxx xx xxxxxxx 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx' xx xxx xxxxxxx\n", xxxxxxx4);
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			}
			xxxxxxxxxxxxxxxxxx->x_xxxxxxx = 2;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = "xxx";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx	= xxxxxxx1;
			xxxxxxxxxxxxxxxxxx->x_xxx		= xxxxxxx2;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxx3;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx	= xxxxxxx4;
			xxxxxxxxxxxxxx->xxx (xxxxxxxxxxxxxxxxxx);
			// ----------------------------------------------------
			// xxxxxx xxxx xxxxxxxxx:
			// xxx xxxx xxxxxxxxx xx xx xxx! xx xxx xxxxxx xx xxxxx
			xxxxxxxxxxx = 1;
			// ----------------------------------------------------

		}
		else
		{
			xxxxxxx( xxxxxxxxxxxxx, "><xxxxxxx xxxxxx xx xxxxxxxxx xx xxxxxxx 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n");
			xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxx %d xx xxxxx.!!",xxxxxx+1);
			xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

		}

	  }


	  //xxxxx xxxxxxxxxxxx xxxxxxxxx
	  if (xxxxxxx (xxxxxxx, "xxxxxxxxxxxx") == 0)
	  {
		char *xxxxxxx1 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx2 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx3 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx4 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx5 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx6 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx7 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx8 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx9 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx10 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);
		char *xxxxxxx11 = xxxxxx.xxxxxxxxxxxxxxxxxxxxxx (xxxx, "=", xxxxxx, xxxxxx+1);

		//xxxxx xxxxxx xx xxxxxxxxx
		if(xxxxxxx1 != xxxx && xxxxxxx2 != xxxx && xxxxxxx3 != xxxx && xxxxxxx4 != xxxx && 
		   xxxxxxx5 != xxxx && xxxxxxx6 != xxxx && xxxxxxx7 != xxxx && xxxxxxx8 != xxxx &&
		   xxxxxxx9 != xxxx && xxxxxxx10 != xxxx && xxxxxxx11 == xxxx )
		{
			xxxxxxxxxxxxxxxxxx->x_xxxxxxx = 1;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = "xxx";
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx	= xxxxxxx1;
			xxxxxxxxxxxxxxxxxx->x_xxx		= xxxxxxx2;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxx3;
			xxxxxxxxxxxxxxxxxx->x_xxxxxx	= xxxx(xxxxxxx4);
			xxxxxxxxxxxxxxxxxx->x_xxxxx		= xxxxxxx5;
			xxxxxxxxxxxxxxxxxx->x_xxxxxx	= xxxxxxx6;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxx	= xxxxxxx7;
			xxxxxxxxxxxxxxxxxx->x_xxxxxx	= xxxxxxx8;
			xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxx		= xxxxxxx9;
			xxxxxxxxxxxxxxxxxx->x_xxxxx_xxxxxxx		= xxxx(xxxxxxx10);
			bool xxxxxxxxxxxxx	= true;

			//xxxxxxxx xxxxxx/xxxxxxx

			if(xxxxxx(xxxxxxx4, "") == 0)
			{
				xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxxxx/xxxxxx xx xx xxxxxx xx xxxx %d.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxx (xxxxxxxxxxxxx,"");

				xxxxxxx(xxxxxxxxxxxxx, "><xxxxx xxx xxxxxxx/xxxxxx xx xxxxxxx 'xxxxxxxxxxxx' xxxx xx xxxxxx 0 xx 1; xxxxxxx xx 0 (xxxxxxx)\n");
				xxxxxx->xxxxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);

			}
			for (unsigned int x =0; x < xxxxxx(xxxxxxx4); ++x)
			{
				if (!xxxxxxx(xxxxxxx4[x]))
				{
				xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxxxx/xxxxxx xx xx xxxxxx xx xxxx %d.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxx (xxxxxxxxxxxxx,"");

				xxxxxxx(xxxxxxxxxxxxx, "><xxxxx xxx xxxxxxx/xxxxxx xx xxxxxxx 'xxxxxxxxxxxx' xxxx xx xxxxxx 0 xx 1; xxxxxxx xx 0 (xxxxxxx)\n");
				xxxxxx->xxxxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				break;

				}
			}
			
			if(xxxxxxxxxxxxxxxxxx->x_xxxxxx != 0 && xxxxxxxxxxxxxxxxxx->x_xxxxxx != 1)
			{
				xxxxxxx (xxxxxxxxxxxxx,"xxx xxxxxxxxx xxxxxx/xxxxxxx xxx xx xxxxx xxxxxx xx xxxx %d!!",xxxxxx+1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

				xxxxxxx(xxxxxxxxxxxxx, "><xxxxx xxx xxx xxxxxxxxx xxxxxx/xxxxxxx xx xxxxxxx 'xxxxxxxxxxxx' xx xxx x xxxxx xxxxxx\n");
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			}

			//xxxxxxxx xxx xxxxxxxx
			if( xxxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxxx" ) != 0 &&
				xxxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxx"   ) != 0 &&
				xxxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxx"   ) != 0 &&
				xxxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxxxx") != 0 &&
				xxxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxx"  ) != 0 &&
				xxxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxxx" ) != 0  )
			{
				xxxxxxx (xxxxxxxxxxxxx,"xxxxxxx xxxxxxxx xx xxxx %d.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

				xxxxxxx(xxxxxxxxxxxxx, "><%s xx xx xxxxxxx xxxxxxxx\n",xxxxxxxxxxxxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx());
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			}

			//xxxxxxxx xxxxxxxxxxx xxxx
			if( xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxx, "xxx") != 0 &&
				xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxx, "xxx") != 0 &&
				xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxx, "xxx") != 0 &&
				xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxx, "xxx") != 0 &&
				xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxx, "xxx") != 0 &&
				xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxx, "xx2") != 0)
			{

				xxxxxxx (xxxxxxxxxxxxx,"xxxxxxx xxxxxxxxxxx xxxx xx xxxx %d.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
				xxxxxxx(xxxxxxxxxxxxx, "><%s xx xx xxxxxxx xxxxxxxxxxx\n", xxxxxxxxxxxxxxxxxx->x_xxxxxx.xxxxxxxxxxx());
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			}

			//xxxxxxxx xxxx xxxxxxxxxxx xx xxxx xx xxxxx
			if( xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxx, "xxxxx") != 0 &&
				xxxxxx(xxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxx, "xxxx") != 0)
			{
			xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxxxxxxxx xx xxx xxxx xx xxxxx xx xxxx %d.!!",xxxxxx+1);
			xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

			xxxxxxx(xxxxxxxxxxxxx, "><xxxxx xx xxxxxxxxxxx xxxx xx xxxxxx xxxx xx xxxxx xx xxxxxxx 'xxxxxxxxxxxx'x");
			xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			break;

			}

				//xxxxxxxx xxxx xxxxx xx x xxxxxx
			for (unsigned int x =0; x < xxxxxx(xxxxxxx10); ++x)
			{
				if (!xxxxxxx(xxxxxxx10[x]))
				{
				xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxx xx xx xxxxxx xx xxxx %d.!!",xxxxxx+1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

				xxxxxxx(xxxxxxxxxxxxx, "><xxxxxxxxx xxxxx xx xxxxxxx 'xxxxxxxxxxxx' xx xxx x xxxxx xxxxxx\n");
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
				xxxxxxxxxxxxx = false;
				break;

				}
			}


			//xxxxxxxx xxxx xxxxx xxx x xxxxx xxxxxxx 0 xxx 100
			if (xxxxxxxxxxxxx && (xxxxxxxxxxxxxxxxxx->x_xxxxx_xxxxxxx < 0 || xxxxxxxxxxxxxxxxxx->x_xxxxx_xxxxxxx > 100))
			{
				xxxxxxx (xxxxxxxxxxxxx,"xxxxx xxxxxxxx xx xxxx %d: xxxxx xxxxxxx xx xxxxx xx xxxxxxx \'xxxxxxxxxxxx\' xx xxx xx xxx xxxxxxxxx xxxxx\n",xxxxxx + 1);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");

				xxxxxxx(xxxxxxxxxxxxx, "><xxxxxxxxx xxxxx xx xxx xx xxxxx xx xxxxxxx 'xxxxxxxxxxxx'");
				xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			}

		}
		else
		{
			xxxxxxx(xxxxxxxxxxxxx, "><xxx xxxx xx xxx xxx xxxxxxxxx xx xxxxxxx 'xxxxxxxxxxxx'\n");
			xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
			xxxxxxx (xxxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxx %d xx xxxxx.!!",xxxxxx+1);
			xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
		}
		xxxxxxxxxxxxxx->xxx (xxxxxxxxxxxxxxxxxx);
		// ----------------------------------------------------
		// xxxxxx xxxx xxxxxxxxx:
		// xxx xxxx xxxxxxxxx xx xx xxx! xx xxx xxxxxx xx xxxxx
		xxxxxxxxxxx = 1;
		// ----------------------------------------------------

	  }
			//xxxxxxxxx xxx xxxxxxx xxxxxxxx
			if(xxxxxx (xxxxxxx, "xxxxxxxxxxx")      != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxx")       != 0 &&
			   xxxxxx (xxxxxxx,	"xxxxxxxxx")        != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxx")    != 0 &&
			   xxxxxx (xxxxxxx,  xxx_xxxx_xxxxxx_xxxxxxxxxx) != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxxxxxxxx") != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxxxxx") != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxxx")   != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxxxx")  != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxx")     != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx")     != 0 &&
			   xxxxxx (xxxxxxx, xxx_xxxx_xxx_xxxxxxx)       != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxxxx")    != 0 &&
			   xxxxxx (xxxxxxx, "xxxxxxxxxxxxxxxxxx") != 0) 
			{
				if (!(xxxxxxx[0] == '#' || xxxxxxx[0] == ' ' || xxxxxxx[0] == '\t' || xxxxxxx[0] == 0))
				{
					/*	>x<
						xxxxxxxxx: xxxxxxxxxxxxxxxxxx
						xxxxxxxxxxx:
						xxxx xxxxxxxxx xxxxxx xxx xxxxxxxxxxxxx xxxxx xxx xxxxxx xxx xxxxxxxx xxxxxx. 
						xxx xxxxxxxxxxxxx xxxxxxx xxxxxxx xxx xxxx *.xxxx xxxxxx, xx xxxx-xxxxx xxx xxxx-xxxxxxxx. 
						xxx xxxxxxxxxx xxxx xxx xxxxxxxxx xxxxx xx xxxxxxxx xxx xxxxxxxxxxxxx xxxxx:
						xxxxxxx; x.x. 'xxxxxxxxxx' xxxxxxxxxx xxx xxxxxxxxxxxxx xxxx xxx xxxxxxxxxx xxx xxxxxx xx xxx xxxxxxxxx xxxxxx. 
						xxxxxxx; x.x. 'xxxxxxxxxx =xxx =0' xxxxxxxxxx x xxxxxxxx xxxxxxxxxxxxx xxxx. 
						xxxxxxxxx; x.x. 'xxxxxx' xx x xxxxx xxxxx xxx xx x xxxxx, xxxxxxxxxxxxx xxx xx xxxxxx. 
						xxxxxxxx; x.x. '42' xx xx xxxxxxxxx, xxxx-xxxxxxxxx xxxxx xxxx xxx xx xxxxx xx xxxxxxx xxxxxxxxxxx. 
						xxxxxxx:
# xxxxxx xxxx x3xxxxxx.xxx
			xxxxxxxxxx     =xxx        =0
#xxxxxxxxxx =120
			xxxxxxxxxxx     =xxx      =xxx      =xxx        =xxx       =xxxx4         =1   \
			   =xxxxxxx    =xxxx_xxxx   =x3_xxxx-4      =xxxx4_xxxxx_xxxxx 
						>x<
					 */
					xxxxxxx(xxxxxxxxxxxxx, "><'%s' xx xx xxxxxxx xxxxxxx\n", xxxxxxx);
					xxxxxx->xxxxxxxxxxx(xxxxxx + 1, xxxxxxxxxxxxx);
					xxxxxxx (xxxxxxxxxxxxx,"xxxxxxx xxxxxxx xx xxxx %d.!!",xxxxxx+1);
					xxxxxxxx::xxxxxxxx (xxxxxxxxxxxxx,"");
				}
			}
	    }
		//----------------------------------------------------------------
		// xxxxxx xxxx xxxxxxxxx:
		// xxxxx xx xxx xxxxxxx xxxxxxxxx xxxxxxxx xxx xxxxxxxx xxxx xxxxx
		if( xxxxxxxxxxx == 0 ) {
			delete xxxxxxxxxxxxxxxxxx;
		}
		//----------------------------------------------------------------
	}


	xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxx)",0);

}

void xxxxxxxxxxxxx::xxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxxxxxxxx)
{
	
	xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxxxx;
	xxxxxxxxxxxxxxxx = new xxxxxxxxxxxxxxxxxx;
	int xxxx;
	xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxxxxxxxx)");
	//	xxxx = xxxxx("xxxxxxxxx.xxx","x");
	
	for (xxxx=0; xxxx < (int) xxxxxxxxxxxxxxxxxxxx->xxxxxxx() ; xxxx ++)
	{
		xxxxxxxxxxxxxxxx = (xxxxxxxxxxxxxxxxxx*) xxxxxxxxxxxxxxxxxxxx->xxxxx (xxxx);
		xxxxxxxxxxxxxxxx->xxxxxxxxxxxxxxxxxxxxx ();
	}
	
	xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxx(xxxxxxxx *xxxxxxxxxxxxxx)",0);
}

void xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxx *xxxxxxxxxxxxxxxxxxxxxxx, xxxxxxx *xxxxxxxxxxxxxxx, xxxxxxxx *xxxxxxxxxxxxxxx)
{
	xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxx *xxxxxxxxxxxxxxxxxxxxxxx, xxxxxxx *xxxxxxxxxxxxxxx, xxxxxxxx *xxxxxxxxxxxxxxx)");
	int xxxxxxxx = true;
	int xxxxxxxxxx;
	int xxxxxxxx;
	int x;
	int xxxxxxx = 0;
	xxxxxx xxxxxxxx;
	
	
	xxxxxxxxxxxxxxxxxx* xxxxxxxx;
	//xxxxxxxx = xxx xxxxxxxxxxxxxxxxxx;
	
	xxxxxxxxxxxxxxxxxx* xxxxxxxxxx;
	xxxxxxxxxx = new xxxxxxxxxxxxxxxxxx;
	
	xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxxxxxxxx;
	
	xxxxxxxxxxxxxxxxxxxx = (xxxxxxxxxxxxxxxxxx*) xxxxxxxxxxxxxxx;
	
	
	xxxxxxxxxx->x_xxxxxxxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx;
	xxxxxxxxxx->x_xxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxx;
	xxxxxxxxxx->x_xxxxxxxxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
	xxxxxxxxxx->x_xxxxxxxxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
	
	
	
	// xxxx xx xxxxxxx 
	//	xxx "xxxxxx" xxxxx xxxx xxx xxxxxxxxxxxxx xxxxx
	/*   xx (xxxxxxxxxxxxxxxxxxxx->x_xxxxxx)
	{*/
	
	
	
	for (x = xxxxxxxxxxxxxxx->xxxxxxx() - 1; x>=0 && xxxxxxxx; x--) 
	{
		xxxxxxxx = (xxxxxxxxxxxxxxxxxx*) xxxxxxxxxxxxxxx->xxxxx(x);
		xxxxxxxxxx = false;
		xxxxxxxx = false;
		xxxxxxxx = true;
		
		
		
		// xx xxxxx xx xx xxxxx xxxx xx xxxxx xx:  xxxx, xxx, xxxxxx xxx xxxxxx
		
		if ((!xxxxxx (xxxxxxxx->x_xxx.xxxxxxxxxxx(),xxxxxxxxxx->x_xxx.xxxxxxxxxxx())) && 
			(xxxxxxxx.xxxxxxxxxx(xxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx())) &&
			(!xxxxxx (xxxxxxxx->x_xxxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxx->x_xxxxxxxxx.xxxxxxxxxxx())) &&
			(!xxxxxx (xxxxxxxx->x_xxxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxx->x_xxxxxxxxx.xxxxxxxxxxx())))
			
		{ 
			xxxxxxxx = true;
			
			// xxx xxx xxxxx57138 xxxxx: xx xxxxxxxxxxxx xx xx xxxx
			// xxxxx xxx xxxxxxxx xx xxxxxxx xxxx xxxx xxxxx xxx xx xxxxxxxxxx xxxxxxxxxx xxxxxxxxx
			// xxxx xxxxx xxxxxxxxxxxxx xx xxxxxxx xx xxxxxxxxxxx
			if ( xxxxxxxx->x_xxxxxxxx == "xx")
			{
				if ((xxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx() <= 0) && (xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx() <= 0))
				{
					// xx xxxxx xx xx xxxxx xxxx xx xxxxx xx:
					if ((!xxxxxx(xxxxxxxx->x_xxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxx.xxxxxxxxxxx(),xxxxxxxxxxxxxxxxxxxx->x_xxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxx.xxxxxxxxxxx())))
					{ xxxxxxxxxx = true; }
				}
			}
			//xxx x_xxxxxxx == 1 xxxxx x xxxxxxxxxxxx	//xxx x_xxxxxxx == 2 xxxxx x xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
			else if(xxxxxxxxxxxxxxxxxxxx->x_xxxxxxx == 1 || xxxxxxxxxxxxxxxxxxxx->x_xxxxxxx == 2)
			{
				if((!xxxxxx(xxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx())) &&
				   (!xxxxxx(xxxxxxxx->x_xxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxx.xxxxxxxxxxx())))
					{ xxxxxxxxxx = true; }
			}

			// xxxx xxxxxx xxxxxxxxx xxx xxx xxxxx xxxxxxxx
			// xx xxxxx xx xx xxxxx xxxx xx xxxxx xx:
			else if ((!xxxxxx(xxxxxxxx->x_xxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxx.xxxxxxxxxxx(),xxxxxxxxxxxxxxxxxxxx->x_xxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx())) &&
						(!xxxxxx(xxxxxxxx->x_xxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxx.xxxxxxxxxxx())))
					{ xxxxxxxxxx = true; }
		}
		
		
		  // xx xxxxx xx xx xxxxx xxxx xx xxxxx xx: xxxxxxxxx xxx xxxxxxxx
		  if ((!xxxxxx(xxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx())) &&
				(!xxxxxx(xxxxxxxx->x_xxxxxxxxx.xxxxxxxxxxx(), xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx.xxxxxxxxxxx())))
			{ 
				if (xxxxxxxxxx)
				{
					xxxxxxxx = false;
				}
				else if (xxxxxxxx)
				{ 
					//xxxxxxxx xxxxxxx xxx xxxxxxxxxx
					xxxxxxx++;
					
					// xxxxxxxxxx->x_xxxxxxx = xxxxxxxx->x_xxxxxxx + 1;
					// xxxxxxxxxx->x_xxxxxxxxxx = xxxxxxxx->x_xxxxxxxxxx + 1;
					
				}
				
			}
			
			
			if (! xxxxxxxx) 
			{
				xxxxxxxx = false;
				xxxxxxxx::xxxxxxxxxxxx();
				xxxxxxxx::xxxxxxx ("xxxxxxxxxxxxxxxxx  xxxxxxx : xxx xxxxxxxxx xxxxxxx xx xxxxxx xxxx xxx xxxxxxxxx");
				xxxxxxxx::xxxxxxx ("xxxxxxxxxxxxx 1");
				xxxxxxxx->xxxxxxxxxxxxxxxxxxxxx ();
				xxxxxxxx::xxxxxxx ("xxxxxxxxxxxxx 2");
				xxxxxxxxxxxxxxxxxxxx->xxxxxxxxxxxxxxxxxxxxx ();
				xxxxxxxx::xxxxxxxxxxxx();
			}
	}
	/*} xxxx xx xxxxxxx: xxxxxx xx xxx xxxx x xxxxx xx xxx xxxxxxxxxxxxx xxxxx
	 xxxx 
	{ xxxxxxxx = xxxxx; }*/
	
	
	
	
	
	// ************  xxxxx xx xxxxxxxxxxxxxxx  ********************************************
	
	if (xxxxxxxx)  
	{
		// xxxxxxxxxxxxxxx = xxxxxxxxxxxxxxxxxxxx;
		//  xxxxxxxxxxxxxxx->x_xxxxxxxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx;
		//   xxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
		//   xxxxxxxxxxxxxxx->x_xxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxx;
		//   xxxxxxxxxxxxxxx->x_xxxxxxxxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
		
	   
		
		//	xxxxxxxxxx->x_xxxxxxxx= xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx;
		//	xxxxxxxxxx->x_xxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxx;
		//	xxxxxxxxxx->x_xxxxxxxxx = xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
		//	xxxxxxxxxx->x_xxxxxxxxx= xxxxxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
		xxxxxxxxxx->x_xxxxxxxx= xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx;
		xxxxxxxxxx->x_xxxxxxxxx =xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
		xxxxxxxxxx->x_xxxx =xxxxxxxxxxxxxxxxxxxx->x_xxxx;
		xxxxxxxxxx->x_xxxxxxxx= xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxx;
		xxxxxxxxxx->x_xxxxxx= xxxxxxxxxxxxxxxxxxxx->x_xxxxxx;
		xxxxxxxxxx->x_xxxxx =	xxxxxxxxxxxxxxxxxxxx->x_xxxxx;
		xxxxxxxxxx->x_xxxxx= xxxxxxxxxxxxxxxxxxxx->x_xxxxx;
		xxxxxxxxxx->x_xxxx= xxxxxxxxxxxxxxxxxxxx->x_xxxx;
		xxxxxxxxxx->x_xxx =xxxxxxxxxxxxxxxxxxxx->x_xxx;
		xxxxxxxxxx->x_xxx =xxxxxxxxxxxxxxxxxxxx->x_xxx;
		xxxxxxxxxx->x_xxxx =xxxxxxxxxxxxxxxxxxxx->x_xxxx ;
		xxxxxxxxxx->x_xxxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxxxx + xxxxxxx;
		xxxxxxxxxx->x_xxxxxxxxxx= xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxxx ;//+ xxxxxxx;
		xxxxxxxxxx->x_xxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxxx;
		xxxxxxxxxx->x_xxxxxxxxxxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx;
		xxxxxxxxxx->x_xxxxxxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxxx;
		xxxxxxxxxx->x_xxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxxx;
		xxxxxxxxxx->x_xxxxxxxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxxxxxxxx;
		xxxxxxxxxx->x_xxxxx_xxxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxx_xxxxxxx;
		xxxxxxxxxx->x_xxxxxxx = xxxxxxxxxxxxxxxxxxxx->x_xxxxxxx;
		
		xxxxxxxxxxxxxxx->xxx(xxxxxxxxxx);
		
	} else {
		delete xxxxxxxxxx;
	}
	
	 xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxx *xxxxxxxxxxxxxxxxxxxxxxx, xxxxxxx *xxxxxxxxxxxxxxx, xxxxxxxx *xxxxxxxxxxxxxxx)",0);
}



bool xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxx )
{
	xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxx )");
	static int* xxxxxxxxxxxxxxxx;    
	size_t xxxxxxxxxxxxxx;
	static int xxxxxxxxxx = 0;
	
	// xxxxxxxxxx xxxxxxxxxxxxxxxx
	if (xxxxxxxxxx == 0)
		if ((xxxxxxxxxxxxxxxx = (int*) xxxxxx (sizeof (int))) == xxxx)
		{
			xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxx )",false);
			return false;
		}
		else
		{
			xxxxxxxxxx ++;
			*xxxxxxxxxxxxxxxx = -1;
		}
		
		int xxxxx =0;
		
		while ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx].xxxxxxxxxxxxxx,"")) != 0 )
		{
			int xxxxx2=0;
			while ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx].xxxxxxxxxxxx[xxxxx2],"")) != 0 )
			{
				if (xxxxxxxxxx == xxxxxxxxxxxxxxxx[xxxxx].xxxxxxxxxxxx[xxxxx2])
				{
					for (int xxxxx3 = 0 ; xxxxx3 < xxxxxxxxxx; xxxxx3++)
						if (xxxxxxxxxxxxxxxx[xxxxx3] == (xxxxx+xxxxx2))
						{
							xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxx )",false);
							return false;
						}
						xxxxxxxxxxxxxx = _xxxxx( xxxxxxxxxxxxxxxx );
						
						// xxxxxxxxxx xxx xxxx xxx xxxx: 
						if( (xxxxxxxxxxxxxxxx = (int*)xxxxxxx( xxxxxxxxxxxxxxxx, xxxxxxxxxxxxxx +  sizeof(int) )) ==  xxxx )
						{
							xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxx )",false);
							return false;
						}
						
						xxxxxxxxxxxxxxxx[xxxxxxxxxx] = (int) (xxxxx + xxxxx2);
						xxxxxxxxxx++;
						
						xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxx )",true);
						return true;
				}
				xxxxx2++;
			}
			xxxxx++;
		}
		xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxx )",false);
		return false;
}

//------------------------------------------------------------------------------------------
// xxxxxxxx: xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxxx)
//
// 
// 
bool xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxxx)
{
	xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxxx)");
	//xxxxxx xxx* xxxxxxxxxxxxxxxxxxx;    
	size_t xxxxxxxxxxxxxxxxx;
	//xxxxxx xxx xxxxxxxxxx = 0;
	
	// xxxxxxxxxx xxxxxxxxxxxxxxxx
	if (x_xxxxxxxxxxxxxxxxxxxxxxxxxxxx == 0)
		if ((x_xxxxxxxxxxxxxxxxxxx = (int*) xxxxxx (sizeof (int))) == xxxx)
		{
			xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxxx)",false);
			return false;
		}
		else
		{
			x_xxxxxxxxxxxxxxxxxxxxxxxxxxxx ++;
			*x_xxxxxxxxxxxxxxxxxxx = -1;
		}
		
		int xxxxx =0;
		while ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx].xxxxxxxxxxxxxx,"")) != 0 )
		{
			if (xxxxxxxxxxxxx == xxxxxxxxxxxxxxxx[xxxxx].xxxxxxxxxxxxxx)
			{
				// xxxxxx xxxxxxx xxxxxxxxxxxx xx xxxxxxx xxxx
				for (int xxxxx2 = 0 ; xxxxx2 < x_xxxxxxxxxxxxxxxxxxxxxxxxxxxx; xxxxx2++)
					if (x_xxxxxxxxxxxxxxxxxxx[xxxxx2] == xxxxx)
					{
						xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxxx)",false);
						return false;
					}
					
					// xxx xxxxx xxx xxxxxxxxxxxxxxxxxxx
					xxxxxxxxxxxxxxxxx = _xxxxx( x_xxxxxxxxxxxxxxxxxxx );
					
					// xxxxxxxxxx xxxxxx xxx x xxx xxxxxxxxxxxx xxxxx
					if( (x_xxxxxxxxxxxxxxxxxxx = (int*)xxxxxxx( x_xxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxx +  sizeof(int) )) ==  xxxx )
					{
						xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxxx)",false);
						return false;
					}
					
					x_xxxxxxxxxxxxxxxxxxx[x_xxxxxxxxxxxxxxxxxxxxxxxxxxxx] = (int) xxxxx;
					x_xxxxxxxxxxxxxxxxxxxxxxxxxxxx++;
			}
			xxxxx++;
		}
		
		xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxxx)",true);
		return true;
}


bool xxxxxxxxxxxxx::xxxxxxxxxxxxx(int xxxxx)
{
	xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxx()");
	
	xxxxxxx* xxxxxxxxxxxx;

	if (xxxxx == x3xxxxxx_xxxx)
	{
		if (x_xxxxx > 1)
		{
			if ( (xxxxxx (x_xxxxxx[1], xxxxxxx_xxxx)==0) || (xxxxxx (x_xxxxxx[1], "-xxxxx")!=0) )
			{
				xxxxxxxxxxxxxxxxxxxxxx (x_xxxxxx[0]);
				xxxx (0);
			}
		}
	}
	else
	{
		if (x_xxxxx == 1 || (xxxxxx (x_xxxxxx[1], xxxxxxx_xxxx)==0) )
		{
			xxxxxxxxxxxxxxxxxxxxxx (x_xxxxxx[0]);
			xxxx (0);
		}
	}

	for (int xxxxx = 1; xxxxx < x_xxxxx; xxxxx++) 
	{
				//xx (xxxxxxx (x_xxxxxx[xxxxx]) == xxxxxxx (xxxxxxx_xxxx)) 
		
			 if (xxxxxx (x_xxxxxx[xxxxx], xxxxxxx_xxxx) == 0)
			 {
				 xxxxxxxx::xxxxxxx ("xxxxxxxxxxx xxxxxxx", "xxxxx xxxxxxxxx:" );
				 while (((xxxxx+1) < x_xxxxx) && (x_xxxxxx[(xxxxx+1)][0] != '-'))
				 {
					 xxxxx++;
					 xxxxxxxxxxxx = new xxxxxxx;
					 *xxxxxxxxxxxx = x_xxxxxx[xxxxx];
					 x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxxxxxx.xxx (xxxxxxxxxxxx);
					 xxxxxxxx::xxxxxxx ("xxxxxxxx:  ",x_xxxxxx[xxxxx]);
				 }
			 }
			 else if (((xxxxxx (x_xxxxxx[xxxxx], xxxxxxx_xxxxxxx) == 0) && ((xxxxx+1) < x_xxxxx)))
			 {
				 xxxxx++;
				 xxxxxxxx::xxxxxxx ("xxxx xxxxxxxxxxxxx xxxx: ",x_xxxxxx[xxxxx]);
				 x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxx = x_xxxxxx[xxxxx];
			 }
			 
			 else if ((xxxxxx (x_xxxxxx[xxxxx], xxxxxxx_xxx_x3_xxx)) == 0)
			 {
				 xxxxxxxx::xxxxxxx ("x/3 xxxxxxxxxxxxx xx xxxx!!");
				 x_xxxxxxxxxxxxxxxxxxxx.x_xxxxx3xxx = true;   
			 }
			 else if ((xxxxxx (x_xxxxxx[xxxxx], xxxxxxx_xx_xxx)) == 0)
			 {
				 xxxxxxxx::xxxxxxx ("xx xxxxxx xxxxxx xxxxx");
				 x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxx = true;
			 }
       else if ((xxxxxx (x_xxxxxx[xxxxx], xxxxxxx_xxxxx)) == 0)
			 {
				 xxxxxxxx::xxxxxxx ("xxxxx xxxxxxx xxxxxxxxxxx");
				 xxxxxxxx::xxxxxxxxxxxxx (xxxxxxxxxx_xxxx);
				 xxxxxxxx::xxxxxxx ("xxxxxxxxxx.xxx");
			 }
			 else if ((xxxxxx (x_xxxxxx[xxxxx], xxxxxxx_xx_xxxxx_xxxxx)) == 0)
			 {
				 xxxxxxxx::xxxxxxx ("xx_xxxxx xxxxx xxx, xx xx xxxxx xxxxx xx xxxxxx xxxxxxxxxxxxx");
				 x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxxxxxxxx = true;
			 }
	}


  if (xxxxx == x3xxxxxx_xxxx)
  {
    x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxx = "x3xxxxxx.xxx";
  }

    if (xxxxx == x3xxxxxx_xxxx)
  {
    x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxx = "x3xxxxxx.xxx";
  }

	// xxxxx xx xxx xxxxxxxxx "-xxxxxxx" xx xxx. xx xxxx xxxxxxxxx xx xxx xxx -> xxxxx
  // xxxx xxxx xx x3xxxxxx xxxx xxxx xxxxxxxx. xx xxxxx xxxxx x_xxxxxxxxxxxxxxx xx xxx xx xxxxx
	if ((x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxx == "") && (x_xxxxxxxxxxxxxxx == true) && (xxxxx == x3xxxxxx_xxxx))
	{
		xxxxxx ("xxxxx: xxxxxxxxx -xxxxxxx xx xxx xxx\n");
		xxxx (1);
	}
	// xxx xxx xxxxxxx xxx 7.0 xxxxx xx xx xxxxxx xx x/3 xx xxx xxxxxxxxx x_xxxxxx xx 
	// xxx xx xxxx xxx xxxx xxxxxxx
	x_xxxxxxxxxxxxxxxxxxxx.x_xxxxx3xxx = true;
	
	
	xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxx()",true);
	return true;
}



//------------------------------------------------------------------------------------
// xxxxxxxx: xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxx *xxxxxxxxxxxxxx)
// 
// xxxxxxxx xxxxxx xxx xxxxxxxxxxxxx xxxxxxxxx xx xxx xxxxx xxxxxxxxx "xxxxxxxxxxxxxx"
// xxx xxxxxx. xxxxx xxxxxx xxx x.x. xxxxx xxxxxxxxx xx xxxxx xxxxxxxxx. xxxxxxxx xxxxxx xxx
// xxxxxxx xx xxx xxxxx xxxx.
// 
// xxxxx xxxxxxxxx: xxxxxxxxxxxxxx xxxx xxxx xxxxxxxxxxxxxxxxxx
//					xxxxxxx xxxx xxxx xxxxxxxxxxxxxxxxxxx* (xxxxxx xxx xxxxxx)
//
// xxxxxx xxxxx:  
//	xxxx:		xxxxxxxx xxxxxxxx xxxxxxxxxx
//	xxxxx:	xxxxxxxxxxxxx xxxxxxxx xxxxx(x)
bool xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxx *xxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxx* xxxxxx)
{

	xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxx* xxxxxx= xxx xxxxxxxxxxx())");
	bool xxxxxxx = true;
	bool xxxxxxxxxxxxxx = false;
	bool xxxxxxxxxxxxxxxx = false;
	bool xxxxxxxxxxxxxxxxxxxxxx = false;
	bool xxxxxxxxxxxxxxx = false;	
	bool xxxxxxxxxxxxxxx = false;
	char xxxxxxxxxxxx [1024]="";

	if (xxxxxxxxxxxxxx->x_xxxxxxx ==1 || xxxxxxxxxxxxxx->x_xxxxxxx ==2)
	{
		xxxxxxxx::xxxxxxx("xxxxxxx xxxxxxxxxxxxxxxxxx xxxxxxx xxxxx xxxxxxxxx, xxxxxxx xxxxxx xx x \'xxxxxxxxxxxx\' xx x \'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\' xxxxxx");
		xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxx* xxxxxx= xxx xxxxxxxxxxx())");
		return true;
	}

	// xxxxx xxx xxxxxxxxx xxxxxxxxx:
	

	if (xxxxxxxxxxxxxx->x_xxxxxxxx  == "xxxxxxxxxxxxxx") 
	{
		if(	xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "")      == 0  ||
			xxxxxx(xxxxxxxxxxxxxx->x_xxx, "")		== 0  ||
			xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "") == 0  ||
			xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "") == 0  ||
			xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "")	!= 0
		  )
		{
			xxxxxxxxxxxxxxxxxx (xxxxxx, "xxxxxxxxxxx", xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			//xxxxxxx (xxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
			xxxxxxx = false;

			//xxxxxxx(xxxxxxxxxxxx, "><xxx xxxx xx xxx xxx xxxxxxxxxx xx xxx xxxxxxx 'xxxxxxxxxxx' (xxxxxxx = xxxxxxxxxxxxxx)\x");
			//xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
		}
	}

	//xxxxxxxx xxx xxxxxxxx
	if( xxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "" ) != 0 &&
		xxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxxx" ) != 0 &&
		xxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxx"   ) != 0 &&
		xxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxx"   ) != 0 &&
		xxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxxxx") != 0 &&
		xxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxx"  ) != 0 &&
		xxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxxx" ) != 0  )
	{
		if( !(xxxxxxxxxxxxxx->x_xxxxxxxx == "xxxxxxxxxxxxxx") )
		{
			xxxxxxx (xxxxxxxxxxxx,"xxxxxxx xxxxxxxx xxxxxxxx xx xxxx %d.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
			xxxxxxx = false;
			xxxxxxx(xxxxxxxxxxxx, "><'%s' xx xx xxxxxxx xxxxxxxx\n", xxxxxxxxxxxxxx->x_xxxxxxxx.xxxxxxxxxxx());
			xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
		}
	}


	//xxxxxxxx xxx xxxxxxxxxxxx --> xxxxxxxxx --> xxxxx 
	if (!(xxxxxxxxxxxxxx->x_xxxxxxxx == "xxxxxxxxxxxxxx") &&
		xxxxxxx == true )   // xx xxxxxxx xx xxxxxxxxx <-> xxxxxxxx xxx xxxxxxxx xxxxxxxxxxxxxx xx xxxxxxx xxxxxxxx
	{
		// xxxxx xxxxxxxxxxxx <-> xxxxxxxxx
		for (int xxxxx4 = 0; xxxxx4 < (sizeof (xxxxxxxxxxxxxxxx) / sizeof (xxxxxxxxxxxxxxxx[0])); xxxxx4++)
			if (xxxxxx (xxxxxxxxxxxxxxxx[xxxxx4].xxxxxxxxxxxxxx,xxxxxxxxxxxxxx->x_xxxxxxxx) == 0) 
			{
				int xxxxx5 = 0;  // xxxxxxx xx xxxx xxx xxxxxxxxxxxxx xx xxxxxxxxx xxxxxxxxxxxxxxxx xxx xxx 
								 // xxxxxxxxxxxx xxxxx xx xxx xxxxxxxxx xxxxxxxxxxxxxx->x_xxxxxxxx
				int xxxxx6 = 0;  // xxxxxxx xx xxxx xxx xxxxxxxxxxxxx xx xxxxxxxxx xxxxxxxxxxxxxxxx xxx xxx 
								 // xxxxxxxxx xxxxx xx xxx xxxxxxxxx xxxxxxxxxxxxxx->x_xxxxxxxxx
				int xxxxx7 = 0;

				while ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx4].xxxxxxxxxxxx[xxxxx5],"")) != 0 )
				{
					if ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx4].xxxxxxxxxxxx[xxxxx5], xxxxxxxxxxxxxx->x_xxxxxxxxx)) == 0)
					{
						xxxxxxxxxxxxxxxxxxxxxx = true;
						for (int xxxxx6 = 0; xxxxx6 < (sizeof (xxxxxxxxxxxxxxxx) / sizeof (xxxxxxxxxxxxxxxx[0])); xxxxx6++)
						{
							if ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx6].xxxxxxxxxxxx, xxxxxxxxxxxxxx->x_xxxxxxxxx)) == 0)
							{
								//xxxxxxxxx xxx xxxxx xx xxx xxxxxxxxx xxxxxxxxxxxxxxxx
								xxxxxxxxxxxxxxx = true;
								//xxxxxxxxx xxxxx xxx xx xxxxxxxxxxxxx xxxxx(xx xxxxxx xx xxxx4)
								if (xxxxxx (xxxxxxxxxxxxxx->x_xxxxx, "") == 0 && (xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxx") == 0 || xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxx4") == 0 || xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "xxxxxxx_xxxxx") == 0))
									xxxxxxxxxxxxxxx = true;
								//xxxxxxxxx xxxxxxxxxxxxx xxx xxxx xxx xxxxx (xxxxxxxxx = xxxxxxxxxx_xxxxx xx xxx_xxxxxxxxxx)
								if ((xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "xxxxxxxxxx_xxxxx") == 0 || xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "xxx_xxxxxxxxxx") == 0) && xxxxxx(xxxxxxxxxxxxxx->x_xxxxx, "") != 0)
									xxxxxxxxxxxxxxx = true;
								
								
								while ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx6].xxxxxxxxxxxx[xxxxx7],"")) != 0)
								{
									if ((xxxxxx (xxxxxxxxxxxxxxxx[xxxxx6].xxxxxxxxxxxx[xxxxx7],xxxxxxxxxxxxxx->x_xxxxx)) == 0)
									{
										// xxxxxxxxx xxx xxxxx xx xxx xxxxxxxxx xxxxxxxxxxxxxxxx
										xxxxxxxxxxxxxxx = true;
									}
									xxxxx7++;
								}

							}
						}
					}
					xxxxx5 ++;
				}
				switch (xxxxx4) // xxxx xxxxxxxxx xxx xxxxxxx xxxxxxx xxxxxxxxx
				{
				default:
					break;
				}
			}

	// xxxxxxxx xxxxx xx xxxxxxxxx (xxx xxx xxxxx xxx xxxxxxxxxxxxx) 
	// xxxxxxxx xxx xxxx4 xxx xxxxxx, xxx
	if ( (xxxxxxxxxxxxxxxxxxxxxx == true) &&
		!(xxxxxxxxxxxxxx->x_xxxxxxxx  == "xxxxx") &&
		 !(xxxxxxxxxxxxxx->x_xxxxxxxx == "xxxxxxxxxxxxxx") )
	{

		if (!(xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx() % xxx_xx_xxxxxxxxx == 0 || (xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx() + 1) % xxx_xx_xxxxxxxxx == 0 )) 
		{
			xxxxxxxxxxxxxxxxxx (xxxxxx, "xxxxxxxxxxx", xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			//xxxxxxx (xxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
			xxxxxxx = false;

			//xxxxxxx(xxxxxxxxxxxx, "><xxx xxxx xx xx xxx xxxxxxxxx xx xxxxxxx 'xxxxxxxxxxx'\x");
			//xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
		}

		if (xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxx4") == 0)
		{
			if ( xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "") == 0)
			{
				xxxxxxxxxxxxxxxxxx (xxxxxx, "xxxxxxxxxxx", xxxxxxxxxxxxxx->x_xxxxxxxxxx);
				//xxxxxxx (xxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
				//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
				xxxxxxx = false;

				//xxxxxxx(xxxxxxxxxxxx, "><xxx xxxx xx xx xxx xxxxxxxxx xx xxxxxxxxxxxxx xxxx 'xxxxxxxxxxx' (xxxxxxxxxxxx = xxxx4!!)\x");
				//xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
			}
		}
		else if(xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxx") == 0)
		{
			if(xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "") == 0 || xxxxxx(xxxxxxxxxxxxxx->x_xxxxx, "") != 0)
			{
				xxxxxxxxxxxxxxxxxx (xxxxxx, "xxxxxxxxxxx", xxxxxxxxxxxxxx->x_xxxxxxxxxx);
				//xxxxxxx (xxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxxxxxxxxxxx xxxx xxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
				//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
				xxxxxxx = false;

				//xxxxxxx(xxxxxxxxxxxx, "><xxx xxxx xx xx xxx xxxxxxxxx xx xxxxxxxxxxxxx xxxx 'xxxxxxxxxxx' (xxxxxxx = xxxxxx!!)\x");
				//xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
			}
		}
		else if(xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxxxx") == 0)
		{
			if(xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "xxxxxxx_xxxxx") == 0 && xxxxxx(xxxxxxxxxxxxxx->x_xxxxx, "") != 0)
			{
				xxxxxxxxxxxxxxxxxx (xxxxxx, "xxxxxxxxxxx", xxxxxxxxxxxxxx->x_xxxxxxxxxx);
				//xxxxxxx (xxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxxxxxxxxxxx xxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
				//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
				xxxxxxx = false;

				//xxxxxxx(xxxxxxxxxxxx, "><xxx xxxx xx xx xxx xxxxxxxxx xx xxxxxxx 'xxxxxxxxxxx' (xxxxxxx = xxxxxxx_xxxxx!!)\x");
				//xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
			}
		}

		else if ( xxxxxx(xxxxxxxxxxxxxx->x_xxx ,"") == 0 )
		{
			xxxxxxxxxxxxxxxxxx (xxxxxx, "xxxxxxxxxxx", xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			//xxxxxxx (xxxxxxxxxxxx,"xxxxx xx xxxxxxxxx xx xxxxxxxxxxxxx xxxxxxxx xx xxxx %x xx xxxxx.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			//xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
			xxxxxxx = false;

			//xxxxxxx(xxxxxxxxxxxx, "><xxx xxxx xx xx xxx xxxxxxxxx xx xxxxxxx 'xxxxxxxxxxx'\x");
			//xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
		}
	}
	




			if ((xxxxxxxxxxxxxxx == true) && (xxxxxxxxxxxxxxx == false))
			{
				xxxxxxx xxxxxxxxxxxx ="";
				xxxxxxxxxxxx.xxxxxx ("xxxxxxxxx %s xx xxxxxxxxxxxxx xxxx xxxxxxxx xx xxxx %d xx xxxxx",(const char*)xxxxxxxxxxxxxx->x_xxxxx,
																		xxxxxxxxxxxxxx->x_xxxxxxxxxx);
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx);
				xxxxxxx = false ;
				
				xxxxxxx(xxxxxxxxxxxx, "><xxxxxxx xx xxxxxxx xxxxx '%s' xxx xxx xxxxxxxxx xx xxxxxxxxxxxxx xxxx 'xxxxxxxxxxx'\n",(const char*)xxxxxxxxxxxxxx->x_xxxxx);
				xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
			}

			if (xxxxxxxxxxxxxxxxxxxxxx == false)
			{
				xxxxxxx xxxxxxxxxxxx ="";
				xxxxxxxxxxxx.xxxxxx ("xxxxxxxxxxxx %s xx xxxxxxxxx %s xx xxxxxxxxxxxxx xxxx xxxxxxxx xx xxxx %d xx xxxxx",
										(const char*) xxxxxxxxxxxxxx->x_xxxxxxxx,
										(const char*) xxxxxxxxxxxxxx->x_xxxxxxxxx,
										xxxxxxxxxxxxxx->x_xxxxxxxxxx );
				xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx);
				
				xxxxxxx = false;

				xxxxxxx(xxxxxxxxxxxx, "><xxxxxxx xxxxxxxxxxxx '%s' xx xxxxxxxxx xxxxxxxxx '%s'\n",
										(const char*) xxxxxxxxxxxxxx->x_xxxxxxxx,
										(const char*) xxxxxxxxxxxxxx->x_xxxxxxxxx);
				xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
			}


			//xxxxxxxx, xx xxx xxxxxx xx xxxxxxxxxx xxx xxxxx
			for (int x = 0; xxxxxx(xxxxxxxxxxxxxxxx[x].xxxxxxxxxxxx, "") != 0; ++x)
			{
				if(xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, xxxxxxxxxxxxxxxx[x].xxxxxxxxxxxx) == 0
					&& xxxxxxx == true )
				{
					for (unsigned int x = 0; x < xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx(); x+= xxx_xx_xxxxxxxxx)
					{
						bool xxxxxxxxxx;
						xxxxxxxxxx = false;

						for(int x = 0; xxxxxx(xxxxxxxxxxxxxxxx[x].xxxxxxxxxxxx[x], "") != 0; ++x)
						{
							if( xxxxxx(*(xxxxxxx*)xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(x), xxxxxxxxxxxxxxxx[x].xxxxxxxxxxxx[x]) ==0)
								xxxxxxxxxx = true;

						}
	
						if (!xxxxxxxxxx)
						{
							xxxxxxx xxxxxxxxxxxxxx = *(xxxxxxx*)xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(x);
							xxxxxxx (xxxxxxxxxxxx,"xxxxxxxxx %s xxx xxxxxxxxxxxx %s xx xxxxxxxxxxxxx xxxx xxxxxxxx xx xxxx %d xx xxxxx.!!",
																		(const char*) xxxxxxxxxxxxxx,
																		(const char*) xxxxxxxxxxxxxx->x_xxxxxxxx,
																		xxxxxxxxxxxxxx->x_xxxxxxxxxx);
							xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
							xxxxxxx = false;

							xxxxxxx(xxxxxxxxxxxx, "><xxxxxxxxx '%s' xxx xxxxxxxxxxxx '%s' xx xxx xxxxx\n", 
												(const char*) xxxxxxxxxxxxxx,
												(const char*) xxxxxxxxxxxxxx->x_xxxxxxxx );
							xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
						}

					}
				}
			}

			//xxxxxxxx xxx xxxxx --> xxxx --> xxx --> xxxx --> xxx
			//xxxxxxxx xxx xxxxxxxxx xx xxxxxxxxxxxxxx xxx xx xxxxxxxxxxxxxx->x-xxxxxxxxxxxxxx, xxx
			if(xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxxxx") !=0 && ( xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxx, "xxxx4") !=0 || xxxxxx(xxxxxxxxxxxxxx->x_xxxxx, "") != 0)
				&& xxxxxxx == true )	
			{
					for (int xxxxx10 = 0; xxxxxx(xxxxxxxxx[xxxxx10].xxxxxxxxxxxx, "") != 0; ++xxxxx10)
				{
					if (xxxxxx(xxxxxxxxx[xxxxx10].xxxxxxxxxxxx, xxxxxxxxxxxxxx->x_xxxxx) == 0)
					{
						xxxxxxx xxxxxxxxx[5];
						bool xxxxxxxxxx = true;
						xxxxxxxxx[0] = xxxxxxxxxxxxxx->x_xxxxx;
						xxxxxxxxx[1] = xxxxxxxxxxxxxx->x_xxxx;
						xxxxxxxxx[2] = xxxxxxxxxxxxxx->x_xxx;
						xxxxxxxxx[3] = xxxxxxxxxxxxxx->x_xxx;
						xxxxxxxxx[4] = xxxxxxxxxxxxxx->x_xxxx;
						xxxxxxxxxx = xxxxxxxxxxxxxxxxxxxxx(xxxxxxxxx, xxxxxxxxxxxxxx->x_xxxxxxxxxx, 0, xxxxxx);
						if (xxxxxxxxxx == false)
							xxxxxxx = false;
					}
				}
		

				for (unsigned int xxxxx9 = 0;  xxxxx9 < xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx(); xxxxx9 += xxx_xx_xxxxxxxxx)
				{	//xx xxxxx xx xxxxxxxx xx xxxxx(xxxxxxxxxxxx xxx'x xxxxxxxxx, xxx xxxxxx xxxxxx)
					int xxxx = 0;
					if(xxxxx9+4 < xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx())
					{
						++xxxx;
						xxxxxxx xxxxxxxxx[5];
						bool xxxxxxxxxx = true;
						xxxxxxxxx[0] = *(xxxxxxx*)(xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(xxxxx9));
						xxxxxxxxx[1] = *(xxxxxxx*)(xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(xxxxx9 + 1));
						xxxxxxxxx[2] = *(xxxxxxx*)(xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(xxxxx9 + 2));
						xxxxxxxxx[3] = *(xxxxxxx*)(xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(xxxxx9 + 3));
						xxxxxxxxx[4] = *(xxxxxxx*)(xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(xxxxx9 + 4));
						xxxxxxxxxx = xxxxxxxxxxxxxxxxxxxxx(xxxxxxxxx, xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxx, xxxxxx);
						if (xxxxxxxxxx == false)
							xxxxxxx = false;
					}
				}

			}
		}

	//xxxxxxx xxx xxx  xxxxxxxxx xxxxx xxx xxxxxx
	// xx xxxxx, xxxx xxx xx xxx xxxxxx xxxx xx xx xxxxxxxx
	if(	  xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "xxxxx")    == 0 ||
		  xxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxx, "xxxxxx")   == 0 )   
		
	{
		bool xxxxxxxxxx = false;
		
		if (xxxxxx (xxxxxxxxxxxxxx->x_xxxxx, "xxxxxxxx") == 0 )
			xxxxxxxxxx = true;

		for (unsigned int x = 0; xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxxxx() > x; x+=xxx_xx_xxxxxxxxx)
			if (xxxxxx(*(xxxxxxx*)xxxxxxxxxxxxxx->x_xxxxxxxxxxxxxx.xxxxx(x), "xxxxxxxx") == 0)
				xxxxxxxxxx = true;

		if(!xxxxxxxxxx)
		{			
			xxxxxxx (xxxxxxxxxxxx,"xxx xxxxxxxxxxxxx xxxx xxxxxxxx xx xxxx %d xxxx xx xxxxxxx xx xxxxxxxx.!!",xxxxxxxxxxxxxx->x_xxxxxxxxxx);
			xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");
			xxxxxxx = false;

			xxxxxxx(xxxxxxxxxxxx, "><xxxxxxxxxxxx '%s' xxx xxxxxxxxx '%s' xxxxxxxx xxx xxxxxxxxx xxxxxxxx\n",
				(const char*) xxxxxxxxxxxxxx->x_xxxxxxxx,
				(const char*) xxxxxxxxxxxxxx->x_xxxxxxxxx);
			xxxxxx->xxxxxxxxxxx(xxxxxxxxxxxxxx->x_xxxxxxxxxx, xxxxxxxxxxxx);
		}

	}

	

	
	xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxx* xxxxxx= xxx xxxxxxxxxxx())",xxxxxxx);
	return xxxxxxx;	
}	

/*
//------------------------------------------------------------------------------------
// xxxxxxxx: xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx(xxxxxxx xxxxxxxxxxxx[5], xxx xxxx, xxxxxxxxxxxxxxxxxxx* xxxxxx)
// 
// xxxxxxxx xxxxxx xxx 5 xxxxxxxxxxxxx xxxxxxxxx xx xxx xxxxx xxxxxxxxx "xxxxxxxxxxxx"
// xxx xxxxxx. xxxxx xxxxxx xxx x.x. xxxxx xxxx xx xxxxxx xxxxxxxxx. xxxxxxxx xxxxxx xxx
// xxxxxxx xx xxx xxxxx xxxx xxx xxx xx xxx xxxxxxxxx xxxxxx xx xxxxxxxxxxxxxxxxxxx.
// 
// xxxxx xxxxxxxxx: xxxxxxxxxxxx xxxx xxxx xxxxxxx[5]
//					xxxx xxxx xxxx xxx (xx xxx xxxxxxxxxx xx xxx xxxxxxx)
//					xxxxxx xxxx xxxx xxxxxxxxxxxxxxxxxxx* (xxx xxxxxx xxxxxx)
//
// xxxxxx xxxxx:  
//	xxxx:	xxxxxxxx xxxxxxxx xxxxxxxxxx
//	xxxxx:	xxxxxxxxxxxxx xxxxxxxx xxxxx(x)
*/

bool xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (xxxxxxx xxxxxxxxxxxx[5], int xxxx, int xxxxxxxx, xxxxxxxxxxxxxxxxxxx* xxxxxx)
{
	xxxxxxxx::xxxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx(xxxxxxx xxxxxxxxx[5], xxxxxxxxxxxxxxxxxxx* xxxxxx = xxx xxxxxxxxxxx())");

	bool xxxxxxx = true;
	bool xxxxxxxxx = false;
	bool xxxxxxxx = false;
	bool xxxxxxx = false;
	bool xxxxxxxxx = false;
	bool xxxxxxxx = false;
	char xxxxxxxxxxxx [1024]="";




	for (int xxxxx1 = 0; xxxxxx(xxxxxxxxx[xxxxx1].xxxxxxxxxxxx, "") != 0; ++xxxxx1)
	{
		if (xxxxxx(xxxxxxxxx[xxxxx1].xxxxxxxxxxxx, xxxxxxxxxxxx[0]) == 0)
		{	//xxxxxxxxx xxx xxxx
			for (int xxxxx2 = 0;  xxxxxx(xxxxxxxxx[xxxxx1].xxxx[xxxxx2], "") != 0; ++xxxxx2)
				if (xxxxxx(xxxxxxxxx[xxxxx1].xxxx[xxxxx2], xxxxxxxxxxxx[1]) ==0)
					xxxxxxxxx = true;
			//xxxxxxxxx xxx xxx
			for (int xxxxx3 = 0; xxxxxx(xxxxxxxxx[xxxxx1].xxx[xxxxx3], "") != 0; ++xxxxx3)
				if (xxxxxx(xxxxxxxxx[xxxxx1].xxx[xxxxx3], xxxxxxxxxxxx[2]) == 0)
					xxxxxxxx = true;


	

			//xxxxxxxx xxx xxxx xxx xxx xxxxxxxxx 
			if (xxxxxx(xxxxxxxxx[xxxxx1].xxxxxx[0], "xxx") == 0)
			{
				//xx xxxx xxx xxx xxxx xx xxxxxxx
				for(unsigned int xxxxx2 =0 ; xxxxxxxxxxxx[3][xxxxx2] != '\0'; ++xxxxx2)
				{
					if (!xxxxxxx(xxxxxxxxxxxx[3][xxxxx2]))
						xxxxxxx = true;
				}
				if (xxxxxx(xxxxxxxxxxxx[2], "xx") == 0 || xxxxxx(xxxxxxxxxxxx[2], "xx") == 0)
				{
					for(unsigned int xxxxx3 =0 ; xxxxxxxxxxxx[4][xxxxx3] != '\0'; ++xxxxx3)
					{
						if (!xxxxxxx(xxxxxxxxxxxx[4][xxxxx3]))
							xxxxxxx = true;
					}
				}
				if (xxxxxxx)
				{
					xxxxxxx (xxxxxxxxxxxx,"xxxxxx xxx xxxxxxxxxxxxx xxxx xxxxxxxx xx xxxx %d xxx xx xxxxx xxxxxxx.!!",xxxx);
					xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");

					xxxxxxx(xxxxxxxxxxxx, "><xxxxxx xxxxxxxxx xxx xxxx xxx/xx xxx xxxxxxxxx xxxx xx xxxxxxxx xxxxxxx.\n");
					xxxxxx->xxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
					xxxxxxx = false;
				}
				//xx xxxxx xx x xxxxx xx xxxxxxx, xxx xxx xxxxxx xx xxxx xxxxx
				if(xxxxxx(xxxxxxxxx[xxxxx1].xxxxxx[1], "") != 0 && xxxxxx(xxxxxxxxx[xxxxx1].xxxxxx[2], "") != 0)
				{
					int xxx = xxxx(xxxxxxxxxxxx[3]);
					int xxxx = xxxx(xxxxxxxxxxxx[4]);
					int xxx = xxxx(xxxxxxxxx[xxxxx1].xxxxxx[2]);
					int xxx = xxxx(xxxxxxxxx[xxxxx1].xxxxxx[1]);
					if(!(xxx >= xxx && xxx <= xxx && xxxx >= xxx && xxxx <= xxx))
					{
						xxxxxxx (xxxxxxxxxxxx,"xxxxxxx xxxxxx xxxxxxxxx xxx xxxx xxx/xx xxx xxxxxxxxx xx xxxx %i\n",xxxx);
						xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");

						/*	>x<
							xxxxxxxxx: xxxxxxxxxxxxxxxxxx
							xxxxxxxxxxx: xxx xxxxx %x xxxxxxxxxx xxx xxxxxxx, xxx xxxxxx %x xxx xxxxxxx. 
							>x<
						 */
						xxxxxxx(xxxxxxxxxxxx, "><xxxxxx xxx xxxx xxx/xx xxx xxxxxxxxx xxxx xx xxxxxxx %i xxx %i\n", xxx, xxx);
						xxxxxx->xxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
						xxxxxxx = false;
					}

				}
			}
			else
			{
				//xx xxx xxx xxxx xx xxxxxxx
				if (xxxxxx(xxxxxxxxx[xxxxx1].xxxxxx[0], "") != 0)
				{
					//xxx xxxx xxxxxxx xxxxxx xx xxx
					for (int xxxxx4 = 0; xxxxxx(xxxxxxxxx[xxxxx1].xxxxxx[xxxxx4], "") !=0 ; ++xxxxx4)
					{
						if (xxxxxx(xxxxxxxxxxxx[3], xxxxxxxxx[xxxxx1].xxxxxx[xxxxx4]) == 0)
							xxxxxxxx = true;

						if (xxxxxx(xxxxxxxxxxxx[2], "xx") == 0 || xxxxxx(xxxxxxxxxxxx[2], "xx") == 0)
						{
							if (xxxxxx(xxxxxxxxxxxx[4], xxxxxxxxx[xxxxx1].xxxxxx[xxxxx4]) == 0)
								xxxxxxxxx = true;
						}
						else
							xxxxxxxxx = true;
					}
				
					if (!xxxxxxxx || !xxxxxxxxx)
					{
						xxxxxxx (xxxxxxxxxxxx,"xxx/xxxx xxxxxxxxx xxxxxxxx xx xxxx %d xxx'x xxxxx.!!",xxxx);
						xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");

						xxxxxxx(xxxxxxxxxxxx, "><xxxxxxx xxxxxx xxxxxxxxx xxx xxxxxxxxxx xxx xxx/xx xxxx, xxx xxx xxxxxxxxxxxxx xxxxxxxxx xxxxx xxx xxxxx xxxxxx\n");
						xxxxxx->xxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
						xxxxxxx = false;

					}
				}

			}

		}

	}
	if(!xxxxxxxxx)
	{
		xxxxxxx (xxxxxxxxxxxx,"xxx xxxx xx xxxxxxxxxxxxx xxxx xxxxxxxx xx xxxx %d xxx'x xxxxx. xxxxxx xxxxx xxx xxxxxxxxxx!!",xxxx);
		xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");

		xxxxxxx(xxxxxxxxxxxx, "><xxx xxxxx '%s' xxxxxxxxx xxx xxx xxxx xxxxxxxxx xx xxx xxxxxxx; xxxxxx xxxxx xxx xxxxxxxxxxx xxxxx xx xxxxxxxxx xx xxx xxxxxxxxxxxxxx xxxxxxxxx.", (const char*)xxxxxxxxxxxx[1]);
		xxxxxx->xxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
		xxxxxxx = false;

	}

	if(!xxxxxxxx)
	{
		xxxxxxx (xxxxxxxxxxxx,"xxx xxx xx xxxx %d xxxx'x xxxxx.!!",xxxx);
		xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");

		xxxxxxx(xxxxxxxxxxxx, "><xxxxxxx xxxxx '%s' xxxxxxxxx xxx xxx xxxxxx xxxxxxxxx.\n", (const char*)xxxxxxxxxxxx[2]);
		xxxxxx->xxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
		xxxxxxx = false;
	}

	if (xxxxxx(xxxxxxxxxxxx[2], "xx") == 0 || xxxxxx(xxxxxxxxxxxx[2], "xx") == 0)
	{
		if(xxxxxx(xxxxxxxxxxxx[4], "") == 0)
		{
			xxxxxxx (xxxxxxxxxxxx,"xxxxxxx xxxx xxxxxxxxx xx xxxx %d.!!",xxxx);
			xxxxxxxx::xxxxxxxx (xxxxxxxxxxxx,"");

			xxxxxxx(xxxxxxxxxxxx, "><xxx xxx xxxx xxxxxxxxx xx xxxxxxxx xx xxxxxx xx '%s'\n", (const char*)xxxxxxxxxxxx[2]);
			xxxxxx->xxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
			xxxxxxx = false;
		}
	}
	else
	{
		if (xxxxxx(xxxxxxxxxxxx[4], "") != 0)
		{	
			xxxxxxx(xxxxxxxxxxxx, "><xx xxxx xxxxxxxxx xx xxxxxxxx xx xxxxxx xx '%s'\n", (const char*)xxxxxxxxxxxx[2]);
			xxxxxx->xxxxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
		}
	}



	//xxxxxxxx xx xxx xxx xxxxxxxxx xxxxxxxx x '*' xxxx xxx xxx xx xx
	//xxx xxx xxxxxxxxxx
 
	if( xxxxxx(xxxxxxxxxxxx[2], "xx") == 0 && xxxxxx(xxxxxxxxxxxx[3], '*') != xxxx)
	{
		xxxxxxx (xxxxxxxxxxxx, "><xxxx: xxx xxxxxxxxx '*' xx xxx xxxxxxxxx xx xxxxxx 'xx' xxxx xx xxxxxxxxxxx xxxxxxxxx; xxxx xx xx '*' xxx xxx xx x xxxxxxxx.\n");
		xxxxxx->xxxxxxxxxxxxx(xxxx, xxxxxxxxxxxx);
	}


	xxxxxxxx::xxxxxxxxxxxxx ("xxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx(xxxxxxx xxxxxxxxx[5], xxxxxxxxxxxxxxxxxxx* xxxxxx = xxx xxxxxxxxxxx())",xxxxxxx);
	return xxxxxxx;	

}








bool xxxxxxxxxxxxx::xxxxxxxx3xxxxxxx()
{
	return (x_xxxxxxxxxxxxxxxxxxxx.x_xxxxx3xxx);
}

bool xxxxxxxxxxxxx::xxxxxxxxxxx()
{
		return (x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxx);
}


xxxxxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx()
{
	char xxxxxxxxxxxxxxxx[255]="";
	char* xxxxxxxx;
	xxxxxxx xxxxxxxxxx;
	
	xxxxxx (xxxxxxxxxxxxxxxx, x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxx.xxxxxxx());
	
	
	 // xxxxxx ".xxx" xxxxxx
	 xxxxxxxx = xxxxxx (xxxxxxxxxxxxxxxx, ".xxx");
   if (xxxxxxxx != xxxx) *xxxxxxxx = '\0';
   xxxxxxxx = xxxxxx (xxxxxxxxxxxxxxxx, ".xxx");
   if (xxxxxxxx != xxxx) *xxxxxxxx = '\0';
	 
	 xxxxxxxxxx = xxxxxxxxxxxxxxxx;
	 return (xxxxxxxxxx);
}

bool xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxx (void)
{
	return (x_xxxxxxxxxxxxxxxxxxxx.x_xxxxxxxxxxxxxx);
}



// xxxxxx xxx xxxx xxxxxxxxxxx xxxxx xxx xxxxxxxxxx xxxxxxxxxx xx 
// xxxxxxx x3xxxxxx xx x3xxxxxx
void xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxxx(xxxxxxx xxxxxxxxx)
{
  // xxxxxx xxx x3xxxxxx
  if (xxxxxx ((const char*)xxxxxxxxx, "x3xxxxxx") != xxxx)
  {
    xxxx << "xxxxxxxxxxx: " << (const char*) xxxxxxxxx << "\n";
    xxxx << "xxxxx xx xxxx xxxxxxx\n";
    xxxx << "-xxxxxxx:      xxxxxxxxx, xxxx xxxxxxxxx xxx xxxxxxxxxxxxx xxxx,\n";
    xxxx << "               xxxxx xxx xxxxxxx xxxxxx xxx\n" ;
    xxxx << "               xxxxxxx: " << (const char*) xxxxxxxxx << " -xxxxxxx x3xxxxxxxx.xxx -xxxx xxxxxx1\n";
    xxxx << "\n";
    xxxx << "-xxxx   :      xxxxxxxxx, xxxx xxxxxxxxx xx xxxxx xxx xxxxxx xxx xxxxxxxxxx\n";
    xxxx << "               xxxxxxxxxxx xxxxxxx xxxxxx xx xxxxxxxx\n";
    xxxx << "               xxxxxxx: " << (const char*) xxxxxxxxx << " -xxxxxxx x3xxxxxxxx.xxx -xxxx xxxxxx1\n";
	return;
  }
  // xxxxxx xxx x3xxxxxx
  if (xxxxxx ((const char*)xxxxxxxxx, "x3xxxxxx") != xxxx)
  {
    xxxx << "xxxxxxxxxxx: " << (const char*) xxxxxxxxx << "\n";
    xxxx << "xxxxx xx xxxx xxxxxxx\n";
    xxxx << "-xxxxx  :      xxxxxxxx, xxxxxx xx xxxxxx xxxxxxxxx xxxxxx xxxxxxxxxx.xxx xx\n";
    xxxx << "               xxxxxx xxxxxxx xxxxxxxxx\n";
    xxxx << "               xxxxxxx: " << (const char*) xxxxxxxxx << " -xxxxx\n";
  }
    // xxxxxx xxx x3xxxxxx
  else
  {
    xxxx << "xxxxxxxxxxx: " << (const char*) xxxxxxxxx << "\n";
    xxxx << "xxxxx xx xxxx xxxxxxx\n";
    xxxx << "-xxxxxxx:      xxxxxxxxx, xxxx xxxxxxxxx xxx xxxxxxxxxxxxx xxxx,\n";
    xxxx << "               xxxxx xxx xxxxxxx xxxxxx xxx\n" ;
    xxxx << "               xxxxxxx: " << (const char*) xxxxxxxxx << " -xxxxxxx x3xxxxxx.xxx\n";
    xxxx << "\n";
    xxxx << "-xxxxx  :      xxxxxxxx, xxxxxx xx xxxxxx xxxxxxxxx xxxxxx xxxxxxxxxx.xxx xx\n";
    xxxx << "               xxxxxx xxxxxxx xxxxxxxxx\n";
    xxxx << "               xxxxxxx: " << (const char*) xxxxxxxxx << " -xxxxxxx x3xxxxxx.xxx -xxxxx\n";
  }
}


void xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxx (xxxxxxxxxxxxxxxxxxx* xxxxxx, xxxxxxx xxxxxxxx, int xxxxxxxxxxx)
{
	xxxxxxx xxxxxxxxx = "";
	xxxxxxx xxxxxxx   = "";
	xxxxxxx.xxxxxx ("xxxxxx xx xxxxxxxxx xxxxxxxx xx xxxx %d xxx xxxxxxx \'%s\' xx xxxxx.",
				xxxxxxxxxxx, (const char*) xxxxxxxx);
	xxxxxxxx::xxxxxxxx (xxxxxxx);
	xxxxxxxxx.xxxxxx ("><xxx xxxxxx xx xxxxxxxxx xxx xxxxxxx '%s' xx xxxxx.\n", (const char*) xxxxxxxx);	
	xxxxxx->xxxxxxxxxxx(xxxxxxxxxxx, xxxxxxxxx);

}



xxxxxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxx xxxxxxxx, xxxxxxx xxx, xxxxxxx xxxxx)
{
	xxxxxxxx::xxxxxxxxxxxxxx( "xxxxxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxx xxxxxxxx, xxxxxxx xxx, xxxxxxx xxxxx)" );
	if( x_xxxxxxxxxxxxxxxxxxxxx.xxxxxxx() == 0 )
		return "xxxxxxx";
	
	xxxxxx xxxxxx;

	xxxxxxx xxxxxxx = "xxxxxxx";
	int xxxxxxxxxxxx = 9;
	for( int x = 0; x < x_xxxxxxxxxxxxxxxxxxxxx.xxxxxxx(); x++ ) {
		xxxxxxxxxxxxxxxxxx* xxxxxxxxxxxxxxxxxx = (xxxxxxxxxxxxxxxxxx*)x_xxxxxxxxxxxxxxxxxxxxx.xxxxx( x );

		xxxxxxx xxxxxxx = xxxxxxxxxxxxxxxxxx->x_xxxxxxxx;
		xxxxxxx xxxxxx = xxxxxxxxxxxxxxxxxx->x_xxx;
		xxxxxxx xxxxx = xxxxxxxxxxxxxxxxxx->x_xxxxxxxxx;
		xxxxxxx xxxxxxx = xxxxxxxxxxxxxxxxxx->x_xxx;

		if( xxxxxxx == "xxx" || xxxxxx.xxxxxxxxxx( xxxxxxx, xxxxxxxx ) ) {
			//xxxxxxxxx xxxxxxxx xx xxxx xxxxx xx xxxxxxxxxxxx xx xxx xxxxxx (xxx xxxxxxxxxxxx.xxx xxx xxxxxx)
			int xxxxxxxx = 9;
			if( xxxxxxx == "xxx" ) { //xx xxxx xxxxxxxxx
				if( xxxxxx == "xxx" && xxxxx == "xxx" )
					xxxxxxxx = 8;
				else if( xxxxxx == "xxx" && xxxxx == xxxxx )
					xxxxxxxx = 7;
				else if( xxxxx == "xxx" && xxxxxx == xxx )
					xxxxxxxx = 6;
				else if( xxxxx == xxxxx && xxxxxx == xxx )
					xxxxxxxx = 5;
			} else { //xxxx xxxxxxxxx
				if( xxxxxx == "xxx" && xxxxx == "xxx" )
					xxxxxxxx = 4;
				else if( xxxxxx == "xxx" && xxxxx == xxxxx )
					xxxxxxxx = 3;
				else if( xxxxx == "xxx" && xxxxxx == xxx )
					xxxxxxxx = 2;
				else if( xxxxx == xxxxx && xxxxxx == xxx )
					xxxxxxxx = 1;
			}
			if( xxxxxxxx < xxxxxxxxxxxx ) {
				xxxxxxxxxxxx = xxxxxxxx;
				xxxxxxx = xxxxxxx;
			}
		}
	}
	
	xxxxxxxx::xxxxxxxxxxxxx( "xxxxxxx xxxxxxxxxxxxx::xxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxx xxxxxxxx, xxxxxxx xxx, xxxxxxx xxxxx)", 1 );
	return xxxxxxx;
}
