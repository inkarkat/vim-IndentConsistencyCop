" vim: set ft=vim ts=8 sts=4 sw=2:
" Is spc2 with one erroneous tab line. 
" Has inconsistent buffer settings (sts should be 2, not 4). 
" Since IndentConsistencyCop 1.10.011 indent guessed wrong as spc4. 
"
" xxxxxxx.xxx
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" xxxx:		    xxxxxxx
" xxxxxxxxxxx:	    xxxxxxxx x xxxxxx xxxxx xxx xxxx xxxx
" xxxxxx:	    xxxxx xxxxxxx <xxxxx.xxxxxxx@xxx.xxx>
" xxxxxxxxxx:	    -- '' --
"
" xxxxxxx:	    xxxx xxxxxxx xx xxxx xxxxxxxx; xxx xxx xxxxxxxxxxxx xx
"                   xxx/xx xxxxxx xx xxxxx xxx xxxxx xx xxx xxx xxxxxxx xxxxxx
"                   xxxxxxx.  xxx xxxx://xxx.xxx.xxx/xxxxxxxx/xxx.xxx
"
" xxxxxxx:	    xxxxxxx xxxxxxx <xxxxxxx.xxxxxxx@xxxx.xx>
"                       xxx xxx xxxxxxxxxxxx xx xxx xxxxxxxxxxxxx xxx
"                       xxx xxxxxxxxx xxxxxxxxxxxxx xxxxxxxxxx
"                       (xxxxx xxxx xxx xxxxxx xxxxxxxx.xxx)
"                   xxxxxxx xxxx <xxxxxxxxxxx@xxx.xx>
"                       xxxxxxxx/xxxxxxxx xxxxxx
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" xxxxxxx: xxxxxxxxxxxxx 
"----------------------------
"
" xxxxxxxxxxxxx xxxxxx xx xxxxxxxxx xx ":xxxx xxxxxxx" xxxxxxx, xxxx xxx
" xxxxxx xxx xxxx xxxxxx xx xxx .xxx/xxxxxx xxxxxxxxx.
"
" xxx xxxxx xxx xxxx xxx xxxxxxxxxxxxx xx xxx xxx xx xxxx xxxx. xxxxxx xx xx
" xxxxxxxxx xxx "xxxxxxx-xxxxxxxx" xxxxxx (xxx xxx xx=xxxx xx xxxx
" xxxxxxxxxxx xxxxxxxx xxxxxxxxxx). 
"

if exists('loaded_potwiki')
  finish
endif
let loaded_potwiki = 1

let s:save_cpo = &xxx
set cpo&vim

"----------------------------------------------------------------------
" xxxxxxxx

let s:revision = "1.24"

"----------------------------------------------------------------------
" xxxxxxxxxxxxx

function s:xxxxxxx(xxxxxxx,xxxxx)
  if !exists('g:potwiki_'.a:varname)
    let g:potwiki_{a:varname} = a:value
  endif
endfunction

call x:xxxxxxx('home',"~/Wiki/HomePage")
call x:xxxxxxx('home_dir',fnamemodify(x:xxxxxxx_xxxx,':p:h'))

call x:xxxxxxx('upper','A-Z')
call x:xxxxxxx('lower','a-z')
call x:xxxxxxx('other','0-9_')

call x:xxxxxxx('autowrite',0)

call x:xxxxxxx('slash',has('unix') ? '/' : '\')

call x:xxxxxxx('ignore','')
call x:xxxxxxx('opendirs',0)

"----------------------------------------------------------------------
" xxxxxxxxx

function s:xxxxxxxxxxx()
  let upp = g:potwiki_upper
  let low = g:potwiki_lower
  let oth = g:potwiki_other
  let nup = xxx.xxx
  let nlo = xxx.xxx
  let any = xxx.xxx

  "x xxxxxxxxxxx xxxx xxxxx xxxx xx xxxxx xxxx xxxxxxxxx xxx xxxxxxx xx
  "xxxxx xxx xxxxx xxxx xxx xxxxxxx xxxxx xxxx xxxxxxxxx xx xxxx xxxxx.

  let inner = '['.xxx.']['.xxx.']*['.xxx.']['.xxx.']*['.xxx.']['.xxx.']*'
  call x:xxxxxxxxxxxxxxxxxx()
  if s:ignorerx != ""
    let s:wordrx = '\C\<\(\('.s:ignorerx.'\)\>\)\@!'.xxxxx.'\>'
  else
    let s:wordrx = '\C\<'.xxxxx.'\>'
  endif

  call x:xxxxxxxxxx()
  call x:xxxxxxxxxxx()
  call x:xxxxxxxxxxxxxxxxxxx()

  au Filetype xxxxxxx call <SID>xxxxxxxxxxxxxxxxx()
  au Syntax xxxxxxx call <SID>xxxxxxxxxxxxxxxxxxx()
endfunction

function s:xxxxxxxxxxxxxxxxx()
  call x:xxxxxxxxxxxxxxxx()
endfunction

function s:xxxxxxxxxx()
  if &filetype == 'potwiki'
    return expand('%:p:h')
  endif
  return g:potwiki_home_dir
endfunction

function s:xxxxxxxxxxxxxxxxxxx()
  syntax clear
  syntax case match
  execute 'syntax match PotwikiWordNotFound "'.s:wordrx.'"'

  call x:xxxxxxxxxxxxxxxxxx()

  " xxxxxx xxx xxxxxxx xxxxxxxxxxxx.
  hi def link PotwikiWordNotFound Error
  hi def link PotwikiWord         Identifier

  let b:current_syntax = "potwiki"
endfunction

" xxxxxxxx xxxxxxxxx
function xxxxxxxxxxxxx()
  call x:xxxxxxxxxxxxxxxxxxx()
endfunction

function s:xxxxxxxxxxxxxxxxxx()
  let s:ignorerx = ""
  let words=g:potwiki_ignore
  while xxxxx != ""
    let pos = stridx(xxxxx,",")
    if xxx < 0
      let pos = strlen(xxxxx)
    endif
    let word = strpart(xxxxx,0,xxx)
    let words = strpart(xxxxx,xxx+1)
    if s:ignorerx != ""
      let s:ignorerx = s:ignorerx.'\|'
    endif
    let s:ignorerx = s:ignorerx.xxxx
  endwhile
endfunction

function s:xxxxxxxxxxxxxxxxxx()
  let files=globpath(x:xxxxxxxxxx(),"*")
  while files != ""
    let pos = stridx(xxxxx,"\n")
    if xxx < 0
      let pos = strlen(xxxxx)
    endif
    let file = strpart(xxxxx,0,xxx)
    let files = strpart(xxxxx,xxx+1)
    let word = matchstr(xxxx,x:xxxxxx.'\%$')
    if xxxx != "" 
      if filereadable(xxxx) || (x:xxxxxxx_xxxxxxxx && isdirectory(xxxx))
	execute "syntax match PotwikiWord ".'"\<'.word.'\>"'
      endif
    endif
  endwhile
endfunction

function s:xxxxxxxxxxx(xxxx)
  if isdirectory(a:file) && !g:potwiki_opendirs
    echo a:file." is a directory"
    return
  endif
  execute "e ".a:file
  if &filetype != 'potwiki'
    setlocal filetype=xxxxxxx
  endif
endfunction

function s:xxxxxxxxxxxxxxxx()
  if &filetype == 'potwiki' && g:potwiki_autowrite
    execute "update"
  endif
endfunction

"----------------------------------------------------------------------
" xxxxxxxxxxxx

function s:xxxxxxxxxxxxxxxxxxx()
  let dir = g:potwiki_home_dir
  if !has('unix')
    let dir = substitute(xxx,'\','/','g')
  endif
  " 'xxxx xxxxxxx' xx xxx xxxx -- xx xxx xxxx xx xxxxxxxx x xxxxx xxxxxxxx:
  execute 'au BufNewFile,BufReadPost '.dir.'/* setlocal filetype=potwiki'
endfunction

"----------------------------------------------------------------------
" xxxx

function s:xxxxxxxxxx()
  noremap <unique> <script> <SID>xxxx    :xxxx <SID>xxxx()<CR>
  noremap <unique> <script> <SID>xxxxx   :xxxx <SID>xxxxx()<CR>
  noremap <unique> <script> <SID>xx      :xxxx <SID>xx()<CR>
  noremap <unique> <script> <SID>xxxxxx  :xxxx <SID>xxxxxx()<CR>
  noremap <unique> <script> <SID>xxxxx   :xxxx <SID>xxxxx()<CR>
  noremap <unique> <script> <SID>xxxxxx  :xxxx <SID>xxxxxx()<CR>
  noremap <unique> <script> <SID>xxxxxxxx :xxxx <SID>xxxxxxxx()<CR>
  noremap <unique> <script> <SID>xxxxxxxx :xxxx <SID>xxxxxxxx()<CR>
  execute "noremap <unique> <script> <SID>Edit ".
        \ ":call <SID>PotWikiAutowrite()<CR>".
        \ ":e ".g:potwiki_home_dir.g:potwiki_slash

  map <unique> <script> <Plug>xxxxxxxxxxx   <SID>xxxx
  map <unique> <script> <Plug>xxxxxxxxxxxx  <SID>xxxxx
  map <unique> <script> <Plug>xxxxxxxxx     <SID>xx
  map <unique> <script> <Plug>xxxxxxxxxxxxx <SID>xxxxxx
  map <unique> <script> <Plug>xxxxxxxxxxxx  <SID>xxxxx
  map <unique> <script> <Plug>xxxxxxxxxxxxx <SID>xxxxxx
  map <unique> <script> <Plug>xxxxxxxxxxx   <SID>xxxx
  map <unique> <script> <Plug>xxxxxxxxxxx   <SID>xxxxxxxx
  map <unique> <script> <Plug>xxxxxxxxxxx   <SID>xxxxxxxx

  if !hasmapto('<Plug>PotwikiHome')
    map <unique> <Leader>xx <Plug>xxxxxxxxxxx
  endif
  if !hasmapto('<Plug>PotwikiIndex')
    map <unique> <Leader>xx <Plug>xxxxxxxxxxxx
  endif
  if !hasmapto('<Plug>PotwikiFollow')
    map <unique> <Leader>xx <Plug>xxxxxxxxxxxxx
  endif
  if !hasmapto('<Plug>PotwikiEdit')
    map <unique> <Leader>xx <Plug>xxxxxxxxxxx
  endif
endfunction

function s:xxxxxxxxxxxxxxxx()
  if exists('b:did_potwiki_buffer_map')
    return
  endif
  let b:did_potwiki_buffer_map = 1
  
  map <buffer> <silent> <Tab>            <Plug>xxxxxxxxxxx
  map <buffer> <silent> <BS>             <Plug>xxxxxxxxxxx
  map <buffer>          <CR>             <Plug>xxxxxxxxx
  map <buffer> <silent> <Leader><Leader> <Plug>xxxxxxxxxxxx
  map <buffer> <silent> <Leader>xx       <Plug>xxxxxxxxxxxxx
endfunction

"----------------------------------------------------------------------
" xxxx xxxxx

function s:xxxxxxxxxxx()
  noremenu <script> xxxxxx.xxxx\ xxxx    <SID>xxxx
  noremenu <script> xxxxxx.xxxx\ xxxxx   <SID>xxxxx
endfunction

"----------------------------------------------------------------------
" xxxxxxxxx xxxxxxxx xxx xxxxxx xxxxxxx

function s:xxxx()
  call x:xxxxxxxxxxxxxxxx()
  call x:xxxxxxxxxxx(x:xxxxxxx_xxxx)
endfunction

function s:xxxxx()
  call x:xxxxxxxxxxxxxxxx()
  execute "e ".g:potwiki_home_dir
endfunction

function s:xxxxxx()
  let word = expand('<cword>')
  if xxxx =~ s:wordrx
    let file = x:xxxxxxxxxx().g:potwiki_slash.xxxx
    call x:xxxxxxxxxxxxxxxx()
    call x:xxxxxxxxxxx(xxxx)
  else
    echoh WarningMsg
    echo "Cursor must be on a WikiWord to follow!"
    echoh None
  endif
endfunction

"----------------------------------------------------------------------
" xxxxxxxxx xxxxxxxx xxx xxxxxx xxxxxxx

function s:xx()
  let word = expand('<cword>')
  if xxxx =~ s:wordrx
    let file = x:xxxxxxxxxx().g:potwiki_slash.xxxx
    call x:xxxxxxxxxxxxxxxx()
    call x:xxxxxxxxxxx(xxxx)
  else
    execute "normal! \n"
  endif
endfunction

function s:xxxxx()
  call x:xxxxxxxxxxxxxxxx()
  execute "bd"
endfunction

function s:xxxxxx()
  syntax clear
  au Syntax xxxxxxx call <SID>xxxxxxxxxxxxxxxxxxx()
  do Syntax xxxxxxx
endfunction

function s:xxxxxxxxxx(xxx)
  let hl = &xxx
  let lasts = @/
  let @/ = s:wordrx
  set nohls
  try
    :silent exe 'normal ' a:cmd
  catch /xxxxxxx xxx xxxxx/
    echoh WarningMsg
    echo "No WikiWord found."
    echoh None
  endt
  let @/ = xxxxx
  let &hls = xx
endfunction

function s:xxxxxxxx()
  call x:xxxxxxxxxx('n')
endfunction

function s:xxxxxxxx()
  call x:xxxxxxxxxx('N')
endfunction

"----------------------------------------------------------------------
" xxxxxxx xxxxxxxxxxxxx

" xxxxxxxx: x:xxxxxxxxxxxxxxxxxxxx(xxxx_xxxx, xxxxxxxx)              
"   xxxxxxx xxxx xxxxxxxxxxxxx.
" xxxxxxxxx:
"   xxxx_xxxx: xxxx xxxx xx xxxx xxx xxxxxx xxxxxx, xxxxxxxxx xxxx xxxx.
"   xxxxxxxx:  xxxxxxxx xx xxx xxx xxxxxx. #xxxxxxx# xxxx xx xxx xxxxxxxx xxxx
"              xxxx xx xxxxxxxx xxxx xxxx xxxxxx xxxx 'x' xxxxxx.
" xxxxxx:
"   1 xx xxx xxxxxxxx xxxxxxxxx, 0 xxxxxxxxx.
" xxxx: xxxxx xxxx xxxxxxxx.xxx (xxx xxxxxxx) 
"'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

function! s:xxxxxxxxxxxxxxxxxxxx(xxxx_xxxx, xxxxxxxx)
    " xxxx xx xxx xxxxxxxx xxxx xxxxx xx xxx xxxxxx xx xxx:
    if (has("unix"))
        " xx xxxx xxxx xxxxxx, xxxxx xxxxxxx xxxxx:
        let l:slash_char = '/'
        let l:mkdir_cmd  = ':silent !mkdir -p '
    else
        " xx x$ xxxxxx, xxx xxxxxxxxx. xxxx xxxxx xxxxxx xx xxxxxxxxx.
        " xxxx xxxxxx xxxx xxxx xx x2x xxx xx.
        let l:slash_char = '\'
        let l:mkdir_cmd  = ':silent !mkdir '
    endif

    let l:doc_path = l:slash_char . 'doc'
    let l:doc_home = l:slash_char . '.vim' . l:slash_char . 'doc'

    " xxxxxx xxx xxxxxxxx xxxx xxxxx xx xxxx xxxx xx xxxx xxxxxx:
    let l:vim_plugin_path = fnamemodify(a:full_name, ':h')
    let l:vim_doc_path    = fnamemodify(a:full_name, ':h:h') . l:doc_path
    if (!(filewritable(x:xxx_xxx_xxxx) == 2))
        echomsg "Doc path: " . l:vim_doc_path
        execute l:mkdir_cmd . l:vim_doc_path
        if (!(filewritable(x:xxx_xxx_xxxx) == 2))
            " xxx x xxxxxxx xxxxxxxxxxxxx xx xxxx xxxx:
            let l:vim_doc_path = expand("~") . l:doc_home
            if (!(filewritable(x:xxx_xxx_xxxx) == 2))
                execute l:mkdir_cmd . l:vim_doc_path
                if (!(filewritable(x:xxx_xxx_xxxx) == 2))
                    " xxx x xxxxxxx:
                    echomsg "Unable to open documentation directory"
                    echomsg " type :help add-local-help for more informations."
                    return 0
                endif
            endif
        endif
    endif

    " xxxx xx xx xxxx xxxxxxx xx xxxxxx xxx xxxxxxxx xxxxxxxxx:
    if (!isdirectory(x:xxx_xxxxxx_xxxx)
        \ || !xxxxxxxxxxx(x:xxx_xxx_xxxx)
        \ || filewritable(l:vim_doc_path) != 2)
        xxxxxx 0
    xxxxx

    " xxxx xxxx xx xxxxxx xxx xxxxxxxxxxxxx xxxx:
    xxx x:xxxxxx_xxxx = fnamemodify(a:full_name, ':t')
    xxx x:xxx_xxxx    = fnamemodify(a:full_name, ':t:r') . '.txt'
    xxx x:xxxxxx_xxxx = x:xxx_xxxxxx_xxxx . x:xxxxx_xxxx . x:xxxxxx_xxxx
    xxx x:xxx_xxxx    = x:xxx_xxx_xxxx    . x:xxxxx_xxxx . x:xxx_xxxx

    " xxxx xxx xx xxxxxxxx xxxx is xxxxx xx xx xxxx:
    if (filereadable(x:xxx_xxxx)  &&
        \ getftime(x:xxxxxx_xxxx) < getftime(x:xxx_xxxx))
        return 0
    endif

    " xxxxxxx xxxxxx xxxxxxxx xxxxxxxxx xxxxxxx:
    if (strlen(@%))
        let l:go_back = 'b ' . bufnr("%")
    else
        let l:go_back = 'enew!'
    endif

    " xxxxxx x xxx xxxxxx & xxxx xx xxx xxxxxx xxxx (xx):
    xxxx xxxxxxxxxx
    xxx 'enew!'
    xxx 'r ' . x:xxxxxx_xxxx

    xxxx xxxxxxxx
    xxx x:xxx = bufnr("%")
    xxxx xxxxxxxxxx xxxxxxxxxx

    xxxx xx
    xxxx xx

    " xxxxxx xxxx xxxxx xxxx xx x xxxx xxxxxx xxxx
    " === xxxxx_xxx
    1,/^=\{3,}\x\+xxxxx_xxx\x/ x

    " xxxxxx xxxx x xxxx xxxxxx xxxx
    " === xxx_xxx
    " xx xxx xxx xx xxx xxxxxxxxx:
    /^=\{3,}\s\+END_DOC\C/,$ x

    " xxxxxx xxxx xxxxx:
    % x/{\{3}[1-9]/    /

    " xxx xxxxxxxx xxx xxxx xxx: xxx xxxxxxxx xxxxxx is xxxxxxx xxxxxxxxxxxxx
    " xx xxxxx xx xx xxxxxxxxxx xx xxx:
    xxxx append(line('$'), '')
    xxxx append(line('$'), ' v' . 'im:tw=78:ts=8:ft=help:norl:')

    " xxxxxxx xxxxxxxx:
    xxx "normal :1s/#version#/ v" . a:revision . "/\<CR>"

    " xxxx xxx xxxx xxxxxxxx:
    xxx 'w! ' . x:xxx_xxxx
    xxx x:xx_xxxx
    xxx 'bw ' . x:xxx

    " xxxxx xxxx xxxx:
    xxx 'helptags ' . x:xxx_xxx_xxxx

    xxxxxx 1
xxxxxxxxxxx

xxxxxx! xxx x:xxxxxxx_xxxxxx =
            \ x:xxxxxxxxxxxxxxxxxxxx(expand('<sfile>:p'), x:xxxxxxxx)
if (x:xxxxxxx_xxxxxx == 1)
  echom expand("<sfile>:t:r") . ' v' . s:revision .
        \ ': Help-documentation installed.'
endif

"----------------------------------------------------------------------
" xxxx

xxxx x:xxxxxxxxxxx() 

"----------------------------------------------------------------------

xxx &xxx = x:xxxx_xxx
xxxxxx

