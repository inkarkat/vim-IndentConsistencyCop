" vim: set ft=vim ts=8 sts=4 sw=2:
" Is spc2 with one erroneous tab line. 
" Has inconsistent buffer settings (sts should be 2, not 4). 
" Since IndentConsistencyCop 1.10.011 indent guessed wrong as spc4. 
"
" potwiki.vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Name:		    potwiki
" Description:	    Maintain a simple Plain Old Text Wiki
" Author:	    Edwin Steiner <edwin.steiner@gmx.net>
" Maintainer:	    -- '' --
"
" Licence:	    This program is free software; you can redistribute it
"                   and/or modify it under the terms of the GNU General Public
"                   License.  See http://www.gnu.org/copyleft/gpl.txt
"
" Credits:	    Mathieu Clabaut <mathieu.clabaut@free.fr>
"                       for the organization of the documentation and
"                       the automatic documentation installing
"                       (taken from his script vimspell.vim)
"                   Michael Fitz <MikeTheGuru@gmx.at>
"                       NextWord/PrevWord bugfix
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Section: Documentation 
"----------------------------
"
" Documentation should be available by ":help potwiki" command, once the
" script has been copied in you .vim/plugin directory.
"
" You still can read the documentation at the end of this file. Locate it by
" searching the "potwiki-contents" string (and set ft=help to have
" appropriate syntaxic coloration). 
"

if exists('loaded_potwiki')
  finish
endif
let loaded_potwiki = 1

let s:save_cpo = &cpo
set cpo&vim

"----------------------------------------------------------------------
" Revision

let s:revision = "1.24"

"----------------------------------------------------------------------
" Configuration

function s:default(varname,value)
  if !exists('g:potwiki_'.a:varname)
    let g:potwiki_{a:varname} = a:value
  endif
endfunction

call s:default('home',"~/Wiki/HomePage")
call s:default('home_dir',fnamemodify(g:potwiki_home,':p:h'))

call s:default('upper','A-Z')
call s:default('lower','a-z')
call s:default('other','0-9_')

call s:default('autowrite',0)

call s:default('slash',has('unix') ? '/' : '\')

call s:default('ignore','')
call s:default('opendirs',0)

"----------------------------------------------------------------------
" Functions

function s:PotWikiInit()
  let upp = g:potwiki_upper
  let low = g:potwiki_lower
  let oth = g:potwiki_other
  let nup = low.oth
  let nlo = upp.oth
  let any = upp.nup

  "A PotWikiWord must start with an upper case character and contain at
  "least one lower case and another upper case character in that order.

  let inner = '['.upp.']['.nlo.']*['.low.']['.nup.']*['.upp.']['.any.']*'
  call s:PotWikiBuildIgnore()
  if s:ignorerx != ""
    let s:wordrx = '\C\<\(\('.s:ignorerx.'\)\>\)\@!'.inner.'\>'
  else
    let s:wordrx = '\C\<'.inner.'\>'
  endif

  call s:PotWikiMap()
  call s:PotWikiMenu()
  call s:PotWikiAutoCommands()

  au Filetype potwiki call <SID>PotWikiBufferInit()
  au Syntax potwiki call <SID>PotWikiDefineSyntax()
endfunction

function s:PotWikiBufferInit()
  call s:PotWikiBufferMap()
endfunction

function s:PotWikiDir()
  if &filetype == 'potwiki'
    return expand('%:p:h')
  endif
  return g:potwiki_home_dir
endfunction

function s:PotWikiDefineSyntax()
  syntax clear
  syntax case match
  execute 'syntax match PotwikiWordNotFound "'.s:wordrx.'"'

  call s:PotWikiDefineWords()

  " Define the default highlighting.
  hi def link PotwikiWordNotFound Error
  hi def link PotwikiWord         Identifier

  let b:current_syntax = "potwiki"
endfunction

" external interface
function PotwikiSyntax()
  call s:PotWikiDefineSyntax()
endfunction

function s:PotWikiBuildIgnore()
  let s:ignorerx = ""
  let words=g:potwiki_ignore
  while words != ""
    let pos = stridx(words,",")
    if pos < 0
      let pos = strlen(words)
    endif
    let word = strpart(words,0,pos)
    let words = strpart(words,pos+1)
    if s:ignorerx != ""
      let s:ignorerx = s:ignorerx.'\|'
    endif
    let s:ignorerx = s:ignorerx.word
  endwhile
endfunction

function s:PotWikiDefineWords()
  let files=globpath(s:PotWikiDir(),"*")
  while files != ""
    let pos = stridx(files,"\n")
    if pos < 0
      let pos = strlen(files)
    endif
    let file = strpart(files,0,pos)
    let files = strpart(files,pos+1)
    let word = matchstr(file,s:wordrx.'\%$')
    if word != "" 
      if filereadable(file) || (g:potwiki_opendirs && isdirectory(file))
	execute "syntax match PotwikiWord ".'"\<'.word.'\>"'
      endif
    endif
  endwhile
endfunction

function s:PotWikiEdit(file)
  if isdirectory(a:file) && !g:potwiki_opendirs
    echo a:file." is a directory"
    return
  endif
  execute "e ".a:file
  if &filetype != 'potwiki'
    setlocal filetype=potwiki
  endif
endfunction

function s:PotWikiAutowrite()
  if &filetype == 'potwiki' && g:potwiki_autowrite
    execute "update"
  endif
endfunction

"----------------------------------------------------------------------
" Autocommands

function s:PotWikiAutoCommands()
  let dir = g:potwiki_home_dir
  if !has('unix')
    let dir = substitute(dir,'\','/','g')
  endif
  " 'setf potwiki' is too weak -- we may have to override a wrong filetype:
  execute 'au BufNewFile,BufReadPost '.dir.'/* setlocal filetype=potwiki'
endfunction

"----------------------------------------------------------------------
" Maps

function s:PotWikiMap()
  noremap <unique> <script> <SID>Home    :call <SID>Home()<CR>
  noremap <unique> <script> <SID>Index   :call <SID>Index()<CR>
  noremap <unique> <script> <SID>CR      :call <SID>CR()<CR>
  noremap <unique> <script> <SID>Follow  :call <SID>Follow()<CR>
  noremap <unique> <script> <SID>Close   :call <SID>Close()<CR>
  noremap <unique> <script> <SID>Reload  :call <SID>Reload()<CR>
  noremap <unique> <script> <SID>NextWord :call <SID>NextWord()<CR>
  noremap <unique> <script> <SID>PrevWord :call <SID>PrevWord()<CR>
  execute "noremap <unique> <script> <SID>Edit ".
        \ ":call <SID>PotWikiAutowrite()<CR>".
        \ ":e ".g:potwiki_home_dir.g:potwiki_slash

  map <unique> <script> <Plug>PotwikiHome   <SID>Home
  map <unique> <script> <Plug>PotwikiIndex  <SID>Index
  map <unique> <script> <Plug>PotwikiCR     <SID>CR
  map <unique> <script> <Plug>PotwikiFollow <SID>Follow
  map <unique> <script> <Plug>PotwikiClose  <SID>Close
  map <unique> <script> <Plug>PotwikiReload <SID>Reload
  map <unique> <script> <Plug>PotwikiEdit   <SID>Edit
  map <unique> <script> <Plug>PotwikiNext   <SID>NextWord
  map <unique> <script> <Plug>PotwikiPrev   <SID>PrevWord

  if !hasmapto('<Plug>PotwikiHome')
    map <unique> <Leader>ww <Plug>PotwikiHome
  endif
  if !hasmapto('<Plug>PotwikiIndex')
    map <unique> <Leader>wi <Plug>PotwikiIndex
  endif
  if !hasmapto('<Plug>PotwikiFollow')
    map <unique> <Leader>wf <Plug>PotwikiFollow
  endif
  if !hasmapto('<Plug>PotwikiEdit')
    map <unique> <Leader>we <Plug>PotwikiEdit
  endif
endfunction

function s:PotWikiBufferMap()
  if exists('b:did_potwiki_buffer_map')
    return
  endif
  let b:did_potwiki_buffer_map = 1
  
  map <buffer> <silent> <Tab>            <Plug>PotwikiNext
  map <buffer> <silent> <BS>             <Plug>PotwikiPrev
  map <buffer>          <CR>             <Plug>PotwikiCR
  map <buffer> <silent> <Leader><Leader> <Plug>PotwikiClose
  map <buffer> <silent> <Leader>wr       <Plug>PotwikiReload
endfunction

"----------------------------------------------------------------------
" Menu items

function s:PotWikiMenu()
  noremenu <script> Plugin.Wiki\ Home    <SID>Home
  noremenu <script> Plugin.Wiki\ Index   <SID>Index
endfunction

"----------------------------------------------------------------------
" Functions suitable for global mapping

function s:Home()
  call s:PotWikiAutowrite()
  call s:PotWikiEdit(g:potwiki_home)
endfunction

function s:Index()
  call s:PotWikiAutowrite()
  execute "e ".g:potwiki_home_dir
endfunction

function s:Follow()
  let word = expand('<cword>')
  if word =~ s:wordrx
    let file = s:PotWikiDir().g:potwiki_slash.word
    call s:PotWikiAutowrite()
    call s:PotWikiEdit(file)
  else
    echoh WarningMsg
    echo "Cursor must be on a WikiWord to follow!"
    echoh None
  endif
endfunction

"----------------------------------------------------------------------
" Functions suitable for buffer mapping

function s:CR()
  let word = expand('<cword>')
  if word =~ s:wordrx
    let file = s:PotWikiDir().g:potwiki_slash.word
    call s:PotWikiAutowrite()
    call s:PotWikiEdit(file)
  else
    execute "normal! \n"
  endif
endfunction

function s:Close()
  call s:PotWikiAutowrite()
  execute "bd"
endfunction

function s:Reload()
  syntax clear
  au Syntax potwiki call <SID>PotWikiDefineSyntax()
  do Syntax potwiki
endfunction

function s:SearchWord(cmd)
  let hl = &hls
  let lasts = @/
  let @/ = s:wordrx
  set nohls
  try
    :silent exe 'normal ' a:cmd
  catch /Pattern not found/
    echoh WarningMsg
    echo "No WikiWord found."
    echoh None
  endt
  let @/ = lasts
  let &hls = hl
endfunction

function s:NextWord()
  call s:SearchWord('n')
endfunction

function s:PrevWord()
  call s:SearchWord('N')
endfunction

"----------------------------------------------------------------------
" Install documentation

" Function: s:InstallDocumentation(full_name, revision)              
"   Install help documentation.
" Arguments:
"   full_name: Full name of this vim plugin script, including path name.
"   revision:  Revision of the vim script. #version# mark in the document file
"              will be replaced with this string with 'v' prefix.
" Return:
"   1 if new document installed, 0 otherwise.
" Note: taken from vimspell.vim (see Credits) 
"'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

function! s:InstallDocumentation(full_name, revision)
    " Name of the document path based on the system we use:
    if (has("unix"))
        " On UNIX like system, using forward slash:
        let l:slash_char = '/'
        let l:mkdir_cmd  = ':silent !mkdir -p '
    else
        " On M$ system, use backslash. Also mkdir syntax is different.
        " This should only work on W2K and up.
        let l:slash_char = '\'
        let l:mkdir_cmd  = ':silent !mkdir '
    endif

    let l:doc_path = l:slash_char . 'doc'
    let l:doc_home = l:slash_char . '.vim' . l:slash_char . 'doc'

    " Figure out document path based on full name of this script:
    let l:vim_plugin_path = fnamemodify(a:full_name, ':h')
    let l:vim_doc_path    = fnamemodify(a:full_name, ':h:h') . l:doc_path
    if (!(filewritable(l:vim_doc_path) == 2))
        echomsg "Doc path: " . l:vim_doc_path
        execute l:mkdir_cmd . l:vim_doc_path
        if (!(filewritable(l:vim_doc_path) == 2))
            " Try a default configuration in user home:
            let l:vim_doc_path = expand("~") . l:doc_home
            if (!(filewritable(l:vim_doc_path) == 2))
                execute l:mkdir_cmd . l:vim_doc_path
                if (!(filewritable(l:vim_doc_path) == 2))
                    " Put a warning:
                    echomsg "Unable to open documentation directory"
                    echomsg " type :help add-local-help for more informations."
                    return 0
                endif
            endif
        endif
    endif

    " Exit if we have problem to access the document directory:
    if (!isdirectory(l:vim_plugin_path)
        \ || !isdirectory(l:vim_doc_path)
        \ || filewritable(l:vim_doc_path) != 2)
        return 0
    endif

    " Full name of script and documentation file:
    let l:script_name = fnamemodify(a:full_name, ':t')
    let l:doc_name    = fnamemodify(a:full_name, ':t:r') . '.txt'
    let l:plugin_file = l:vim_plugin_path . l:slash_char . l:script_name
    let l:doc_file    = l:vim_doc_path    . l:slash_char . l:doc_name

    " Bail out if document file is still up to date:
    if (filereadable(l:doc_file)  &&
        \ getftime(l:plugin_file) < getftime(l:doc_file))
        return 0
    endif

    " Prepare window position restoring command:
    if (strlen(@%))
        let l:go_back = 'b ' . bufnr("%")
    else
        let l:go_back = 'enew!'
    endif

    " Create a new buffer & read in the plugin file (me):
    setl nomodeline
    exe 'enew!'
    exe 'r ' . l:plugin_file

    setl modeline
    let l:buf = bufnr("%")
    setl noswapfile modifiable

    norm zR
    norm gg

    " Delete from first line to a line starts with
    " === START_DOC
    1,/^=\{3,}\s\+START_DOC\C/ d

    " Delete from a line starts with
    " === END_DOC
    " to the end of the documents:
    /^=\{3,}\s\+END_DOC\C/,$ d

    " Remove fold marks:
    % s/{\{3}[1-9]/    /

    " Add modeline for help doc: the modeline string is mangled intentionally
    " to avoid it be recognized by VIM:
    call append(line('$'), '')
    call append(line('$'), ' v' . 'im:tw=78:ts=8:ft=help:norl:')

    " Replace revision:
    exe "normal :1s/#version#/ v" . a:revision . "/\<CR>"

    " Save the help document:
    exe 'w! ' . l:doc_file
    exe l:go_back
    exe 'bw ' . l:buf

    " Build help tags:
    exe 'helptags ' . l:vim_doc_path

    return 1
endfunction

silent! let s:install_status =
            \ s:InstallDocumentation(expand('<sfile>:p'), s:revision)
if (s:install_status == 1)
  echom expand("<sfile>:t:r") . ' v' . s:revision .
        \ ': Help-documentation installed.'
endif

"----------------------------------------------------------------------
" MAIN

call s:PotWikiInit() 

"----------------------------------------------------------------------

let &cpo = s:save_cpo
finish

