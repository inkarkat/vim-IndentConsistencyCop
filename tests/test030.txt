# vim: set ft=perl:
# Inconsistent. 
###########################################################################xx##
##
# xxxx: 	xxxxxxxxxxxxxxxxxxxxxx.xx  
# xxxxxxx:	xxx-xxx                    
# xxxxxx: 	/^--                       
# xxxx xxxxxxx:	16 xxx 2002                
#
###############################################################################
# xxxxxxxx: 
#	xxxx xxxxxx xxx xxx xxxxxx xxx xxxxxxx xxxxxxxxx xxxxx xx xxx xxxxxxxx   
#	xxxx xx xxxxxxxx xxxx xxxxxxxxx.	                                  
# xxxxxxx: 
#	xxxx xxxx xxxx xx xxxxxxxxxxxx xxxxxxx xx xxxxxxxx xxxxxxxx-xxxxxxxxx 
#	xxxxxxxxxx. 
# xxxxxxxx	xxxx		xxxxxxx 
#	0.18    27-xxx-2005     xxxxxxxx xxxxxxxxxxxxxxxxxxxxxx.xxx xx                                                           
#				xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxx.xxx                                                            
#	0.17	05-xxx-2004	xxxxx99343: xxxxxxx xxxx xxxxxxxxx xxxxxxxxxx                                                    
#				'_': xxxxx xxxxxxx xx                                                                            
#				xxx_xxxxxxx_xxxx_xxxx_xxxxxxxx_xxx()                                                             
#	0.16	16-xxx-2004	xxxxx xxxxx_...() xxxxxx xxxxxxxxx xxx                                                           
#				(xxxxxxxx) xxxxx xxxxxxxxxx.                                                                     
#	0.15	15-xxx-2004	xx: xxxxxxx xxxxxxxx xx xxxxxx xxxxx (xxxxxxx)                                                   
#				xxx xxxxxxxxxx (xxxxxxxx) xx &$xxxxxx();                                                         
#				xxxxxxxxx xxxxxxxx xxx xxxxxxx xxxx xxxxxxxx                                                     
#				xxxxxxxx xxx xxxxxxxxx.                                                                          
#	0.14	15-xxx-2004	xxxxx xxxxxxx xx xxxxxxxxxx xxx xxxx.                                                            
#	0.13	14-xxx-2004	xxxxxxxxxx xxxxxxxxxxxx::xxx... xxxx                                                             
#				xxxxxxxxxxxxx->xxx... xxxxxx xxxxxx                                                              
#	0.12	12-xxx-2004	xxxxxxx xxxx xxxxx'x xxx() xxx xxxx xx xx                                                        
#				xxxxxxx xxxxxxxxxxx xxx xxxxx.                                                                   
#	0.11	16-xxx-2003	xxxxxxxx xxxxxx xxxxxxxx xx xxxxx xxxxxxx xxxx                                                   
#				xxxxx xxxxxxx xxxxxxxx.xxx                                                                       
#				xxxxxxxx xxxxx xxxxxxxx.                                                                         
#	0.10	10-xxx-2003	xx: xx xxxxxxx xxxxxxxxxx xxxxxxx xxxx, xxxx xx                                                  
#				xxxxxx xxxxxxxx xxxxxxxxxxxxxxxxxxxxxx.xxx xxxx                                                  
#				xx xxxxxx, xxxxxxx xxxxx xxxx xxxxxxxx xxxxxx.                                                   
#	0.09	11-xxx-2003	xx: xxxxx48872: xxxx xxxxxxxx xxxxxxxx xx xxxxxxx                                                
#				xxxxxxxx xxx.                                                                                    
#	0.08	22-xxx-2003	xx: xx xxxxxxx, xxxx() xx xxxx xx xxxx xxxxxxxx                                                  
#				xxxxxxx xxx xxxxx xxxxxx $? xxx xx xxxx(), xxx                                                   
#				xx xxxxx(). xxxx xx xxxxxxxxx xxxx xxx xx xxx                                                    
#				xxxxxxxxx, xxx xxx xxxx xx xxxxxxx xxxxx.                                                        
#	0.07	13-xxx-2003	xx: xxxxxxxx xxxxxxxxx xxxxxxxxx xx xxx xxxx xxx                                                 
#				xxxxxx xxxxxxxx xxxxxxxxx xx xxxxxxxxx xxxxxxx                                                   
#				xxxxxxx xxxxxxxxxxx xxxxxxxx xxxxxxxx xxxxx xx                                                   
#				xxxx. xxxxxxxxx xxxx xxxx xx xxxxx xx xxx                                                        
#				xxxxxxx xx xxxx.                                                                                 
#				xxxxxxxxxx xxxx xxxx xxxxxxxx_xxxxxxx_xxxxxxxxxxx()                                              
#				xxxx xxxxxxxx_xxxxxxx_xxxxxxxxxxx_xxxx_xxx_xxx_xxx()                                             
#				xx xx xxxx xx xxxx xx.                                                                           
#	0.06	14-xxx-2002	xxxxx xxxxxxx xxxxxxx xxxxxxxx xxxxxxx xx                                                        
#				'xxx_xxxxxx_xx' xxxx xxxxxx xx xxxxxxxxx                                                         
#				xxxxxxxx xxxx xxx 'xxxxxxx.xxx' xxxx xxxxxxxx                                                    
#				'xxxxxxxxxxxxxxxxxxxxxx.xxx'.                                                                    
#	0.05	16 xxx 2002	xxxx xxxxxxx xxxxx xxx xxx xxxxxxxx xxxxxxx xxxxxx xxxx xxxx (</xxxxxx/???/xxxxxxx/>) xxx xxxx;  
#				xxx, xx xx xxxxxxx, xx'xx xxxxxxx xxx xxxxxxxx.xxx xxxx xxx xxx xxxxxxx xxxx.                    
#				xxxx xxx, xxxxxxxxxx xxxxxxxxx (xx x xxxxxxx xxxxxxxxxxx) xxx xxxxxxxx xx xxxx, xxx.             
#	0.04	15 xxx 2002	xxxxx xxxxxxx xxxxxxx xxxxxxx: xxxxxxxxx xxx                                                     
#				xxxxxxxxxxxxx xx xxxxxxxx xxxxxxxxx.                                                             
#	0.03	02 xxx 2002	xxxxxxxxxxx xxxxxxx xxxx xx xxxxxxxx_xxxxxxx_xxxxxxxxxxx                                         
#	0.02	20 xxx 2002	xxxxx xxxxxxx xx-xx xxxxxxx                                                                      
#	0.01	16 xxx 2002	xxxx xxxxxxxx                                                                                    
###############################################################################
#xxxx_xxxx = "@(#)xxxxxxxxxxxxxxxxxxxxxx.xx	0.16	(16-xxx-2004)	xxxxxxx";

BEGIN { require 5.006; }

package xxxxxxxxxxxxxxxxxxxxxx;
use strict;

use FindBin;
use Sys::Hostname;
use XXXXXService;

use Exporter ();
our @xxx = qw(Exporter);
our @xxxxxx = qw( discover );
our @xxxxxx_xx = qw(initialize_profile_directories 
		initialize_hostnames
		discover_profile_directories
		discover_profile_directories_from_XXX_SID_dir
		discover_XXX_system
		is_XXX_service_information_valid
		get_XXX_SID_directories
		get_log_paths_from_XXX_SID_dir
		get_profile_path_from_sapstart_log
		@profile_directories
		@hostnames
		$isAddHostnames
		);
our @xxxxxx_xxxx = ();


our @xxxxxxx_xxxxxxxxxxx = "";
###############################################################################
#	xxxxxxx:
#	xxxx xx xxxxxxxxxx xxxxxxx xxxxxxxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
###############################################################################



our @xxxxxxxxx = "";
our $xxxxxxxxxxxxxx = 1;
###############################################################################
#	xxxxxxx:
#	xxxx xx xxxxx xxxxxxxxx; xxxx xxx xxxxxxxx xxx xx x xxxxxxx xxxxxxxxxxx 
#	xxxxxxxx xxxxxxxxxxx xxxxxxxxx.
#	xxxx xxxxxxx xxxxxxxxxx xxxxxxxxxxx xxxxxxxxx xxx xxxxx xx xxx xxxx xx xxxxxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
###############################################################################



sub discover($)
###############################################################################
#	xxxxxxx:
#	xxxxxxx xxx xxxxxx xxxxxxx xx xxxxxxx xxxxxxxxx. 
#	xxxx xxxxxxx xx xxx xxxxxx xxxxx xxxxx xxxx xxxx xxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
#	xxxxxx:
#	$xxxxxx:    xxx xxxx xxxxxx xxx xxxxxxx xxxxxxxxxxx xxx xxx xxxxxxxxxx xxxxxxxx
#		    xx xxx xxxxxxxx xxxxxxx xxxxxx xxxxxx.
#		    xxx xxxxxx xxxx xx xxx xxxxxxxx xx xxxxxxx. xxx xxxxxxxx xxx
#		    xxxxx xxx xxxxxxxxx xxxxxxx xx xxxxxxx xxx xxxxxxxxx. 
#	xxxxxx xxxxxx: 
#	xxxx
###############################################################################
{
    my $xxxxxx = $_[0];

    print STDERR "XXX profile discovery started at ".scalar localtime().".\n";
    print STDERR "Service discovery output routine (which determines the discovery information syntax) is \"$xxxxxx\"\n";

    initialize_hostnames();
    initialize_profile_directories(); 
    discover_profile_directories() if (@xxxxxxx_xxxxxxxxxxx == 0);

    if( @xxxxxxx_xxxxxxxxxxx > 0 )
    {
	print STDERR "XXX profile discovery considers the following hostnames: \n\t".join( "\n\t", @xxxxxxxxx )."\n"; 
	my $xxxxxxx_xxxxxxxxx;
	foreach $xxxxxxx_xxxxxxxxx ( @xxxxxxx_xxxxxxxxxxx )
	{
	    discover_XXX_system( $xxxxxxx_xxxxxxxxx, $xxxxxx );
	}
    }
    else
    {
	 warn "No profile directory has been specified or found! No XXX installation has been discovered. \n"; 
    }

    print STDERR "XXX profile discovery ended successfully at ".scalar localtime().".\n";
}

sub initialize_hostnames()
{
###############################################################################
#	xxxxxxx:
#	xxxxxxxxxx xxx xxxx xx xxxxxxxxx xxxx xxx xxxxxxxxxx; xxxx xxx xxxxxxxx 
#	xxxxxxxx xxxx xxxxx xxx xx xxxxx xxxxxxxxx xxx xxxxxxxxxx. xx xx xxxxxxxxx 
#	xxx xxxxxxxx xxxxxxx xxx xxxxxxxxxxx xxxxxxxx, xxxx xxx xxxxxxxx xxxxxxxx xx 
#	xxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	xxxxxxxxxxx @xxxxxxxxx xxxx xxx xxxxxx xxxx xxxx xxx xxxxxxxxxxx xxxxxxxx xx 
#	xxx xxxxxxxx xxxxxxxx. 
#	xxxxxx:
#	xxxx
#	xxxxxx xxxxxx: 
#	xxxx
###############################################################################

    if( defined $xxx{XXXOPC_HOSTNAMES} )
    {
	@xxxxxxxxx = split / /, $xxx{XXXOPC_HOSTNAMES};
    }
    else
    {
	undef @xxxxxxxxx;
    }

    if( @xxxxxxxxx > 0 )
    {
	# xxxxxx xxx xxxx-xxxxxxxx xxxxxxxxx. 
	print STDERR "Using only hostnames from environment variable XXXOPC_HOSTNAMES: \n\t".join( "\n\t", @xxxxxxxxx )."\n";

	# xx xxx xxx xxxxxxxxxx xxxxxxxxxxx xxxxxxxxx xx xxxx xxxxx.
	$xxxxxxxxxxxxxx = 0;
    }
    else
    {
	# xxxxxxxxxx xxxx xxxx xxxxxxxx xxxxxxxx. 
	@xxxxxxxxx = hostname();

	# xxx xxxxxxxxxx xxxxxxxxxxx xxxxxxxxx xx xxxx xxxxx.
	$xxxxxxxxxxxxxx = 1;
    }
}

sub initialize_profile_directories()
###############################################################################
#	xxxxxxx:
#	xxxxxxxxxx xxxx xx xxxxxxxxxxx xxxx xxx xxxxxxxx xxx xxx xxxxxxxx 
#	xxxx xxxx-xxxxxxxx xxxxxx xx xxxx xxxx-xxxxxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	xxxxxxxxxxx @xxxxxxx_xxxxxxxxxxx xxxx xxx xxxxxx xxxx xxxx xxx 
#	xxxxxxxxxxx xxxxxxxx, xx xxxx xx xxxxx xxxxx xx xxx xxxxxxxxxxx xxxxxxxx 
#	xxx xxx xxxx xxx.
#	xxxxxx:
#	xxxx
#	xxxxxx xxxxxx: 
#	xxxx
###############################################################################
{
#xxxxx xxxxx
    my $xxxx_xxxx_xxxxxxxxx = ";";
#xxxxxx
    my $xxxx_xxxx_xxxxxxxxx = ":";
#xxxxx

    if( defined $xxx{XXXOPC_XXXPROFILEDIR} )
    {
	@xxxxxxx_xxxxxxxxxxx = split /${xxxx_xxxx_xxxxxxxxx}/, $xxx{XXXOPC_XXXPROFILEDIR};
    }
    else
    {
	undef @xxxxxxx_xxxxxxxxxxx;
    }

    (@xxxxxxx_xxxxxxxxxxx > 0) and print STDERR "Skipping detection and using XXX profile directories from environment variable XXXOPC_XXXPROFILEDIR:\n\t".join( "\n\t", @xxxxxxx_xxxxxxxxxxx )."\n";
}

sub discover_profile_directories()
###############################################################################
# xxxxxxx:
#   xxxxxxxx x xxxx xx xxxxxxxxx xxxxx xxxx xxxxxxxx xxxxxxx xxx xxxxxxxx. 
#   xx xx xxx xxxxxxx xxx xxxxxxx xxx xxxxxxxxxxx xxxxxx xxxxxxx xxxxxxx xxx
#   xxxxxxxx xxxxxxxx; xxxx xx xxxx xx xxx xxxxx xxxxxxxxx xxxxxxxxxxx. 
# xxxxxxxxxxx / xxxxxxxxxxxxx:
#xxxxx xxxxx
#   xxxxxx xxxxxxxxxx 'xxxxxxxxxxxxxxxxxxxxxx.xxx' xxxxxxx xx xxx xxxx xxxxxxxxx xx xxx xxxx xxxxxx. 
#xxxxx
# xxxxxx / xxxxxxxxxxxxxx:
#   ?? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
# xxxxxx:
#   xxxx
# xxxxxx xxxxxx: 
#   @xxxxxxx_xxxxxxxxxxx xxxxxxxx xxx xxxx xxxx xx xxx xxxxxxxxxx xxxxxxx xxxxxxxxxxx.
#   xxxx xxxxxxxxx xx xxxxxxx xxxxx
#   @xxxxxxx_xxxxxxxxxxx xx xxxxx xx xx xxxxxxx xxxxxxxxxxx xxxx xxxx
#   xxxxxxxxxx. 
#xxxxx xxxxx
#   xxxxxx xxxxxxxxx xx xxxxxx xxxxxxxxxx xxxxxx xx xxxxxxxx
#xxxxx
###############################################################################
{
#xxxxx xxxxx
    # xxxx xxxxxx xxxxxxxxxx xx xxxxxx xxx xxx xxxxx xxxx xxx xxxxxxx xxxxxxxx. 

#   xxx xxxxxxxxxx xx xxxx xx xxxx; xxx xxxxxxxxxx xxxxxx xxxx xx x xxxxxxxxx
#   xxxxxxxx xx xxx xxxxxxx xxxxxxxx; xxx xxx32 xxxx xxxxxxx xxx xxxxxxx xxxxxx
#   xxx xxx xxxxxxxxx xx xxx xxxxxxx xxxxxxxxxx, xxx xxx xxxxxx xx xxx
#   xxxxxxxxxxx xxxxxxxx xxxxxxx xxx 'xxxxxxx' xxxxxx xxxxxxxx xxxx xxx 'xxxx'
#   xxxxxxxx xxx xx xxx xx xxxx 'xxx_xx', xxx 'xxx_xxxxxx_xx', xxxxx xxxxxx
#   xxxxxxx xx xxxxxx xxx xxxxx xx xxx xxxxxx, xxxxx xx xxxx xxxxxxx xx xxxxxxx
#   xx x xxxxxx xx xxxx. 
#   xxxxxxxxxxx, xx xxxxx xx xxxxxxx xxx x64 xxx xx64 xxxxxxx xxxxxxxx, xxxx 32
#   xxx 64 xxx xxxxxxxx xx xxx xxxxxxxx xxxx xx xx xxxxxxxxx, xx xxx xxx xx
#   xxxxxxxxx xx xxxxxx 32 xx 64 xxx xxxx. 

    open( REGISTRY_EXPORT, "\"${FindBin::Bin}\\XXXXXEnumerateXXXPaths.exe\"|" ) or die "Cannot fork XXXXXEnumerateXXXPaths.exe: \"$!\"\n";

    # xxxxx xxxxxxxx xxxxxxxx xxxxxxx xxx xxxxxxxx xxx xxx xxxxxxxxxxx.
    my @xxxxxxxxxxx = get_XXX_SID_directories( \*REGISTRY_EXPORT );

    close( REGISTRY_EXPORT ) or die( "Cannot open helper program XXXXXEnumerateXXXPaths.exe to export XXX paths from registry: \"$!\", return code \"$?\"\n" );
#xxxx
    # xxxxxxxx xxx xxx xxxxxxxxxxx xxxx xxx xxxxx xxxxxxxxxx. 
    my @xxxxxxxxxxx = get_XXX_SID_directories( "/usr/sap/" );
#xxxxx

    my $xxxxxxxxx;
    foreach $xxxxxxxxx (@xxxxxxxxxxx)
    {
	discover_profile_directories_from_XXX_SID_dir( $xxxxxxxxx );
    }
    if( @xxxxxxx_xxxxxxxxxxx == 0 ) { warn "No XXX profile directory has been discovered!\n"; }
}

sub discover_profile_directories_from_XXX_SID_dir( $ )
###############################################################################
# xxxxxxx:
#	xxxxxxxx x xxxx xx xxxxxxxxx xxxxx xxxx xxxxxxxx xxxxxxx xxx xxxxxxxx. 
#	xxxxx xx xxx xxxxxx xxx xxx xxxxxxxxx, xxx 'xxxxxxxx.xxx' xxx xxxxx xxx 
#	xxx xxxxx xxxxxxxxx xxx xxxxxxxx xxx xxx xxxxxxx xxxxx. 
# xxxxxxxxxxx / xxxxxxxxxxxxx:
#	? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
# xxxxxxx / xxxxxxxxxxxxxx:
#	? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
# xxxxxx:
#	$xxxxxxxxx: xxxx xx xxx xxx xxxxxxxxx (x.x. '/xxxxxx/xx6')
# xxxxxx xxxxxx:
#	@xxxxxxx_xxxxxxxxxxx xxxxxxxx xxx xxxx xxxx xx xxx xxxxxxxxxx xxxxxxx xxxxxxxxxxx.
#	xxxx xxxxxxxxx xx xxxxxxx xxxxx
###############################################################################
{
    my $xxxxxxxxx = $_[0];

    my @xxx_xxxxx = get_log_paths_from_XXX_SID_dir( $xxxxxxxxx );
    my $xxx_xxxx;
    foreach $xxx_xxxx (@xxx_xxxxx)
    {
	my $xxxxxxx_xxxxxxxxx = get_profile_path_from_sapstart_log( $xxx_xxxx );
	if( (defined $xxxxxxx_xxxxxxxxx) and ($xxxxxxx_xxxxxxxxx ne "") )
	{
	    # xx xxx xxxxxxx xxxxxxxxx xx xxx xxx xx xxx xxxx xx xxxxxxx
	    # xxxxxxxxxxx (x.x. xxxxxxxx.xxx xxx xxxx xxxxxx xxx xxx xxxxx
	    # xxxxxxxx), xxx xx. 
	    # xxxx xxxxxxx xxxxxxxxx xxxx xxxxx xxxx xxxx xx xxx xxxx;
	    # xxxxxxxxx, xxxxxxxxx xxxx xx xxxxxxxxxx xxxxxxxx xxxxx!
	    my $xxx;
	    my $xx_xxxxxxx_xxxxxxxxxx = 0;
	    foreach $xxx (@xxxxxxx_xxxxxxxxxxx)
	    {
		if( $xxx eq $xxxxxxx_xxxxxxxxx )
		{
		    $xx_xxxxxxx_xxxxxxxxxx = 1;
		}
	    }
	    if( ! $xx_xxxxxxx_xxxxxxxxxx )
	    {
		print STDERR "Discovered XXX profile directory \"$xxxxxxx_xxxxxxxxx\" from sapstart.log\n";
		push @xxxxxxx_xxxxxxxxxxx, $xxxxxxx_xxxxxxxxx;
	    }
	}
    }
}

sub discover_XXX_system( $$ )
###############################################################################
#	xxxxxxx:
#	xxxxxxxx xxxxxxxx-xxxxxxxxxxx xxxxxxx xxxxxxxx xx xxx xxx xxxxxx xxx 
#	xxxxxxx xxxxxxxxx xx xxx xx xxx xxxxxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	@xxxxxxxxx xxxxxxxx xxx xxxx xx xxxxxxxxx xx xx xxxxxxxxxx xxxx xxxxxxxxx xxx xxxxxxxx xxxxxxxx. 
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	xxxxxxx xxxxxxxxxxx xxx xxx xxxxxxx xxx xxxxxx xx xxxxxx xx xxxxxxxxx_... xxxxxxx xx xxxxxx $xxxxxxxxxxxxx xxxxxx. 
#	xxxxxx:
#	$xxxxxxx_xxxxxxxxx: xxxx xx xxx xxxxxxxxx xxxx (xxxxxxxxxxx) xxxxx 
#			    xxx xxxxxxxx xxx xxx xxx xxxxxx. 
#	$xxxxxx:	    xxx xxxx xxxxxx xxx xxxxxxx xxxxxxxxxxx xxx xxx xxxxxxxxxx xxxxxxxx
#			    xx xxx xxxxxxxx xxxxxxx xxxxxx xxxxxx.
#	xxxxxx xxxxxx: 
#	xxxx
###############################################################################
{
    my $xxxxxxx_xxxxxxxxx = $_[0];
    $xxxxxxx_xxxxxxxxx =~ s+(.*[^/])/?$+$1/+;   # xxxxxxx xxxxxxxx xxxxx
    my $xxxxxx = $_[1];
    my $xxxxxxx_xxxxxxx = $xxxxxxx_xxxxxxxxx."DEFAULT.PFL";

    $xxxxxxxxxxxxx->XXXSystem_SystemName( "" );
    $xxxxxxxxxxxxx->XXXSystem_DBHostname( "" );

    print STDERR "Discovering \"$xxxxxxx_xxxxxxxxx\"\n";
    #### &xxxxx_xxxxxxxxx( $xxxxxxx_xxxxxxxxx );

    open( DEFAULTPROFILE, $xxxxxxx_xxxxxxx ) or warn "Cannot open default profile \"$xxxxxxx_xxxxxxx\"!\n";
    while( <DEFAULTPROFILE> ) 
    {
	# xxxxxxxxxx: xxxx xxxxxxx xxxxxxx xxxxxxx xxxx *xxxx* xx x xxxxxxx. 
	# xx xx xxx xxxxx xxxxxxx x xxxxxxxxxx xxxxxxx xxx xxxxxxx xxxx xxx; 
	# xxx xxxx xxxxxxxxxx xxxx. 
	if( m/^\s*XXXSYSTEMNAME\s*=\s*(\S+)/ )	    { $xxxxxxxxxxxxx->XXXSystem_SystemName( $1 ); }
	elsif( m/^\s*XXXDBHOST\s*=\s*(\S+)/ )	    { $xxxxxxxxxxxxx->XXXSystem_DBHostname( $1 ); }
	
    }
    close( DEFAULTPROFILE );

    # xxxxxx xxx xxxxxxxx xxxxxxxx xxxx xxxxx xxx xxxxxxxxxx xxx xxx xxx xxxxxxxx xxxx xxxx xx xxxxxxxxxx xxx xxxxxxxx xxx xxxxxxxx. 

    # xxxxxxx xxx xxxxxxxxx xxxx xxxxxxxxxxxx xxx xxx xxxxxxxxx; xxxx xx xxxxx xxxxxx xxx xxxxx 
    # xxxx xxxxxxx xxx xxxx xx xxxxx xx xxx xxxxxxx xxxxxxxxx xxx xxxxxxxxxx xxx xxxx xxxxx xx 
    # xxx xxx. 
    for( my $x = 0; $x < @xxxxxxxxx; $x++ )
    {
	$xxxxxxxxxxxxx->XXXInstance_Hostname( $xxxxxxxxx[$x] );
	my $xxxxxxxx_xxxxxxx_xxxxxxxxx_xxxxxx = $xxxxxxx_xxxxxxxxx.$xxxxxxxxxxxxx->XXXSystem_SystemName."_*_".$xxxxxxxxxxxxx->XXXInstance_Hostname;

	# xxxx1000284757: xxxxxxx xxxxxxxxxxx xx xxxxxxx xxxxxxx.
	# xxxxxxxxx xxxxxxx xxxxx xx xxxxxxx xxx xxxxxxxx xxxx xxx xx xxxxxxxxx
        $xxxxxxxx_xxxxxxx_xxxxxxxxx_xxxxxx =~ s+\\+/+g;
	
	####20040115 xxxxxxxxx xxxx xxxx xxx xxxxxxx xxxx xxxx xxxx xxxxxxx xxx
	# xxxx xxxx xxxxxxxxx xxxxx xxxxxxxxxxx xxxx xxxx xx xxxx xxxx xxxxxxxx
	# xxxx xxx xxxxxxxxx xxx xxxxxxxxxxxx xxxxxxx xxxxxxx xx xxxxxxxxx. 
	my @xxxxxxxx_xxxxxxxx = <${xxxxxxxx_xxxxxxx_xxxxxxxxx_xxxxxx}>;
	foreach my $xxxxxxxx_xxxxxxx ( @xxxxxxxx_xxxxxxxx )
	{
	    print STDERR "Found instance profile \"$xxxxxxxx_xxxxxxx\".\n";
	    discover_XXX_instance( $xxxxxxxx_xxxxxxx, $xxxxxx );
	}
    }
}

sub discover_XXX_instance( $$ )
###############################################################################
#	xxxxxxx:
#	xxxxxxxx xxxxxxxx-xxxxxxxxx xxxxxxx xxxxxxxx xxx xxx xxxxxxxxxx xxx 
#	xxxxxxxx xxx xxxxx xxx xxxxxxxx xxxxxxx xxxxxxxxxxx xxx xxxx xxxxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	xxxx
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	xxxxxxx xxxxxxxxxxx xxx xxx xxxxxxx xxx xxxxxxxx xx xxxxxx xx xxxxxxxxxxx_... xxxxxxx xx xxxxxx $xxxxxxxxxxxxx xxxxxx. 
#	xxxxxx:
#	$xxxxxxxx_xxxxxxx:  xxxx xxxx xxx xxxx xx xxx xxxxxxxx xxxxxxx
#	$xxxxxx:	    xxx xxxx xxxxxx xxx xxxxxxx xxxxxxxxxxx xxx xxx xxxxxxxxxx xxxxxxxx
#			    xx xxx xxxxxxxx xxxxxxx xxxxxx xxxxxx.
#	xxxxxx xxxxxx: 
#	xxxx
#	xxxxxxxxxx xxxxxxxxxx xxxx $xxxxxx
###############################################################################
{
    my $xxxxxxxx_xxxxxxx = $_[0];
    my $xxxxxx = $_[1];

    $xxxxxxxxxxxxx->XXXInstance_SystemName( "" );
    $xxxxxxxxxxxxx->XXXInstance_InstanceName( "" );
    $xxxxxxxxxxxxx->XXXInstance_Number( "" );
    $xxxxxxxxxxxxx->XXXInstance_Process_Dialog( 0 );
    $xxxxxxxxxxxxx->XXXInstance_Process_Update( 0 );
    $xxxxxxxxxxxxx->XXXInstance_Process_Update2( 0 );
    $xxxxxxxxxxxxx->XXXInstance_Process_Enqueue( 0 );
    $xxxxxxxxxxxxx->XXXInstance_Process_Batch( 0 );
    $xxxxxxxxxxxxx->XXXInstance_Process_Spool( 0 );

    print STDERR "Discovering instance profile \"$xxxxxxxx_xxxxxxx\"\n";
    open( INSTANCEPROFILE, $xxxxxxxx_xxxxxxx ) or warn "Cannot open instance profile \"$xxxxxxxx_xxxxxxx\"!\n";
    while( <INSTANCEPROFILE> )
    {
	# xxxxxxxxxx: xxxx xxxxxxx xxxxxxx xxxxxxx xxxx *xxxx* xx x xxxxxxx. 
	# xx xx xxx xxxxx xxxxxxx x xxxxxxxxxx xxxxxxx xxx xxxxxxx xxxx xxx; 
	# xxx xxxx xxxxxxxxxx xxxx. 
	if( m/^\s*XXXSYSTEMNAME\s*=\s*(\S+)/ )		{ $xxxxxxxxxxxxx->XXXInstance_SystemName( $1 ); }
	if( m/^\s*INSTANCE_NAME\s*=\s*(\S+)/ )		{ $xxxxxxxxxxxxx->XXXInstance_InstanceName( $1 ); }
	elsif( m/^\s*XXXSYSTEM\s*=\s*(\S+)/ )		{ $xxxxxxxxxxxxx->XXXInstance_Number( $1 ); }
	elsif( m/^\s*rdisp\/wp_no_dia\s*=\s*(\S+)/ )	{ $xxxxxxxxxxxxx->XXXInstance_Process_Dialog( $1 ); }
	elsif( m/^\s*rdisp\/wp_no_vb\s*=\s*(\S+)/ )	{ $xxxxxxxxxxxxx->XXXInstance_Process_Update( $1 ); }
	elsif( m/^\s*rdisp\/wp_no_vb2\s*=\s*(\S+)/ )	{ $xxxxxxxxxxxxx->XXXInstance_Process_Update2( $1 ); }
	elsif( m/^\s*rdisp\/wp_no_enq\s*=\s*(\S+)/ )	{ $xxxxxxxxxxxxx->XXXInstance_Process_Enqueue( $1 ); }
	elsif( m/^\s*rdisp\/wp_no_btc\s*=\s*(\S+)/ )	{ $xxxxxxxxxxxxx->XXXInstance_Process_Batch( $1 ); }
	elsif( m/^\s*rdisp\/wp_no_spo\s*=\s*(\S+)/ )	{ $xxxxxxxxxxxxx->XXXInstance_Process_Spool( $1 ); }
    }
    close( INSTANCEPROFILE );

    if( is_XXX_service_information_valid() )
    { 
	print STDERR "Discovered XXX service information is valid. \n";
	$xxxxxxxxxxxxx->trace();
	print STDERR "Writing service information through custom writer function. \n";
	eval
	{
	    &$writer();
	};
	if( $@ )
	{
	    print STDERR "Could not write service information thru \"$xxxxxx\": writer threw exception! \n";
	    die; # xx-xxxxx xxxxxxxxx
	}
    }
    else
    {
	warn "Inconsistent or insufficient service information found!\n";
    }
}

sub is_XXX_service_information_valid()
###############################################################################
#	xxxxxxx:
#	xxxxx xxx xxxxxxxxxxx xxx xxxxxxxxxxxx xx xxx xxxxxxxxxx xxxxxxx xxxxxxxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	xxxxxxx xxxxxxxxxxx xxx xxx xxxxxxx xxx xxxxxxxx xx xxxxxx xx xxxxxx $xxxxxxxxxxxxx xxxxxx. 
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	xxxx
#	xxxxxx:
#	xxxx
#	xxxxxx xxxxxx: 
#	xxxx xx xxxxxxxxxxx xx xxxxx.
###############################################################################
{
    # xxxxxxxxxx xxxxxxxx xxxx xxx xx xxxxx.
    ( $xxxxxxxxxxxxx->XXXInstance_Hostname ne "" ) and 
    ( $xxxxxxxxxxxxx->XXXSystem_SystemName ne "" ) and 
    ( $xxxxxxxxxxxxx->XXXSystem_DBHostname ne "" ) and 
    ( $xxxxxxxxxxxxx->XXXInstance_InstanceName ne "" ) and 
    ( $xxxxxxxxxxxxx->XXXInstance_Number ne "" ) and 

    # xxxx xxxx xxxxxxx xxx xxxxxxxx xxxxxxx xxxx xx xxxxx.
    # (xxxxxxxxx xx xxx xxxx xx xxxxxxxx xxxxxxx xxxx xxxx xx xxxxxxxxxxxxx xxxxxxx xx xxxxxxxxx xxxx xxxxxxxx.)
    ( $xxxxxxxxxxxxx->XXXSystem_SystemName eq $xxxxxxxxxxxxx->XXXInstance_SystemName )
}

#xxxxx xxxxx
sub get_XXX_SID_directories($)
###############################################################################
#	xxxxxxx:
#	xxxxx xxx xxxxxxxx xxx xxxxx xxx xxxxxxx xxx xxxxxxxxx xxxxx xx xxx
#	'xxxx' xxxxxx xxxx xxxxxxx xxx xxx xxx xx xxx xxxxxxxxx xxxx. 
#	xxx xxxxxx xx xxxxxxx xx 'xxxxxxxxxxxxxxxxxxxxxx.xxx'. 
#	xxx '\xxx\xxx\xxx' xxxxxxx xx xxx xxx xxx xxxx; xx xxxxx xx xx xxxx xxxxxxx, 
#	xxx xxxxxxxxx xxxxxxxx xx xx xxx xxxxxxxxx (xxx x.x. xx xxxxxx xxx 
#	'x:\xxxxxx\xx1\817\xxx') xxx xx xxxxxxxxx. 
#
#	xxxx xxxxxxx xxxx xxx xxxxx xxxxxxx xxx xxxx xx xxxxx xx xxxxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	xx xxx xxx xxxxxxxxx xxxxxx xxxxxxxx xxx xxx xx xxxx xx xxx xxxx.
#	xxxxxx xx xxxxxx xx (<xxx>:<xxxx>\x)*
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
#	xxxxxx:
#	xxxxxxxx_xxxxxx: xxxx xxxxxx xx xxx xxxxxx xx xxxxxxxxxxxxxxxxxxxxxx.xxx
#	xxxxxx xxxxxx: 
#	xxxx xx xxx xxx xxxxxxxxx xxxxx (x.x. x:/xxx/xxx/xx1/) xxxx xxxxxxxx xxxxx.
#	xxxx xxxxxxxxx xx xxxxxxx xxxxx
###############################################################################
{
    my $xxxxxxxx_xxxxxx = $_[0];
    my %xxxxx_xxxxxxxxxxx;    # xxx xx xxxxxxxxxxx xxxxx xx xxx xxxx xx xxx xxxxxxx xxxxxx xxx xxxx. 

    while( <$xxxxxxxx_xxxxxx> )
    {
	chomp;
	my $xxxxxxx_xxx;
	my $xxxx;
	if( not m/^(...)=(.*)$/ )
	{
	    # xxxxx48872
	    # xx xxx xxxxx xx xxx xxxxxxxx xxxxxxxx xxx xx xxxxxxx, xxx xxxxxx
	    # xxxx xxxx xxx xxx xxxxxxxx xxxxxxxxxx. 
	    warn( "Internal error: encountered invalid registry export format! Invalid line was \"${_}\"\n" );
	    next;
	}
	$xxxxxxx_xxx = $1;
	$xxxx = $2;

	# xxxxxxxx xxxxxxx xxx xxxxxxxx xxxx xxxxxxxxxxx;
	# xxxxxxx xxxx xx xxxxxxxx xxxxxxx xxxxxxx xx xxx xxxxx xxxxx.
	$xxxx =~ s+\\+/+g;

	# xxxxx xxx xxxxxxxxxxx xxxx xxxx xxxxxxxx xxxxxxxxx xxxxx. 
	my @xxxxxxxxxxx = split /;/, $xxxx;

	# xxxx xxx xxx xxxxxxxxx xxxxx xxxx xx xxx xxxxxxx xxx xxxxxxx xxx xx x xxxx xxxxxxxxx, 
	# xx xxxx xx xxx xxx xx '\xxx\xxx\xxx'; 
	# xxxxx xxxxxxxxxx xxx xxx xxx xxx xxxxxxxxxxx xxx xxxxxx xx xxxxx xxxxxxxxxxxx. 
	my $xxxxxxxxx;
	foreach $xxxxxxxxx (@xxxxxxxxxxx)
	{
	    # xxx xxx xxxx1000133971: xxxxxx xxxxxxx xxxxx
	    # xxxxxxxxxxx xxx xxxxx7 xxxxxxx (xxxx - 072006)
	    if(( $xxxxxxxxx =~ m+^//.*+i)) {
              if ( $xxxxxxxxx =~ m/sapmnt\/$xxxxxxx_xxx\/{1,2}SYS\/{1,2}exe\/{1,2}run/i )
              {
                $xxxxxxxxx = resolveXXXNetShare_SID($xxxxxxx_xxx,"sapmnt","\\SYS\\exe\\run");
                if ($xxxxxxxxx eq "")
                {
                  print STDERR "cannot resolve network share sapmnt, skipping...\n";
                }
                else
                {
                  # xxxx xx xx
                  $xxxxx_xxxxxxxxxxx{$xxxxxxxxx} = "";
                }
              }
              else
              {
                print STDERR "found network path other than sapmnt, skipping...\n";
              }
            }
	    elsif(( $xxxxxxxxx =~ m+.*/$xxxxxxx_xxx/sys/exe/run+i ))
	    {
		# xxxxx xxxxxxx '\xxx\xxx\xxx'
		$xxxxxxxxx =~ s+(.*/)sys/exe/run+$1+i;

		# xxx xx xxxxxxxxxxx xxxxx xx xxx xxxx xx xxx xxxxxxx xxxxxx xxx xxxx. 
		$xxxxx_xxxxxxxxxxx{$xxxxxxxxx} = "";

		print STDERR "Found XXX installation directory \"$xxxxxxxxx\" in XXX PATH. \n";
	    }
	    # xxx xxx xxxx1000133974: xxxx xxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx
	    elsif(( $xxxxxxxxx =~ m+.*/$xxxxxxx_xxx/D\d\d/exe+i ))
	    {
		# xxxxx xxxxxxx 'x??\xxx'
		$xxxxxxxxx =~ s+(.*/)D\d\d/exe+$1+i;
		# xxx xx xxxxxxxxxxx xxxxx xx xxx xxxx xx xxx xxxxxxx xxxxxx xxx xxxx. 
		$xxxxx_xxxxxxxxxxx{$xxxxxxxxx} = "";
		print STDERR "Found XXX installation directory \"$xxxxxxxxx\" in XXX PATH. \n";
	    }
	}
    }

    # xxxxxx xxxx xx xxxxxxxxxxx
    keys( %xxxxx_xxxxxxxxxxx );
}

#xxxx

sub get_XXX_SID_directories($)
###############################################################################
#	xxxxxxx:
#	xxx xxx xxx xxx xxxxx xxxxx xxx xxxx xxx xxxxxxxxxxxx xxxxxxxxx 
#	(x.x. '/xxx/xxx/'). 
#
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	xxxx
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
#	xxxxxx:
#	$xxx_xxxx_xxx:	xxxx xx xxx xxxx xxx xxxxxxxxxxxx xxxxxxxxx, xxxx xxxxxxxx xxxxx
#	xxxxxx xxxxxx: 
#	xxxx xx xxx xxx xxxxxxxxx xxxxx (x.x. /xxx/xxx/xx1/) xxxx xxxxxxxx xxxxx.
#	xxxx xxxxxxxxx xx xxxxxxx xxxxx
###############################################################################
{
    my $xxx_xxxx_xxx = $_[0];
    my $xxx_xxx_xxxxxxxxx_xxxx = $xxx_xxxx_xxx."???/";
    my @xxx_xxx_xxxxxxxxxxx = <${xxx_xxx_xxxxxxxxx_xxxx}>;
    @xxx_xxx_xxxxxxxxxxx;
}

#xxxxx

sub get_log_paths_from_XXX_SID_dir( $ )
###############################################################################
#	xxxxxxx:
#	xxx xxx xxxxxxxxx xxxx xx xxx xxx xxx xxxxxxxxx 
#	(x.x. 'x:\xxx\xxx\xx1\') xx xxxxxxx xxx xxx xxx xxxxxxxxxxx
#	(x.x. 'x:\xxx\xxx\xx1\xxxxxxx10\xxxx\'). 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	?? xxxx xx xxx xxxxxxxxx'x xxxxxx xx xxxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx.
#	xxxxxx:
#	xxx_xxx_xxx:	xxxxxxxxx xxxx
#	xxxxxx xxxxxx: 
#	xxxx xx xxxxxxxx.xxx xxxx xxxxx
#	xxxx xxxxxxxxx xx xxxxxxx xxxxx
###############################################################################
{
    my $xxxxxxxxx = $_[0];
    my @xxx_xxxxx;

    ####x xxxxxxxxxx xxxx xxxx xxxxxxxx: xx $xxx_xxxx_xxxxxx = $xxxxxxxxx."*/xxxx/xxxxxxxx.xxx";
    opendir( XXXSIDDIR, $xxxxxxxxx ) or warn "Cannot open directory \"$xxxxxxxxx\"!\n";
    my $xxxxxxxx_xxx;
    while( $xxxxxxxx_xxx = readdir( XXXSIDDIR ) )
    {
	# xxxxx xxxxxxx xxxxxxx xxxxxxxxxxxx xxxxxxxx xx xxxxxxxx xxxxxx xxxxxx.
	if( $xxxxxxxx_xxx =~ m/[DVEBMGS]*\d\d/i )
	{
	    # xxxxx xxxxxxx xxx xxx xxxx xxxxxx.
	    my $xxx_xxxx = $xxxxxxxxx.$xxxxxxxx_xxx."/work/sapstart.log";
	    if( -e $xxx_xxxx )
	    {
		print STDERR "Found sapstart.log file at \"$xxx_xxxx\"\n";
		push @xxx_xxxxx, $xxx_xxxx;
	    }
	}
    }

    @xxx_xxxxx;
}

sub get_profile_path_from_sapstart_log( $ )
###############################################################################
#	xxxxxxx:
#	xxxx xxx xxxxxx 'xxxxxxxx.xxx' xxxx xxx xxxxx xxx xxxxxxx xxxx. 
#	xxxxxxxxxxx	/ xxxxxxxxxxxxx:
#	@xxxxxxxxx xxxxxxxx xxx xxxx xx xxxxxxxxx xx xx xxxxxxxxxx xxxx xxxxxxxxx xxx xxxxxxxx xxxxxxxx. 
#	$xxxxxxxxxxxxxx xxxxx xxxxxxx xxxxxxxxx xxxxxx xx xxxxx. 
#	xxxxxxx		/ xxxxxxxxxxxxxx:
#	xxxx xxxxxxxxx xx @xxxxxxxxx.
#	xxxxxx:
#	xxxxxxxx_xxx_xxxx: xxxx xxxx
#	xxxxxx xxxxxx: 
#	xxxxxxx xxxx xx 'xxxxx' xx xxxxxxx
#	xxxx xxxxxxxxx xx xxxxxxx xxxxx
###############################################################################
{
    my $xxxx_xxxx = $_[0];
    my $xxxxx_xxxxxxx_xxxx;
    my $xxxxxxx_xxxx;
    my $xxxxxxx_xxxx;

    #### &xxxxx_xxxxxxxxxxxx( $xxxx_xxxx );
    open( XXXSTARTLOG, $xxxx_xxxx ) or warn "Cannot open \"$xxxx_xxxx\"!\n";
    while( <XXXSTARTLOG> ) 
    {
	# xxxxxxxxxx: xxxx xxxxxxx xxxxxxx xxxxxxx xxxx *xxxx* xx x xxxxxxx. 
	# xx xx xxx xxxxx xxxxxxx x xxxxxxxxxx xxxxxxx xxx xxxxxxx xxxx xxx; 
	# xxx xxxx xxxxxxxxxx xxxx. 
	if( m/^\s*Startup Profile:\s*"(.*)"/ )	    { $xxxxx_xxxxxxx_xxxx = $1; }
    }
    close( XXXSTARTLOG );

    # xxxxxxx xxxxxxxxxxx xx xxxxxxx xxxxxxx.
    $xxxxx_xxxxxxx_xxxx =~ s+\\+/+g;

    # xxxxxx xxxxx xxxxxxx xxxx xxxx xxxx xxxx xxx xxxxxxxx xxxxxxxx xxxx xx xxxxx xxxxxxx xxxx xxxx. 
    $xxxxx_xxxxxxx_xxxx =~ m/(^.*)START_[^_]*_(.*$)/ or (warn "Start profile path \"$xxxxx_xxxxxxx_xxxx\" does not conform to syntax '<SID>_<InstanceName>_<hostname>'!\n" and return undef);
    $xxxxxxx_xxxx = $1;
    $xxxxxxx_xxxx = $2 or warn "Parsed empty hostname from start profile path!\n";
    print STDERR "Found profile directory \"$xxxxxxx_xxxx\" in sapstart.log\n" unless( $xxxxxxx_xxxx eq "");

    if( $xxxxxxxxxxxxxx )
    {
	# xx xxx xxxxxxxx xx xxx xxx xx xxx xxxx xx xxxxxxxxx xx xx xxxxxxxxxx, xxx xx.
	####x: xxxxxxxx xxxx xxx xxxx xxxxxxxx xx xxxxxxxxxx xx xxxx xxxxxxx xx xxxxxxxxxxx xxxxx. 
	my %xxxx_xxxxxxxxx; 
	foreach (@xxxxxxxxx) { $xxxx_xxxxxxxxx{$_} = ""; }  # xxxxx xx xxx xxxxxxxxxxx xxxxx xxxxxxx xx xxxxxxx. 
	$xxxx_xxxxxxxxx{$xxxxxxx_xxxx} = "";	# xxxxxxxx xxx xxxxxxx xxxxxxxx. 
	@xxxxxxxxx = keys( %xxxx_xxxxxxxxx );	# xxxxxx xxxx. 
    }

    return $xxxxxxx_xxxx;
}


#- xxxxxx xxxxxxxxx -----------------------------------------------------------

sub trace_directory( $ )
###############################################################################
# xxxxxxx:
#   xxxxx xxx xxxxxxxxx xxxxxxx xx xxx xxxxxx xxxxxxxxx xx xxx xxx. 
# xxxxxxxxxxx / xxxxxxxxxxxxx:
#   ? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
# xxxxxxx / xxxxxxxxxxxxxx:
#   xxxxxx xx xxxxxx. 
# xxxxxx:
#   xxxxxxxxx_xxxx: xxxx xxxxxx xxxxxxxx
# xxxxxx xxxxxx:
#   xxxx
###############################################################################
{
    my $xxxxxxxxx_xxxx = $_[0];
#xxxxx xxxxx
    $xxxxxxxxx_xxxx =~ s+/+\\+g;
    &trace_dump( "dir \"$xxxxxxxxx_xxxx\"" );
#xxxx
    &trace_dump( "ls -l \"$xxxxxxxxx_xxxx\"" );
#xxxxx
}

sub trace_filecontents( $ )
###############################################################################
# xxxxxxx:
#   xxxxx xxx xxxxxxxx xx xxx xxxxxx xxxx xxxx xx xxx xxx.
# xxxxxxxxxxx / xxxxxxxxxxxxx:
#   ? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
# xxxxxxx / xxxxxxxxxxxxxx:
#   xxxxxx xx xxxxxx. 
# xxxxxx:
#   xxxx_xxxx:	xxxx xxxxxx xxxxxxxx
# xxxxxx xxxxxx:
#   xxxx
###############################################################################
{
    my $xxxx_xxxx = $_[0];
#xxxxx xxxxx
    $xxxx_xxxx =~ s+/+\\+g;
    &trace_dump( "type \"$xxxx_xxxx\"" );
#xxxx
    &trace_dump( "cat \"$xxxx_xxxx\"" );
#xxxxx
}

sub trace_dump( $ )
###############################################################################
# xxxxxxx:
#   xxxxxxx xxx xxxxxx xxxxxxxx xxxxxxx xxx xxxxx xxx xxxxxxx'x xxxxxx xxxxxx xx
#   xxx xxx (xxxxxxxx xx x xxxxxx xxx xxxxxx). 
# xxxxxxxxxxx / xxxxxxxxxxxxx:
#   ? xxxx xx xxx xxxxxxxx xxxxxxxx, xxxxxxx, xx xxxxx xxxxxxx xxxxx xxxxx xxxxxxx xxxx xxxxxxxxx.
# xxxxxxx / xxxxxxxxxxxxxx:
#   xxxxxx xx xxxxxx. 
# xxxxxx:
#   xxxx_xxxxxxx:  xxxxxxxx xxxxxxx xx xx xxxxxxxx. 
# xxxxxx xxxxxx:
#   xxxx
###############################################################################
{
    my $xxxx_xxxxxxx = $_[0];
    print STDERR "Dump of \"$xxxx_xxxxxxx\": \n"; 
    print STDERR "- dump -----------------------------------------------------------------------\n";
    # xxxxxxx xxxxxxxx xxxxxxxx xxxx xxx xx xxxxxxx xxxxxxxx xxxxx xxxxxx xx
    # xxxxxx xx xxx xxxxx xxxxx xx xxx xxxxxxx. 
    my $xxxx_xxxxxx = `$xxxx_xxxxxxx`;
    print STDERR $xxxx_xxxxxx;
    print STDERR "- dump end -------------------------------------------------------------------\n";
}


# xxxx xxxxxxxx xx xxxxxx xxxx xx xxxxxxx xxx xxxxx7 xxxxxxx (xxxx-072006)
#xxxxx xxxxx

#
# xxx: xxxxxxxxxxxxxxxxxx_xxx
# xxx: xxxxxxxx xx xxxxxxx x xxx xxxxxxxx xxx xxxxx (xxxxxx, xxxxxx) xx xxx
#      xxxxxxxx xxxxxxxx (xxxxx xxxxxx + xxxxxx)
#
# xxx: xxx[0] xxxxxx       - xxx xxx xx xxx xxx xxxxxx
#      xxx[1] xxxxxxxxxxxx - xxxx xx xxx xxx xxxxx
#      xxx[2] xxxxxxxxxxxx - xxxx xx xxxxxxxxx(x) xx xxxxxxxx xxx xxxxxxxxx xx xxx xxxxxxxx
#                            xx xx xxxxxxxx xx xxx xxxxxxxx xxxxxxxx (x.x. \\xxx\\xxx\\xxx)
#                            ! xxx xxxxxxxxxxx xx xxx xxxxx xxxxx
#
sub resolveXXXNetShare_SID
{
  my $xxxxxxx  = @_[0];
  my $xxxxxxxxxxxx = @_[1];
  my $xxxxxxxxxxxx = @_[2];
  my @xxx_xxxx = ();
  my $xxx_xxxxxx = "net share";
  my $xxxx2xxxxx;
  my $xxx_xxxxxx;
  my $xxxxxxxxx;
  my $xxxxxxxxxxxx = "";

  @xxx_xxxx = `$xxx_xxxxxx`;
  foreach $xxxx2xxxxx (@xxx_xxxx)
  {
    if ( $xxxx2xxxxx =~ m/^\s*$xxxxxxxxxxxx\s*([A-Z]):\\(usr\\sap|\s*)/i )
    {
      # xxxxxxx xxx xxxxx xxxxxx (xxxxxxxx) xxxx xxx xxxx
      $xxx_xxxxxx = $1;
      $xxxxxxxxxxxx = $xxx_xxxxxx . ":\\usr\\sap\\" . $xxxxxxx;
      $xxxxxxxxx = $xxxxxxxxxxxx . $xxxxxxxxxxxx;
      # xx xxxx xxx xxxxxxxxx ?
      if ( -e $xxxxxxxxx && -d $xxxxxxxxx )
      {
        #xxxxxxxxxx xxxxxxxxxxx
        $xxxxxxxxxxxx =~ s+\\+/+g;
        #xxx xxxxxxxx / xx xxx xxxxxxx xxxxx
        $xxxxxxxxxxxx =~ s+(.*[^/])/?$+$1/+;
	print STDERR "resolved network share $xxxxxxxxxxxx to: $xxxxxxxxxxxx\n";
        return $xxxxxxxxxxxx;
      }
      else
      {
        $xxxxxxxxxxxx = "";
      }
    }
  }
  return $xxxxxxxxxxxx;
}

#xxxxx

1;
