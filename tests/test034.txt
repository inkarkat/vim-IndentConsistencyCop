/* vim: set ft=c: */
/* Inconsistent. */
/*--------------------------------------------------------------------------*/
/* xxxxxxxx xxxxxxxxxxx                                                     */
/*--------------------------------------------------------------------------*/
#include <xxx/xxxxx.x>
#include <xxxxx.x>
#include <xxxxxx.x>
#include <xxxxxx.x>
#include <xxxxxx.x>
#include <xxxxx.x>
#include <xxxx.x>
#include <xxxxxx.x>
/**** xxx xxx xxxxx71355 ****/
#include <xxxxxx.x>

/*--------------------------------------------------------------------------*/
/* xxxxxxxxxxx                                                              */
/*--------------------------------------------------------------------------*/
#ifdef WIN32
#include "xxxxxx.x"
#include "xxxxxxx.x"
#endif
#include "xxxxxxxx.x"




#include "x3xxxx.x"
#include "xxxxxx.x"
#include "xxxxx.x"
#include "xxxxxxx.x"

#include "x3xxxxx.x"

/* xxx xxx xxxxxxxxx xx x3xxxxx*/
#include "xxxxxxx.x"
#include "xxxxxx.x"
#include "xxxxxxx.x"
#include "xxxxxxxxxxxxxx.x"

char *xxxxxx = xxxx;
char* xxxxxxxx = xxxx;
xxx_xx xxx_xx;
static char xxxx[256];
static char* xxxxxxxxxxxxxxxxxxx = "xxx";
/*xxxxxx xxx xxxxxxxxxxx; xxxxxx xxx xxxxx xx xx xxx */

/* xxxxxxx xxx x/3 xxxxxxx */
static char xxxxxxxxx[10] = "";

/* xxxx xxx xxx xxxxxxxxxxxxx */
extern int xxxxxxx_xxx; /* xxxxx xxx xxxxx xxxxxxx xxxx xxx xxx xxxxxxxxxxxxx */
extern int xxxxxxx_xxxx; /* xxxxx xxx xxxxxxxx xx x xxxxxxx xxx xxx xxx xxxxxxxxxxx */
extern char xxxxxxxxxxxx[61]; /* xxxx xx xxxxxxx xxx */

/* xxxxxx xxxxx *xxxx_xxx_xxxxx;
xxxxxx xxxx  *xxxx_xxx_xxxx; */

static void xxx_xxxxx(xxx_xxxxxxxxx *xxx_xxxxx,
					  char      *xxxx_xxxxx_xxxx,
					  unsigned  xxxx_xxxx,
					  void      *xxxx_xxxx,
					  unsigned 	xxxx_xxx);

void xxxxxxxxxxxxxxxxxxx( xxxxx* );


#define MAX_ALERT_CHUNK 1024

/* xxxxxxx xxx xxx xxxxxx xxxxxx xx xxxxxxxx xxxxxxxxx */
#define INVALID 0
#define VALID 1
#define SID_IS_LOCAL 2
#define SID_IS_NOT_LOCAL 3

/*---------------------------------------------------------------------------
** xxxxxx xxxx
xxxxxx xxxx* xxxxxxxxx;
**-------------------------------------------------------------------------*/
static char* xxxxxxxxxxxxx;
static char* xxxxxxxxxx;
static char* xxxxxxxxxx;
/* xxxxxx xxxx* xxxxxxxxxxxxx; */
static int xxxxxxxxxx = 120; /* 120 xxxxxxx xxxxxx x xxx xxxxxxx xx xxxxxxx */

/* xxx xxx xxxx1000209956 / xxxx1000214383                                       ***/
/* xxxx xxxx xx xxxx xxxxxxx xx xxx xxxxxx xxx xxx xxxxxx xx xxx xxx xxxx xxx.xx ***/
/* xx xxx xxxxx xxx xx xxxxx "xxxxxx xxx", "xxxxxx xxxxxxx" xx "xxxxxx xxxxxx"   ***/
/* xxx xxxx xxxx xxxxx xxx xxxxx xx xxx. xxx xxxxx xx xxx xx xxx xxxx xxxx       ***/

/* xxx xxx xxxx1000294598 */
extern xxxxxxxxxxxxxxx;


static int xxxxxxxxxxxxxx = 1;
#define XMI_MODE "xxxxxxxxxxxxx"
int xxx_xxxx = 0;


xxxxxxxx_xxxxxx xxxxxxxx[xxx_xxxxxxxx];
int             xxxxxxxxxxx;

xxxxx_xxxx_xxxxxx xxxxxxxxx[xxx_xxxxx_xxxx];
int               xxxxxxxxxxxx  = 0;

xxxxx_xxxxxxx_xxxxxx  xxxxxxxx[xxx_xxxxxx_xx+1];
int            xxxxxxxxxxx = 0;

xxxxx_xxxxxxx_xxxxxx  xxxxxxxxxxx[xxx_xxxxxx_xx+1];
int            xxxxxxxxxxxxxx = 0;

xxxxx_xxxxxx_xxxxxx xxxxxxxxxxx[xxx_xxxxx_xxxx];
int            xxxxxxxxxxxxxx = 0;

xxxxxxx_xxx_xxxxxx xxxxxxxxxx[xxx_xxxx_xxxx];
int				xxxxxxxxxxxxx = 0;

xxxxxxx_xxx_xxxxxx xxxxxxxxxxxxxx[xxx_xxxx_xxxx];
int				xxxxxxxxxxxxxxxxx = 0;

xxxxxxxxxxx_xxxxxx xxxxxxxxxxx[xxx_xxxxxxxxxxx];
int				xxxxxxxxxxxxxx = 0;

xxxxxx_xxxx_xxxxxx xxxxxxxxxxx[xxx_xxxxxx_xxxxx];
int				xxxxxxxxxxxxxx = 0;

/* xxxx xxx */
xxxxx_x  xxxxxxxxxxxxx;

/* xxxx xxx xx xxxxxxxx xxxxxxxx */

#define MAX_EXPORTPARAMS 6
#define MAX_IMPORTPARAMS 4
#define MAX_TABLES 4

#define xxxxxxx(var,str) xxxxxxx(str,"%.*s",sizeof(var),var)
#define xxxxxx(var,str) xxxxxxx(str,"%ld",var);
#define xxxxxxx(var,str) xxxxxxx(str,"%.*s",sizeof(var),var)
#define xxxxxxx(var,str) xxxxxxx(str,"%.*s",sizeof(var),var)

static xxx_xxxxxx xxx_xxxxxx;
static xxx_xxxxxxxxx xxxxxxxxx[xxx_xxxxxxxxxxxx + 1];
static xxx_xxxxxxxxx xxxxxxxxx[xxx_xxxxxxxxxxxx + 1];
static xxx_xxxxx xxxxxx[xxx_xxxxxx + 1];

extern unsigned char* xxxxxxxxx (unsigned char* xxxxxxxxxx);
static void xxx_xxxx_xxxx_xxxxxxxx xxx_xxxxx(char *xxxxxxxxx,  xxxxx *x);

void xxxx(const char *xxxx,const unsigned xxx,const unsigned xxx,char *xxx)
{
	if (xxxxx.xxxxxxx) {
		xxxxxxx(xxxxx.xxxxxxx,"=%s >>> %s\n",xxxx,xxx);
		xxxxxx  (xxxxx.xxxxxxx);
	}
}


char* xxxxx(char* xxx)
{
   char* xxx = xxx;

   while ( *++xxx);
   for ( xxx--; xxx >= xxx ; xxx--)         /* xxxxxx xxxxxx */
        if ( *xxx == ' ' || *xxx == '\t' ) *xxx = '\0';
        else break;

  return xxx;
}

char* xxxxx(char* xxx)
{
   char* xxx = xxx;

   while ( *xxx && (*xxx == ' ' || *xxx == '\t'))
	   xxx++;

  return xxx;
}

/*--------------------------------------------------------------------*/
/* xxxxxxxxxxxx                                                        */
/*--------------------------------------------------------------------*/
static void xxxxxxxxxxxx()
{

#ifdef WIN32
   xxxxx xxxxxx[256];
   xxxxx xxxxxx=256;
   int x;
#endif

#ifdef _DEBUG
   xxxxxxx(xxxxxx, "xxxxxxxxxxxx\n");
#endif

   if (!xxxxxx (xxxx, "")) {
#ifdef WIN32
           xxxxxxxxxxxxxxx (xxxxxx, &xxxxxx);
           for (x = 0; x <= (int)xxxxxx; x++) {
                   if (xxxxxxx(xxxxxx[x]))
                           xxxx[x] = xxxxxxx(xxxxxx[x]);
                   else
                           xxxx[x] = xxxxxx[x];
           }
#else
           xxxxxxxxxxx (xxxx, sizeof (xxxx));
#endif
   }

#ifdef _DEBUG
   xxxxxxx(xxxxxx, "xxxxxxxxxxxx: xxxx=%s\n", xxxx);
#endif

   return;

}

/*--------------------------------------------------------------------*/
/* xxxxx xxxxxxx xxxxxxx xx x xxx-xxxxx                               */
/* xxxxxxx xx xxxxxxx xxx xxxxxxxx xxxx xxx xx xxxxxxx xx xxxxxx      */
/*--------------------------------------------------------------------*/
static void xxx_xxxx_xxxx_xxxxxxxx xxx_xxxxx(char *xxxxxxxxx, xxxxx *x)
{
    xxx_xxxxx_xxxx xxxxx_xxxx;
	char xxx[1024];
	char *xxxxxxxxx;

	xxxxxx(&xxxxx_xxxx, 0, sizeof(xxxxx_xxxx));

	xxxxxxxxxxxx(&xxxxx_xxxx);

  if (xxxxx.xxxxxxx)
  {
	  if (xxxxxxxx != xxxx)
		  xxxxxxx(xxxxx.xxxxxxx, "\nxxxxxxxx: %s", xxxxxxxx);

	  if (xxxxxx != xxxx)
		  xxxxxxx(xxxxx.xxxxxxx, "\nxxxxxxxxx: %s", xxxxxx);


	  switch (xxx_xx) {
	  case xxx_xxxxxxx:
		  xxxxxxxxxxxx(&xxxxx_xxxx);
		  if (xxxxx.xxxxxxx) {
			  xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxx    : %s\n", xxxxx_xxxx.xxx);
			  xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxxxxx : %s\n", xxxxx_xxxx.xxxxxx);
			  xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxxxxxx: %s\n", xxxxx_xxxx.xxxxxxx);
			  xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxxxxxx: %s\n", xxxxx_xxxx.xxxxxxx);
			  xxxxxx  (xxxxx.xxxxxxx);
		  }
		  xxxxxxx (xxx, "xxxxxx: %s xx=%s xxxx=%s xxxx=%s",
  			xxxxx_xxxx.xxxxxxx,
	  		x->xx,
		  	x->xxxx,
			  x->xxx);
        xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
		  xxxxxxxxx (xxx_xxx_xxxxxxxx,
			  xxx_xxxxxxxxxxx_x3,
  			"xxx/xxx",
	  		xxx,
		  	"x3_xxxx",
			  xxxxxxxxx);
		  break;
	  case xxx_xxxxxxxxx:
		  xxxxxxx (xxxxx.xxxxxxx, "xxx xxxx xxxxxxxxx: %s\n", xxxxxx);
  		break;
	  case xxx_xxx_xxxxxxxxx:
		  xxxxxxx (xxxxx.xxxxxxx, "xxx xxxx xxxxxxxxx: %s\n", xxxxxx);
  		xxxxxxxxxxxx(&xxxxx_xxxx);
	  	xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxx    : %s\n", xxxxx_xxxx.xxx);
		  xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxxxxx : %s\n", xxxxx_xxxx.xxxxxx);
  		xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxxxxxx: %s\n", xxxxx_xxxx.xxxxxxx);
	  	xxxxxxx(xxxxx.xxxxxxx, "xxx xxxx xxxxx.xxxxxxx: %s\n", xxxxx_xxxx.xxxxxxx);

		  xxxxxxx (xxx, "xxxxxx: %s xx=%s xxxx=%s xxxx=%s",
			  xxxxx_xxxx.xxxxxxx,
  			x->xx,
	  		x->xxxx,
		  	x->xxx);

        xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
  		xxxxxxxxx (xxx_xxx_xxxxxxxx,
	  		xxx_xxxxxxxxxxx_x3,
		  	"xxx/xxx",
			  xxx,
  			"x3_xxxx",
	  		xxxxxxxxx);

  		break;
	  default:
  		xxxxxxx (xxxxx.xxxxxxx, "xxx xxxx xxxxxxxxx: xxxxxxx xxxxx\n");
	  	break;
    }
	}

	xxxxxxxx(xxx_xxxxxx_xxxx);
}

/*----------------------------------------------------------------*/
/* xxx xx xxx xxxxxxxxxx                                       */
/*----------------------------------------------------------------*/
static void xxx_xxxxx(xxx_xxxxxxxxx *xxx_xxxxx,
	       char       	  *xxxx_xxxxx_xxxx,
	       unsigned  	  xxxx_xxxx,
	       void      	 *xxxx_xxxx,
	       unsigned 	xxxx_xxx)
{
  xxx_xxxxxxxxx *x = xxx_xxxxx;

  x->xxxx = (void *)xxxx_xxxxx_xxxx;
  x->xxxx = xxxx_xxxxx_xxxx == xxxx ? 0 : xxxxxx(xxxx_xxxxx_xxxx);
  x->xxxx = xxxx_xxxx;
  x->xxxx = xxxx_xxxx;
  x->xxxx = xxxx_xxx;

  /* xxxx xxxx xxxxxxxxx xxx xx xxxx xxxxxxxxx */

  x++;
  x->xxxx = xxxx;
  x->xxxx = 0;
  x->xxxx = 0;
  x->xxxx = xxxx;
  x->xxxx = 0;

  return;
}


int xxx_xxxxxxxxxxxx(RFC_HANDLE rfc_handle, xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxx xxxxxx[], xxxxx *x)
{
	char xxx[1024];
	char *xxxxxxxxx;

	time_t xxxxx_x, xxx_x;

	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "xxxxxxxxxxxxxx %s xxxxxx\n", xxxxxxxx);
		xxxxxx  (xxxxx.xxxxxxx);
	}

	xxx_xx = xxxxxxx(xxx_xxxxxx, xxxxxxxx, xxxxxxxxx, xxxxxx);

	if (xxx_xx != xxx_xx) {

		if (xxxxx.xxxxxxx) {
			xxxxxxx (xxxxx.xxxxxxx, ">>> xxxxx: xxx'x xxxx xxx xxxxxxxxxx\n");
			xxxxxx  (xxxxx.xxxxxxx);
		}
		/*
        xxxxxxx (xxx, "xxxxxx: %x xx=%x xxxx=%x xxxx=%x xxx=%x xxxxxxxx=%x xxxxxx=%x xxxxxx=%x",
                "xxxxxx xx xxx xxxxxxxxx.",
                x->xx,
                x->xxxx,
                x->xxx,
                "xxx",
                "xxx",
                "xxx",
                "xxx");
        xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
		xxxxxxxxx (xxx_xxx_xxxxxxxx,
			xxx_xxxxxxxxxxx_x3,
			"xxxxxxxxxx",
			xxx,
			"x3_xxxxx",
			xxxxxxxxx);
			*/
		return FALSE; /* xxx'x xxxxxxx xx xxxxxx */
	}

	xxxxx_x = xxxx(xxxx);
	do
	{
		xxx_xx = xxxxxxxxx (xxx_xxxxxx);

		if (xxx_xx == xxx_xxxxx)
#ifdef WIN32
		xxxxx(10); /*10 xxxxx xxxxxxx*/
#else
		 xxxxx(1);
#endif

		xxx_x = xxxx(xxxx);

		if ( xxxxxxxx(xxx_x, xxxxx_x) > xxxxxxxxxx) /* xxxx xxxxxxxxxx xxxxxxx */
		{
			if (xxxxx.xxxxxxx) {
				xxxxxxx (xxxxx.xxxxxxx, ">>> xxxxx: xxx xxxxxxx xxxxxxx\n");
				xxxxxx  (xxxxx.xxxxxxx);
			}

			xxxxxxx (xxx, "xxxxxx: xxxxxx xxxx'x xxxxxxxxxx xx %d xxxxxxx. xx=%s xxxx=%s xxxx=%s xxx=%s xxxxxxxx=%s xxxxxx=%s xxxxxx=%s",
				xxxxxxxxxx,
				x->xx,
                x->xxxx,
                x->xxx,
                "xxx",
                "xxx",
                "xxx",
                "xxx");
            xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
			xxxxxxxxx (xxx_xxx_xxxxxxxx,
				xxx_xxxxxxxxxxx_x3,
				"xxxxxxxxxx",
				xxx,
				"x3_xxxxx",
				xxxxxxxxx);
			return FALSE;
		}
	} while (xxx_xx == xxx_xxxxx);

	/* xxxxxxx xxxxxxx */
	xxx_xx = xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxx, &xxxxxx);

	switch (xxx_xx) {
		case xxx_xxx_xxxxxxxxx :
		case xxx_xxxxxxxxx :

		   xxx_xxxxx(xxxxxx, x);
		   return FALSE;
	}

	return TRUE;
}


int xxxx_xxxxxxxxxxxxxxxx(RFC_HANDLE rfc_handle, xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxx xxxxxx[], xxxxxxx2* xxxxxxx, xxxxx *x)
{

	char xxx[1024], xxx1[1024];
	time_t xxxxx_x, xxx_x;
	char* xxxxxxxxx;

	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "xxxxxxxxxxxxxx %s xxxxxx\n", xxxxxxxx);
		xxxxxx  (xxxxx.xxxxxxx);
	}

	xxx_xx = xxxxxxx(xxx_xxxxxx, xxxxxxxx, xxxxxxxxx, xxxxxx);

	if (xxx_xx != xxx_xx) {

		if (xxxxx.xxxxxxx) {
			xxxxxxx (xxxxx.xxxxxxx, ">>> xxxxx: xxx'x xxxx xxx xxxxxxxxxx\n");
			xxxxxx  (xxxxx.xxxxxxx);
		}
		/*
        xxxxxxx (xxx, "xxxxxx: %x xx=%x xxxx=%x xxxx=%x xxx=%x xxxxxxxx=%x xxxxxx=%x xxxxxx=%x",
                "xxxxxx xx xxx xxxxxxxxx.",
                x->xx,
                x->xxxx,
                x->xxx,
                "xxx",
                "xxx",
                "xxx",
                "xxx");
        xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
		xxxxxxxxx (xxx_xxx_xxxxxxxx,
			xxx_xxxxxxxxxxx_x3,
			"xxxxxxxxxx",
			xxx,
			"x3_xxxxx",
			xxxxxxxxx);
			*/
		return FALSE; /* xxx'x xxxxxxx xx xxxxxx */
	}

	xxxxx_x = xxxx(xxxx);
	do
	{
		xxx_xx = xxxxxxxxx (xxx_xxxxxx);

		if (xxx_xx == xxx_xxxxx)
#ifdef WIN32
		xxxxx(10); /*10 xxxxx xxxxxxx*/
#else
		xxxxx(1);
#endif

		xxx_x = xxxx(xxxx);

		if ( xxxxxxxx(xxx_x, xxxxx_x) > xxxxxxxxxx) /* xxxx xxxxxxxxxx xxxxxxx */
		{
			if (xxxxx.xxxxxxx) {
				xxxxxxx (xxxxx.xxxxxxx, ">>> xxxxx: xxx xxxxxxx xxxxxxx\n");
				xxxxxx  (xxxxx.xxxxxxx);
			}

			xxxxxxx (xxx, "xxxxxx: xxxxxx xxxx'x xxxxxxxxxx xx %d xxxxxxx. xx=%s xxxx=%s xxxx=%s xxx=%s xxxxxxxx=%s xxxxxx=%s xxxxxx=%s",
				xxxxxxxxxx,
				x->xx,
                x->xxxx,
                x->xxx,
                "xxx",
                "xxx",
                "xxx",
                "xxx");
	        xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
   		    xxxxxxxxx (xxx_xxx_xxxxxxxx,
				xxx_xxxxxxxxxxx_x3,
				"xxxxxxxxxx",
				xxx,
				"x3_xxxxx",
				xxxxxxxxx);
			return FALSE;
		}
	} while (xxx_xx == xxx_xxxxx);

	/* xxxxxxx xxxxxxx */
	xxx_xx = xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxx, &xxxxxx);

	switch (xxx_xx) {
		case xxx_xxx_xxxxxxxxx :
		case xxx_xxxxxxxxx :

		   xxx_xxxxx(xxxxxx, x);
		   return FALSE;
	}

	/**** xxx xxx xxxx1000212006 ************************/
	if (xxxxxxx->xxxx[0] != 'x' && xxxxxxx->xxxx[0] != ' ' && xxxx(xxxxx(xxxxxxx->xxxxxx)) != 367 && xxxx(xxxxx(xxxxxxx->xxxxxx)) != 596){
		/* xxx xxx xxxxx52399/xxxxx57546: xx xxx xxxxxxx xxxx xxxxxxx xxxx xx xxxxx xx xxxx */
		/* (x.x. xxxx xxxxxx = 367) */

		xxxxxxx(xxx, xxxxxxx->xxxxxxx, sizeof (xxxxxxx->xxxxxxx));
		xxx[sizeof (xxxxxxx->xxxxxxx)] = '\0';

		if (xxxxx.xxxxxxx) {
			xxxxxxx (xxxxx.xxxxxxx, ">>> xxxxx: %s\n", xxxxx(xxx));
			xxxxxx  (xxxxx.xxxxxxx);
		}

		xxxxxxx (xxx1, "xxxxxx: %s %s xx=%s xxxx=%s xxxx=%s",
			xxxxx(xxxxxxx->xxxx),
			xxx,
			x->xx,
            x->xxxx,
			x->xxx);
        xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
		xxxxxxxxx (xxx_xxx_xxxxxxxx,
			xxx_xxxxxxxxxxx_x3,
			"xxx/xxx",
			xxx1,
			"x3_xxxx",
			xxxxxxxxx);

		return FALSE;
	}

	return TRUE;
}


int xxxx_xxxxxxxxx(RFC_HANDLE rfc_handle, xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxx xxxxxx[], xxxxx *x) {

	char xxxxxxx[32];
	char xxxxx[32];
	char xxxxx_xxxxx[4];
	char xxxxxxx[4];
	char xxxxxxx_xx[25];
	xxxxxxx2 xxxxxxx;

	/********************* xxxxx xxxx xx xxxxxxxx xxxxxxxxxxxxxxx xxxxxxxxx xxx/xxx *******************/
	xxxxxxxx="xxxx_xxx_xxxxx";

	xxxxxx(xxxxxxx, "xxxxxxx xxxxxxx");
	xxxxxx(xxxxx,"x3xxxxx");
	xxxxxx(xxxxx_xxxxx,"xxx");
	xxxxxx(xxxxxxx,"1.0");

	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxxxx", xxxx, &xxxxxxx, xxxxxx(xxxxxxx));
	xxx_xxxxx(&xxxxxxxxx[1], "xxxxxxxxxx", xxxx, &xxxxx, xxxxxx(xxxxx));
	xxx_xxxxx(&xxxxxxxxx[2], "xxxxxxxxx", xxxx, &xxxxx_xxxxx, xxxxxx(xxxxx_xxxxx));
	xxx_xxxxx(&xxxxxxxxx[3], "xxxxxxx", xxxx, &xxxxxxx, xxxxxx(xxxxxxx));

	xxxxxxxxx[4].xxxx = xxxx;

	/* xx xxxxx ---> xxxxxxxxx xxxxx */
	xxxxxx[0].xxxx = xxxx;

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
                               xxxxxxxxxxxxx2,
                               xxxxxxx(xxxxxxxxxxxxx2),
                               &xxxxxxxxxxxxxxx2);
	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxxx", xxxx, &xxxxxxx_xx, 24);
    xxx_xxxxx(&xxxxxxxxx[1], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
	xxxxxxxxx[2].xxxx = xxxx;

    if (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == FALSE)
		return FALSE;

	return TRUE;
}


int xxxx_xxxxxxxxxx(RFC_HANDLE rfc_handle, xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxxxxxx xxxxxxxxx[], xxx_xxxxx xxxxxx[], xxxxx *x)
{

	char xxxxx_xxxxx[4];
	xxxxxxx2 xxxxxxx;

    /********************* xxxxxx xxxx xx xxx *******************/

	xxxxxxxx = "xxxx_xxx_xxxxxx";

	xxxxxx(xxxxx_xxxxx,"xxx");
	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxxx", xxxx, &xxxxx_xxxxx, 3);
	xxxxxxxxx[1].xxxx = xxxx;
    xxx_xxxxx(&xxxxxxxxx[0], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
	xxxxxxxxx[1].xxxx = xxxx;

	/* xx xxxxx ---> xxxxxxxxx xxxxx */
	xxxxxx[0].xxxx = xxxx;

	xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x);

/*	xxxxxxxx(xxxxxx[0].xxxxxxxx); */
	xxxxxxxx(xxx_xxxxxx);
	return TRUE;
}


int xxxx_xxxx_xxxxxx_xxx_xxxxxxx(char*  xxxxxxxxxxxxxxxxx, xxxx_x xxxxxxxxxxx, xxxxxxx_xxx_xxxxxx* xxxxxxxxxx, xxxxx *x) {

   /* xxxxxxxxxx_xxxxxxxx xxxxxxxxxxxxx; */
   xxxxxxxxxx xxxxxxxxxxxx;
   /* xxxxxxxxxx_xxxxxxxxx xxxxxxxxxxxxxx; */
   xxxxxxx2 xxxxxxx;
/*
 xxxxxxxxxx *xxxxxxxxxx;
   xxxx x[1024];
   xxx xxxxxx;
*/
   /* xxxxxxxxxxxxx = 0; */
   xxxxxx(xxxxxxxxxxxx.xxxxxxxx, ' ', sizeof(xxxxxxxxxxxx.xxxxxxxx));
   xxxxxxx(xxxxxxxxxxxx.xxxxxxxx, xxxxxxxxxx->xxxxxxx, xxxxxx(xxxxxxxxxx->xxxxxxx));
   xxxxxx(xxxxxxxxxxxx.xxxxxx, ' ', sizeof(xxxxxxxxxxxx.xxxxxx));
   xxxxxxx(xxxxxxxxxxxx.xxxxxx, xxxxxxxxxx->xxxxxxxxxx, xxxxxx(xxxxxxxxxx->xxxxxxxxxx));

   if (xxxxx.xxxxxxx) {
         xxxxxxx (xxxxx.xxxxxxx, "xxxxxxx xxxx xxxx xxxx: xxxxxxx xxx:'%s' xxxxxxx:'%s'\n", xxxxxxxxxx->xxxxxxxxxx, xxxxxxxxxx->xxxxxxx);
		 xxxxxx (xxxxx.xxxxxxx);
   }

   /* xxxxxxxxxxxxxx = 1; */

   xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
                                xxxxxxxxxxxxxxxx,
                                xxxxxxx(xxxxxxxxxxxxxxxx),
                                &xxxxxxxxxxxxxxxxxx);
    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}


    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
                               xxxxxxxxxxxxx2,
                               xxxxxxx(xxxxxxxxxxxxx2),
                               &xxxxxxxxxxxxxxx2);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
                               xxxxxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxxxxx);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

  /* xxxxxx xxxxxx xxxxxx */

  xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxx_xxxx_xxxx", xxxx, xxxxxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxxxxxxx));
/*  xxx_xxxxx(&xxxxxxxxx[1], "xxx_xxxx_xxxxx", xxxxxx, &xxxxxxxxxxxxx, xxxxxx(xxxxxxxxxx_xxxxxxxx));*/
  xxx_xxxxx(&xxxxxxxxx[1], "xxxxxxx_xxxx", xxxxxxxxxxxxxxxxxx, &xxxxxxxxxxxx, sizeof(xxxxxxxxxx));
/*  xxx_xxxxx(&xxxxxxxxx[3], "xxx_xx_xxx_xxxxx", xxxxxx, &xxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxx_xxxxxxxxx));*/
  xxxxxxxxx[2].xxxx = xxxx;
  xxx_xxxxx(&xxxxxxxxx[0], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
  xxxxxxxxx[1].xxxx = xxxx;

  /* xxxxxx xxxxxxxx xxxxxx */

  xxxxxx[0].xxxx     = "xxxx_xxxxx";
  xxxxxx[0].xxxx     = 10;
  xxxxxx[0].xxxx     = xxxxxxxxxxxxxxxxxx;
  xxxxxx[0].xxxxxxxx = xxxxxxxxxxx;
  xxxxxx[1].xxxx = xxxx;

  /* xxxx xxxx xxxxxxxx xxxx xxxx */
  xxxxxxxx = "xxxx_xxxxxx_xxx_xxxxxxx";

  if (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == FALSE)
 	return FALSE;
/*
  xxx (xxxxxx = 1; ; xxxxxx++)
	{
		xxxxxxxxxx =  xxxxxxxxx(xxxxxxxxxxx,xxxxxx);

		xx (xxxxxxxxxx == xxxx) xxxxx;

        xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
        xxxx("xxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxx,x);
        xxxx("xxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
        xxxx("xxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
        xxxx("xxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
  		xxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
        xxxx("xxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
        xxxx("xxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
        xxxx("xxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
	}
*/
  return TRUE;
}


/*
------------------------------------------------------------------------

  xxxx xxxxxxxx xxxx_xxxxxx_xx_xxxxxxx
      xxxxxxxxx
        xxxxxxxx_xxxx_xxxx xxxx xxxxxxxxxx_xxxxxxx  xxxx xxx_xxxx xxxxxx 16
      xxxxxxxxx
        xxxxxx xxxxxxxxx xxxxxxx2 xxxxxx 548 xxxxxx xx xxxxxx 14
      xxxxxx
        xxxxxxx_xxxx xxxxxxxxx xxxxxxxxxx xxxxxx 60 xxxxxx xx xxxxxx 1
      xxxxxxxxxx

------------------------------------------------------------------------
*/
int xxxx_xxxx_xxxxxx_xx_xxxxxxx(char*  xxxxxxxxxxxxxxxxx, xxxx_x xxxxxxxxxxxxx, xxxxx *x) {

	xxxxxxx2 xxxxxxx;

	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "xxxxxxx xxx xxxxx xxxxxxx xxxx\n");
		xxxxxx (xxxxx.xxxxxxx);
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
		xxxxxxxxxxxxxxxx,
		xxxxxxx(xxxxxxxxxxxxxxxx),
		&xxxxxxxxxxxxxxxxxx);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
		xxxxxxxxxxxxx2,
		xxxxxxx(xxxxxxxxxxxxx2),
		&xxxxxxxxxxxxxxx2);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	/* xxxxxx xxxxxx xxxxxx */

	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxx_xxxx_xxxx", xxxx, xxxxxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxxxxxxx));
	xxxxxxxxx[1].xxxx = xxxx;
	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
	xxxxxxxxx[1].xxxx = xxxx;

	/* xxxxxx xxxxxxxx xxxxxx */

	xxxxxx[0].xxxx     = "xxxxxxx_xxxx";
	xxxxxx[0].xxxx     = 12;
	xxxxxx[0].xxxx     = xxxxxxxxxxxxxxxxxx;
	xxxxxx[0].xxxxxxxx = xxxxxxxxxxxxx;

	xxxxxx[1].xxxx = xxxx;

	/* xxxx xxxx xxx xxxxxxx xxxx xxxx */
	xxxxxxxx = "xxxx_xxxxxx_xx_xxxxxxx";

	if (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == FALSE)
		return FALSE;

	return TRUE;
}


int xxxx_xxxx_xxxxxx_xxx_xxxxxxx(char*  xxxxxxxxxxxxxxxxx, xxxx_x xxxxxxxxxxxxxx, char* xxxxxxxxxxxx, xxxxx *x) {

	xxxxxxxxxx xxxxxxxxxxxxxxx;
	xxxxxxx2 xxxxxxx;

	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "xxxxxxx xxx xxxxxxxx xx x xxxxxxx xxx");
		xxxxxx (xxxxx.xxxxxxx);
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
		xxxxxxxxxxxxxxxx,
		xxxxxxx(xxxxxxxxxxxxxxxx),
		&xxxxxxxxxxxxxxxxxx);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
		xxxxxxxxxxxxxxxx,
		xxxxxxx(xxxxxxxxxxxxxxxx),
		&xxxxxxxxxxxxxxxxxx);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
		xxxxxxxxxxxxx2,
		xxxxxxx(xxxxxxxxxxxxx2),
		&xxxxxxxxxxxxxxx2);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	/* xxxxxx xxxxxx xxxxxx */

    xxxxxx(xxxxxxxxxxxxxxx.xxxx, ' ', sizeof(xxxxxxxxxxxxxxx.xxxx));
    xxxxxxx(xxxxxxxxxxxxxxx.xxxx, xxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxx));

    xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxx_xxxx_xxxx", xxxx, xxxxxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxxxxxxx));
	xxx_xxxxx(&xxxxxxxxx[1], "xxxx_xxx_xxxx", xxxxxxxxxxxxxxxxxx, &xxxxxxxxxxxxxxx, sizeof(xxxxxxxxxx));
	xxxxxxxxx[2].xxxx = xxxx;
	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
	xxxxxxxxx[1].xxxx = xxxx;

	/* xxxxxx xxxxxxxx xxxxxx */

	xxxxxx[0].xxxx     = "xxxxxxx_xxxxx";
	xxxxxx[0].xxxx     = 13;
	xxxxxx[0].xxxx     = xxxxxxxxxxxxxxxxxx;
	xxxxxx[0].xxxxxxxx = xxxxxxxxxxxxxx;
	xxxxxx[1].xxxx = xxxx;

	/* xxxx xxxx xxx xxxxxxx xxxx xxxx */
	xxxxxxxx = "xxxx_xxxxxx_xxx_xxxxxxx";

	if (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == FALSE)
		return FALSE;

	return TRUE;
}


int xxxx_xxxx_xxxxxx_xxxxx_xxxxxxxxxxx(char*  xxxxxxxxxxxxxxxxx, xxxxxxx *xxxx, xxxxx *x) {

	xxxxxxx2 xxxxxxx;

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx",
						   xxxxxxxxxxxxx,
						   xxxxxxx(xxxxxxxxxxxxx),
						   &xxxxxxxxxxxxxxx);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
						   xxxxxxxxxxxxx2,
						   xxxxxxx(xxxxxxxxxxxxx2),
						   &xxxxxxxxxxxxxxx2);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xxxxx(&xxxxxxxxx[0], "xxx", xxxxxxxxxxxxxxx, xxxx, sizeof(xxxxxxx));
	xxx_xxxxx(&xxxxxxxxx[1], "xxxxxxxx_xxxx_xxxx", xxxx, xxxxxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxxxxxxx));
	xxxxxxxxx[2].xxxx = xxxx;
	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
	xxxxxxxxx[1].xxxx = xxxx;
	xxxxxx[0].xxxx = xxxx;

	/* xxxx xxxx xxxxxxxxxxx xxxxxxx */
	xxxxxxxx = "xxxx_xxxxxx_xxxxx_xxxxxxxxxxx";

	if (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == FALSE)
		return FALSE;

	return TRUE;
}


void xxxxxxxxxxxxxxx(char* xxxxxxxxxxxxxxxxx, char* xxx, xxxxxxxxx *xxxxxxxxxx, int xxxxxxxxxxxxx, xxxxx *x) {

	int x;
	int xxxxxxxxxx;
	char x[1000];
	xxxxxxx xxx;

	/* xxxxxxxxxxx xxxx xxxxxxxx xx xxxx */
	for (x = 0; x < xxxxxxxxxxxxxx; x++) {
           if (((xxxxxx(xxxxxxxxxxx[x].xxxxxxxxx, "xxx") == 0 ||
			   xxxxxx(xxxxxxxxxxx[x].xxxxxxxxx, xxx) == 0) && xxxxxxxxxxx[x].xxxxxx > 0) &&
			   (xxxxxxxxxxxxx == FALSE || xxxxxxxxxxxxx == TRUE && xxxxxxxxxxx[x].xxxxxxxxxxxx > 0)) {








				/**** xxx xxx xxxx1000209956 ****/
		        /**** xxxxxx xxxxxxx xxxxxxxxx xxx xxxxxxxxxx xxx xxxxxxxx xxxxxxxxx ****/

				xxxxxx(&(xxx.xxxxxxx), &(xxxxxxxxxx->xxxxxxx), sizeof(xxxxxxxxxx->xxxxxxx));
		        xxxxxx(&(xxx.xxxxxxxx), &(xxxxxxxxxx->xxxxxxxx), sizeof(xxxxxxxxxx->xxxxxxxx));
				xxxxxx(&(xxx.xxxxxxxxx), &(xxxxxxxxxx->xxxxxxxxx), sizeof(xxxxxxxxxx->xxxxxxxxx));
				xxxxxx(&(xxx.xxxxxxx), &(xxxxxxxxxx->xxxxxxx), sizeof(xxxxxxxxxx->xxxxxxx));
				xxxxxx(&(xxx.xxxxxxxxx), &(xxxxxxxxxx->xxxxxxxxx), sizeof(xxxxxxxxxx->xxxxxxxxx));
				xxxxxx(&(xxx.xxxxxxxxx), &(xxxxxxxxxx->xxxxxxxxx), sizeof(xxxxxxxxxx->xxxxxxxxx));



				/*xxxx_xxxx_xxxxxx_xxxxx_xxxxxxxxxxx(xxxxxxxxxxxxxxxxx, (xxxxxxx*) &xxxxxxxxxx->xxxxxxx, x);*/

				/***** xxxxxxxxx xxxxxx xx xxxx xxxxxxx ****/
				xxxxxx(xxxxxxxxxx->xxxxxx,x);
				xxxxxxxxxx = xxxx(x);


				/**** xxx. xxxx xx xxxxxx xx xxx xxx xx xxxxxx xxxxxxxx, xxxxxx xxxxxxx, xxxxxx xxxxxx) ***/
				/**** xxxx xx xx xxxxxxx xxxxx xxxx_xxxxxx_xxxxx_xxxxxxxxxxx xxxxxxx x xxxxxxxx xxxx ****/

				if (xxxxxxxxxx != 30 && xxxxxxxxxx != 31 && xxxxxxxxxx != 38){
					xxxx_xxxx_xxxxxx_xxxxx_xxxxxxxxxxx(xxxxxxxxxxxxxxxxx, &xxx, x);
				} else {
					xxxxxxxxxxxxxx = 0;
				}
				/**** xxx xx xxx xxx xxxx1000209956 ****/
		   }



	}


}


int xxxx_xxxx_xxxxxx_xx_xxxxxxxxxxxx(char*  xxxxxxxxxxxxxxxxx, xxxx_x xxxxxxxxxxx, int xx, char *xxx, time_t xxxxxxxxxxxx, time_t* xxxxxxxxxxx, xxxxx *x) {

  xxxxxxxxxx_xxxx_xxxx xxxxxxxxxxxxxxxx;
  xxxx_x xxxxxxxxxxx = xxxx_xxxx;
  xxxx_x xxxxxxxxxxx = xxxx_xxxx;
  xxxxxxxxx *xxxxxxxxxx;
  xxxxxxx2 xxxxxxx;
  struct xx xxxxxxx, *xx;
  time_t xx, xxx_xxxx;
  /* xxx xxx xxxx1000293348 */
  time_t xxxxxxxxxxx;
  struct xx xxxx;
  char x[1024];
  int xxxxxx, x, xxxxxxxxxxxx;
  char xxx, *xxx;
  int xxxxxxxxxxx;
  int xxxxx = FALSE;
  char xxxxxx[xxxx_xxxx_xxxxxx];
  char xxxxxxxxxxx1[1024]="";
  char xxxxxxxxxxx2[1024]="";
  char xxxxxxxxxxx3[1024]="";
  char xxxxxxxxxxx4[1024]="";
  char xxxxxxxxxxxxxx[1024]="";

  char xxxxxxxxxxx[11];
  char xxxxxxxxxxx[9];
  char xxxxxxxx[10];
  char xxxxxxxxx[41];
  char xxxxxxxxxxxx[41];
  char xxxxxxxx[4];
  char xxxxxx[13];
  char xxxxxxxxxxx[41];
  char xxxxxxxxxx[11];
  char xxxxxxx[31];
  char xxxxx[256];
  char xxxxxxxx[11];
  char xxxxxxxxxxxx[41];
  char xxxxxxxxxx[41];
  char xxxxxxxxx[50];
  /* xxx xxx xxxx1000244720 */
  char xxxxxxxxxx[256];
  /* xxx xx xxx xxx xxxx1000244720 */
  char xxxxxxxxx[11];
  char xxxxxxxx[11];
  char *xxxxxxxxx;
  char xxxxx[11];
  char xxxxx[9];
  char *xxxxxxxxxx;
  int xxxx_xxxx;
  struct xx	*xxx;
  int xxxxxxx  = 0;
  int xxxxxxx2 = 0;
  int xxxxxxx3 = 0;

  char* xxxxxxxxxx;
  xxxxxxxxxxxxxxxx[0] = ' ';

  /* xxxx xxxxxx */
    if (xxxxxxxxxxx==xxxx_xxxx) {
      xxxxxxxxxxx = xxxxxxxx("xxxxx_xxxx",sizeof( xxxxxxxxx),0,0);
      if (xxxxxxxxxxx==xxxx_xxxx) xxx_xxxxx("xxxxxxxx xxxxx_xxxx", x); }
    else {
      if (xxxxxx(xxxxxxxxxxx) != 0) xxx_xxxxx("xxxxxx xxxxx_xxxx", x); }

	if (xxxxxxxxxxx==xxxx_xxxx) {
      xxxxxxxxxxx = xxxxxxxx("xxxx_xxxxx",sizeof( xxxxxxxxx),0,0);
      if (xxxxxxxxxxx==xxxx_xxxx) xxx_xxxxx("xxxxxxxx xxxx_xxxxx", x); }
    else {
      if (xxxxxx(xxxxxxxxxxx) != 0) xxx_xxxxx("xxxxxx xxxx_xxxxx", x); }

   xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
                               xxxxxxxxxxxxx2,
                               xxxxxxx(xxxxxxxxxxxxx2),
                               &xxxxxxxxxxxxxxx2);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxx",
                               xxxxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxxxx);
    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}


    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxx",
                               xxxxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxxxx);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
                               xxxxxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxxxxx);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

  xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxx_xxxx_xxxx", xxxx, xxxxxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxxxxxxx));
  xxx_xxxxx(&xxxxxxxxx[1], "xxx_xxxxx_xxxxxxx", xxxx, &xxxxxxxxxxxxxxxx, sizeof(xxxxxxxxxx_xxxx_xxxx));
  xxxxxxxxx[2].xxxx = xxxx;
  xxx_xxxxx(&xxxxxxxxx[0], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
  xxxxxxxxx[1].xxxx = xxxx;

  /* xxxxxx xxxxxxxx xxxxxx */

  xxxxxx[0].xxxx     = "xxxxx_xxxx";
  xxxxxx[0].xxxx     = 10;
  xxxxxx[0].xxxx     = xxxxxxxxxxxxxxxxx;
  xxxxxx[0].xxxxxxxx = xxxxxxxxxxx;

/*
  xxxxxx[1].xxxx     = "xxxx_xxxxx";
  xxxxxx[1].xxxx     = 10;
  xxxxxx[1].xxxx     = xxxxxxxxxxxxxxxxx;
  xxxxxx[1].xxxxxxxx = xxxxxxxxxxx;
*/
  xxxxxx[1].xxxx     = "xxxx_xxxxx";
  xxxxxx[1].xxxx     = 10;
  xxxxxx[1].xxxx     = xxxxxxxxxxxxxxxxxx;
  xxxxxx[1].xxxxxxxx = xxxxxxxxxxx;

  xxxxxx[2].xxxx = xxxx;

  /* xxxx xxxx xxxxxxxx xxxx xxxx */
  xxxxxxxx = "xxxx_xxxxxx_xx_xxxxxxxxxxxx";

  if (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == FALSE)
		return FALSE;

  for (xxxxxx = 1; ; xxxxxx++)	{

	  xxxxxxxxxx =  xxxxxxxxx(xxxxxxxxxxx, xxxxxx);
	  if (xxxxxxxxxx == xxxx) break;

		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);

		xxx = x[4]; x[4] = '\0'; xxxxxxx.xx_xxxx = xxxx(&x[0]) - 1900; x[4] = xxx;
		xxx = x[6]; x[6] = '\0'; xxxxxxx.xx_xxx = xxxx(&x[4]) - 1; x[6] = xxx;
		xxxxxxx.xx_xxxx = xxxx(&x[6]);
		xxxxxxx.xx_xxxxx = - 1;
		xxxxxxx.xx_xxxx = - 1;
		xxxxxxx.xx_xxxx = - 1;

		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);

		xxx = x[2]; x[2] = '\0'; xxxxxxx.xx_xxxx = xxxx(&x[0]); x[2] = xxx;
        xxx = x[4]; x[4] = '\0'; xxxxxxx.xx_xxx = xxxx(&x[2]); x[4] = xxx;
		xxxxxxx.xx_xxx = xxxx(&x[4]);

		xx = xxxxxx(&xxxxxxx);

		if (xx <= xxxxxxxxxxxx)
			continue;

        if (*xxxxxxxxxxx < xx) *xxxxxxxxxxx = xx;

		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxxxxx(xxxxxxxxxxx, x, 4); xxxxxxxxxxx[4] = '/'; xxxxxxx(&xxxxxxxxxxx[5], &x[4], 2);
		xxxxxxxxxxx[7] = '/'; xxxxxx(&xxxxxxxxxxx[8], &x[6]);

		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxxxxx(xxxxxxxxxxx, x, 2); xxxxxxxxxxx[2] = ':'; xxxxxxx(&xxxxxxxxxxx[3], &x[2], 2);
		xxxxxxxxxxx[5] = ':'; xxxxxx(&xxxxxxxxxxx[6], &x[4]);

	    xxxxxxx(xxxxxxxxxx->xxxxxxx,xxxxxxxx); xxxxx(xxxxxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,xxxxxxxxx); xxxxx(xxxxxxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxx,xxxxxxxx); xxxxx(xxxxxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxxx,xxxxxx); xxxxx(xxxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,xxxxxxxxxxxx); xxxxx(xxxxxxxxxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,xxxxxxxxxxx); xxxxx(xxxxxxxxxxx);
		xxxxxx(xxxxxxxxxx->xxxxxxxx, xxxxxxxxxx); xxxxx(xxxxxxxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxx,xxxxxxx); xxxxx(xxxxxxx);
		xxxxxxx(xxxxxxxxxx->xxx,xxxxx); xxxxx(xxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,xxxxxxxxxx); xxxxx(xxxxxxxxxx);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,xxxxxxxxx); xxxxx(xxxxxxxxx);


        xxxxxx(xxxxxxxxxx, xxxx);
		xxxxxx(xxxxxxxxx, xxx);
		xxxxxxx(xxxxxxxx, "%02d", xx);

        /* xxxxx xx xxxxxxxxxx xx xxxxxxx <xxxxxxxx>_<xxx>_<xxxxxxxx_xxxxxx>
		   xxxx xxx 6.40 xxxx xxx xxxxxxx xxx xx xxxxx xx xxx:
		       <xxxxxxxx>_<xxx>_<xxxxxxxx_xxxxxx>_x (xxx xxxx xxxxxxxxx)*/
		xxx = xxxxxxxxxx;
		xxxxxx (xxxxxxxxxxxxxx, xxxxxxxxxx);


		while (*xxx++) ;
		while (--xxx >= xxxxxxxxxx) {
			if (*xxx == '_') {
		     xxxxxx (xxxxxxxxxxx1, &xxx[1]);
			 *xxx = '\0';
			 break;
			}
		}
        while (--xxx >= xxxxxxxxxx) {
			if (*xxx == '_') {
		     xxxxxx (xxxxxxxxxxx2, &xxx[1]);
			 *xxx = '\0';
			 break;
			}
		}
        while (--xxx >= xxxxxxxxxx) {
			if (*xxx == '_') {
		     xxxxxx (xxxxxxxxxxx3, &xxx[1]);
			 *xxx = '\0';
			 break;
			}
		}
		/*xxxxx xx xxxxxxxxxxx2 xx xxxxx xx xxxxxxxx, xxxxx xxxxxxxxxx xxx xxx xx
		  xx xxx xxxxx xxxxxx. xx xxx xxxxxxxxxx xx 0 => xxxxxxxxxx xxxxx xxxx
		  xx xxxx xxxxxxxx. xx xxxxx xxxxx => xxxxxxxxxx xxxxx xxxx x
		  xxxx xxxxxxxx.*/
		xxxxxxx = xxxxxx (xxxxxxxxxxx2,xxxxxxxx);

		/* xxxxx xx xxx xxxxxxx xxxx xxxxx xxxx xx xxx xx xxxx 6.20 xx xxx xxxxxx xxxx 
		   xxxxx xxx xxxxxxxx xxxxx xxxx. xxxx xxx xxxxxxx xxxx xxxxx xxxx:
		   xxx_xxxx_<xxxxxxxx> */
		xxxxxxx2 = xxxxxx (xxxxxxxxxxx2, "xxxx");
		xxxxxxx3 = xxxxxx (xxxxxxxxxx , "xxx");
		

		if (xxxxxxx2 == 0 && xxxxxxx3 == 0)
		{
			/* xxxx xxxxxxxx xx xxxxx xx xxx xxxxxxxxxx xx xxx xxxxxxxx1 xx xxxxxxxx*/
			xxxxxx (xxxxxxxxxx, xxxxxxxxxxx1);
			xxxxxx (xxxxxxxxx, "xxx");
			xxxxxx (xxxxxxxx, "xx");
		}
		else if (xxxxxxx == 0)
		{
			/*xxxx xxxxxxxxx xxx xxxxxxxx*/
			xxxxxx (xxxxxxxx,   xxxxxxxxxxx1);
			xxxxxx (xxxxxxxxx,  xxxxxxxxxxx2);
			xxxxxx (xxxxxxxxxx, xxxxxxxxxxx3);
		}
		else
		{
			/* xxx xxxx xxxxxxxxx (xxx xxxx xxxx xx x xxxxxxxx) */
			xxxxxx (xxxxxxxx,  xxxxxxxxxxx2);
			xxxxxx (xxxxxxxxx, xxxxxxxxxxx3);
			while (--xxx >= xxxxxxxxxx) {
				if (*xxx == '_') {
				xxxxxx(xxxxxxxxxx, &xxx[1]);
				*xxx = '\0';
				break;
				}
			}

		}



/*
		xx_xxxx_xxxxxxx          xxxx xxxxxxxxx-xxxxxx      xxxxx 0,
		xx_xxxx_xxxx             xxxx xxxxxxxxx-xxxxxx      xxxxx 1,
		xx_xxxx_xxxxxxx          xxxx xxxxxxxxx-xxxxxx      xxxxx 9,
		xx_xxxx_xxxxxxx          xxxx xxxxxxxxx-xxxxxx      xxxxx 10,
		xx_xxxx_xxxxxx_xxxxxxxx  xxxx xxxxxxxxx-xxxxxx      xxxxx 30,
		xx_xxxx_xxxxxx_xxxxxxx   xxxx xxxxxxxxx-xxxxxx      xxxxx 31,
		xx_xxxx_xxxxxx_xxxxxx    xxxx xxxxxxxxx-xxxxxx      xxxxx 38,
		xx_xxxx_xxxxxx_xxxxxxx   xxxx xxxxxxxxx-xxxxxx      xxxxx 39,
		xx_xxxx_xxxxxx           xxxx xxxxxxxxx-xxxxxx      xxxxx 40,
		xx_xx_xxxxxxxx_xxxxxx    xxxx xxxxxxxxx-xxxxxx      xxxxx 70,
		xx_xx_xxxxxxxx_xx_xxxxxxx xxxx xxxxxxxxx-xxxxxx      xxxxx 75,
		xx_xxxx_xxx_xxxxxx       xxxx xxxxxxxxx-xxxxxx      xxxxx 99,
		xx_xxxx_xxxx_xxx         xxxx xxxxxxxxx-xxxxxx      xxxxx 100,
		xx_xxxx_xxxx_xx_xx       xxxx xxxxxxxxx-xxxxxx      xxxxx 101,
		xx_xxxx_xxxx_xxxxxx      xxxx xxxxxxxxx-xxxxxx      xxxxx 102,
		xx_xxxx_xxxx_xxxxxxxxxx  xxxx xxxxxxxxx-xxxxxx      xxxxx 103,
		xx_xxxx_xxxx_xxx         xxxx xxxxxxxxx-xxxxxx      xxxxx 104,
		xx_xxxx_xxxxxxx_xxxx     xxxx xxxxxxxxx-xxxxxx      xxxxx 200,
		xx_xxxx_xxxxxxx_xxxx_xxxxxxxxx xxxx xxxxxxxxx-xxxxxx  xxxxx 205,
		xx_xxxx_xxxxxxx_xxxxxxxxx xxxx xxxxxxxxx-xxxxxx      xxxxx 210,
		xx_xxxx_xxxxxxx_xxxxxxx   xxxx xxxxxxxxx-xxxxxx      xxxxx 220.
*/
		xxxxxx(xxxxxxxxxx->xxxxxx,xxxxxxxx); xxxxx(xxxxxxxx);

		switch (xxxx(xxxxxxxx)) {

			case   0:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxxx"); break; }
			case   1:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxx"); break; }
			case   9:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxxx"); break; }
			case  10:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxxx"); break; }
			case  30:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxx_xxxxxxxx"); break; }
			case  31:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxx_xxxxxxx"); break; }
			case  38:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxx_xxxxx"); break; }
			case  39:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxx_xxxxxxx"); break; }
			case  40:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxx"); break; }
			case  70:	{ xxxxxx (xxxxxxxxxxxx, "xx_xx_xxxxxxxx_xxxxxx"); break; }
			case  75:	{ xxxxxx (xxxxxxxxxxxx, "xx_xx_xxxxxxxx_xx_xxxxxxx"); break; }
			case  99:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxx_xxxxxx"); break; }
			case 100:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxx_xxx"); break; }
			case 101:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxx_xx_xx"); break; }
			case 102:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxx_xxxxxx"); break; }
			case 103:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxx_xxxxxxxxxx"); break; }
			case 104:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxx_xxx"); break; }
			case 200:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxxx_xxxx"); break; }
			case 205:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxxx_xxxx_xxxxxxxxx"); break; }
			case 210:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxxx_xxxxxxxxx"); break; }
			case 220:	{ xxxxxx (xxxxxxxxxxxx, "xx_xxxx_xxxxxxx_xxxxxxx"); break; }

			default:
				break;
		}

	   if (xxxxx.xxxxxxx) {
         xxxxxxx (xxxxx.xxxxxxx, "\n=======================================================\n");
   		 xxxxxxx (xxxxx.xxxxxxx, "xxxxx:\txxxx/xxxx(xxx):%s %s xxxxxx:%s xxxxxx:%s xxxx:%s\n", xxxxxxxxxxx, xxxxxxxxxxx, xxxxxxxx, xxxxxxxx, xxxxxx);
		 xxxxxxx (xxxxx.xxxxxxx, "\txxxxxxx xxxx:%s xxx:%s xx:%s\n", xxxxxxxxxx, xxxxxxxxx, xxxxxxxx);
		 xxxxxxx (xxxxx.xxxxxxx, "\txxxxxxxxxxx: %s\n",xxxxxxxxxxxxxx);
   		 xxxxxxx (xxxxx.xxxxxxx, "\txxxxxxx:%s xxxxxxxxxx:%s xxxxxxxxx:%s\n", xxxxxxxxx, xxxxxxxxxxxx, xxxxxxxxxxx);
         xxxxxxx (xxxxx.xxxxxxx, "\txxxx xxxxxxxx:%s xxxxx/xxxxxxxx:%s xxxxxx:%s\n", xxxxxxxxxx, xxxxxxx, xxxxxxxx);
         xxxxxxx (xxxxx.xxxxxxx, "\txxx:%s \n", xxxxx);
		 xxxxxx (xxxxx.xxxxxxx);
       }

       /* xxxx xxx xxxxxxxxxx xx xxxxxxx xxxx xxxxxxxxx xx xxx */
	   xxxx.xx_xxxx  = 12;
	   xxxx.xx_xxx   = 00;
	   xxxx.xx_xxx   = 6;
	   xxxx.xx_xxxx  = 6;
	   xxxx.xx_xxxxx = 0;
	   xxxx.xx_xxxx  = 99;
	   xxxx.xx_xxx   = 00;

	   xxx_xxxx = xxxxxx(&xxxx);
       xxx = xxxxxx( &xxx_xxxx);
       xxxx_xxxx = (((12 - xxx->xx_xxxx ) * 3600) + ((0 - xxx->xx_xxx) * 60));

	   xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
	   xxxx.xx_xxx   = xxxx(&x[4]);
   	   x[4] = '\0'; xxxx.xx_xxx   = xxxx(&x[2]);
	   x[2] = '\0'; xxxx.xx_xxxx  = xxxx(x);

   	   xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
   	   xxxx.xx_xxxx  = xxxx(&x[6]);
	   x[6] = '\0'; xxxx.xx_xxx   = xxxx(&x[4]) - 1; /* xxx = 0 */
	   x[4] = '\0'; xxxx.xx_xxxx  = xxxx(x) - 1900;
  	   xxxx.xx_xxxxx = 0;

	   xxx_xxxx = xxxxxx(&xxxx) + xxxx_xxxx;
	   xx = xxxxxxxxx(&xxx_xxxx);

	   xxxxxxxx(xxxxx, 11, "%x/%x/%d", xx);
	   xxxxxxxx(xxxxx, 9, "%x.%x.%S", xx);

/*
		xx_xxx_xxxxxxx: xxxxx xxx, xx xxxx xxxxxxxx. xxxxxxx xxxxx 0
		xx_xxx_xxxxx: xxxxx xxx, xx xxxxx xxxxxxx. xxxxxxx xxxxx 1
		xx_xxx_xxxxxx: xxxxxx xxx, xxxxxx xxxxx xxxxxxx. xxxxxxx xxxxx 2
		xx_xxx_xxx: xxx xxx, xxxxxxx xxxxxxxx xxxxx, xxx xxxxx xxxxxxx. xxxxxxx xxxxx 3
*/
        /* xxxxx xxxxxxxx */
        xxxxxxxxxxxx = FALSE;
	    for (x = 0; x < xxxxxxxxxxx; x++) {
                if (xxxxxxxx[x].xxxxxxxx == xxxxxxxxxx->xxxxx) {
                        if ((!xxxxxx(xxxxxxxx[x].xxxxxxxxx, "xxx")) || (!xxxxxx(xxxxxxxx[x].xxxxxxxxx, xxx))) {
                                if ((!xxxxxx(xxxxxxxx[x].xxxxxxxxx, "xxx")) || xx == xxxx(xxxxxxxx[x].xxxxxxxxx)) {
									if (!xxxxxxxx[x].xxxxxxx) {
                                                xxxxxxxxxxxx = TRUE;
												break;
									}
                                        xxxxxxxxxxx = xxxxxxxx[x].xxxxxxxxxxx;
                                        xxxxx = TRUE;
                                        break;
                                }
                        }
                }
        }

		if (!xxxxx)
          xxxxxxxxxxx = xxx_xxx_xxxxxxx;

        if (xxxxxxxxxxxx)  {
		   if (xxxxx.xxxxxxx) {
			   switch (xxxxxxxxxx->xxxxx) {
			   case 0: xxxxxx (x, "xxxxx xxx");
				   	break;
			   case 1: xxxxxx (x, "xxxxx xxx");
				   break;
			   case 2: xxxxxx(x, "xxxxxx xxx");
				   break;
			   case 3: xxxxxx(x, "xxx xxx");
				   break;
			   default: xxxxxx(x, "xxxxxxx xxx");
			   }
			 xxxxxxx (xxxxx.xxxxxxx, ">>>\txxxxx xxx xxxx. xxxxxxxx '%s' xxx'x xxxxxxx.\n", x);
			 xxxxxx (xxxxx.xxxxxxx);
		   }
		   xxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxx, xxx, xxxxxxxxxx, TRUE, x);
		   continue;
		}

		if (xxxxxxx(xxxxxxxxxxxx, "x3xxxxxx") == 0) {
/* xxxxx xxxxxx xx */
			xxxxxxxxxxxx = FALSE;
			for (x = 0; x < xxxxxxxxxxxxxx; x++) {
						if ((!xxxxxx(xxxxxxxxxxx[x].xxxxxxxxx, "xxx")) || (!xxxxxx(xxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxxx))) {
								if ((!xxxxxx(xxxxxxxxxxx[x].xxxxxxxxx, "xxx")) || xxxx(xxxxxxxx) == xxxx(xxxxxxxxxxx[x].xxxxxxxxx)) {
										if ((xxxxxx(xxxxxxx, xxxxxxxxxxx[x].xxxxxxxxxxxxx) >= 0) &&
												(xxxxxx(xxxxxxx, xxxxxxxxxxx[x].xxxxxxxxxxxx) <= 0))
										{
												if (xxxxxxxxxxx[x].xxxxxxx) {
														break;
												} else {
														xxxxxxxxxxxx = TRUE;
														break;
												}
										}
								}
						}
				}

			if (xxxxxxxxxxxx)  {
			   if (xxxxx.xxxxxxx) {
   				 xxxxxxx (xxxxx.xxxxxxx, ">>>\txxxxx xxx xxxx. xxxxxxxx '%s' xxx xxxxxxxx.\n", xxxxxxx);
				 xxxxxx (xxxxx.xxxxxxx);
			   }
			   xxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxx, xxx, xxxxxxxxxx, TRUE, x);
   			   continue;
			}
			/* xxx xxxx xxxxx xxx x3xxxxx xxxx xxxxxx xxxxxxxx xx x3xxxxxx xxxxx,
			   xx xxxx xxx xx xxxxxx xx xxx x3xxxxxx xxxxxxxx xxxxxxxxxx */
			if ( xxx_xxxx == 0) {
				/*
					xxxx xx xxx x3xxxxx xxxxxx
				*/
				xxxxxxx (xxxxxx, "xxxxxx: xx: %s %s xxxxxx=%s xxxxxxxx=%s xxxxxxxxx=%s xxxxxx=%s xxx=%s xx=%s xxxx=%s xxxx=%s xxxx=%s xxxx=%s",
					    xxxxxxx,
 					    xxxxx,
						xxxxxxxxxxxx,
						xxxxxxxxxx,
						xxxxxxxxxxx,
						xxxxxxxx[0] == ' ' || xxxxxxxx[0] == '\0' ? "000" : xxxxxxxx,
						xxxxxxxxx,
						xxxxxxxx,
						xxxxxxxxx,
						xxxxxxxxxx,
						xxxxx,
						xxxxx);
			} else {
				/*
				   xxxx xx xxx x3xxxxxx xxxxxx
				*/
				if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxxxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} else if( xxxxxxx( xxxxxxxxxxx, "xxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "xx";
				} /*xxxx xx( xxxxxxx( xxxxxxxxxxx, "xxxxxxxxxxxxx" ) == 0 ) {
					xxxxxxxxxx = "";
				}*/ else {
					if (xxxxx.xxxxxxx) {
						xxxxxxx (xxxxx.xxxxxxx, "xxxxxxx, xxxxxxxxxxx xxxxxxx xxxxxxxx %s - xxxxxxxx\n", xxxxxxxxxxx);
						xxxxxx (xxxxx.xxxxxxx);
					}
					continue;
				}
				xxxxxxx (xxxxxx, "xxxxxx: xx:%s xxx:%s xxxx:%s xxxx:%s %s '%s' xx=%s xxxx=%s xxxx=%s xxx=%s xxxxxxxx=%s xxxxxx=%s xxxxxx=%s",
						xxxxxxx,
						xxxxxxxxxx,
						xxxxxx,
						xxxxx,
						xxxxx,
						xxxxx,
						xxxxxxxx,
						xxxxxxxxxx,
						xxxxxxxxx,
						xxxxxxxxx,
						xxxxxxxxx,
						xxxxxxx,
						xxxxxxx);
			}
		} else
			xxxxxxx (xxxxxx, "xxxxxx: %s xxxxxx=%s xxxxxxxx=%s xxxxxxxxx=%s xxxxxx=%s xxx=%s xx=%s xxxx=%s xxxx=%s xxxx=%s xxxx=%s",
 					xxxxx,
					xxxxxxxxxxxx,
					xxxxxxxxxx,
					xxxxxxxxxxx,
					xxxxxxxx[0] == ' ' || xxxxxxxx[0] == '\0' ? "000" : xxxxxxxx,
					xxxxxxxxx,
					xxxxxxxx,
					xxxxxxxxx,
					xxxxxxxxxx,
					xxxxx,
					xxxxx);


		xxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxx, xxx, xxxxxxxxxx, FALSE, x);

		if( xxx_xxxx != 0 )
			xxxxxxxxxx = "x3_xxx";
		else
			xxxxxxxxxx = "x3_xxxx";
        xxxxxxxxxxxxxxx(xxxxxxxxx, xxxxxxxx, xxxxxxxxxx, &xxxxxxxxx);
		xxxxxxxxx (xxxxxxxxxxx,
                xxx_xxxxxxxxxxx_x3,
                xxxxxxxxxxxx,
                xxxxxx,
                xxxxxxxxxx,
                xxxxxxxxx);

/*
		xxxxxx(xxxxxxxxxx->xx,x);
		xxxx("xx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
		xxxx("xxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
		xxxx("xxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxx("xxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
		xxxx("xxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxx("xxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxx("xxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
		xxxx("xxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
		xxxx("xxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxx,x);
		xxxx("xxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
		xxxx("xxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
		xxxx("xxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
		xxxx("xxxxxxxx",10,30,x);
		xxxxxx(xxxxxxxxxx->xxxxx,x);
		xxxx("xxxxx",10,30,x);
		xxxxxx(xxxxxxxxxx->xxxxxxxx,x);
		xxxx("xxxxxxxx",10,30,x);
		xxxxxx(xxxxxxxxxx->xxxxxx,x);
		xxxx("xxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxx("xxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxx,x);
		xxxx("xxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxx,x);
		xxxx("xxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
		xxxx("xxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
		xxxx("xxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxx("xxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxx,x);
		xxxx("xxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxx("xxxxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
		xxxx("xxxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxx,x);
		xxxx("xxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxx1,x);
		xxxx("xxxxxx1",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx1,x);
		xxxx("xxxxxxx1",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxx2,x);
		xxxx("xxxxxx2",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx2,x);
		xxxx("xxxxxxx2",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxx3,x);
		xxxx("xxxxxx3",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx3,x);
		xxxx("xxxxxxx3",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxx4,x);
		xxxx("xxxxxx4",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx4,x);
		xxxx("xxxxxxx4",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
		xxxx("xxxxxxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxx,x);
		xxxx("xxx",10,30,x);
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
		xxxx("xxxxxxx",10,30,x);
*/
  }

  return TRUE;
}


int xxxx_xxxxxx_xxx_xxxxxxxxxxxxx(char*  xxxxxxxxxxxxxxxxx, xxxxxxx* xxxx, xxxxxxxxxx* xxxxxxxxxxxxx, xxxxx *x) {

	xxxxxxx2 xxxxxxx;
/*    xxxx x[1024]; */

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx",
                               xxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxx);
    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
                               xxxxxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxxxxx);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
		xxxxxxxxxxxxx2,
		xxxxxxx(xxxxxxxxxxxxx2),
		&xxxxxxxxxxxxxxx2);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxx_xxxx_xxxx", xxxx, xxxxxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxxxxxxx));
	xxx_xxxxx(&xxxxxxxxx[1], "xxx", xxxxxxxxxxxxxxx, xxxx, sizeof(xxxxxxx));
	xxxxxxxxx[2].xxxx = xxxx;

	xxxxxx[0].xxxx = xxxx;

    xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxx_xxxxx", xxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxx, sizeof(xxxxxxxxxx));
    xxx_xxxxx(&xxxxxxxxx[1], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
	xxxxxxxxx[2].xxxx = xxxx;

	/* xxxx xxxx xxxxxxxx xxxx xxxx */
	xxxxxxxx = "xxxx_xxxxxx_xxx_xxxxxxxxxxxxx";

/*	xx (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == xxxxx)
		xxxxxx xxxxx; */

    xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x);
/*
	xxxxxx(xxxxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx01xxxx,x);
	xxxx("xxx01xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx05xxxx,x);
	xxxx("xxx05xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx15xxxx,x);
	xxxx("xxx15xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx01xxxx,x);
	xxxx("xxx01xxxx",10,30,x);
	(xxxxxxxxxxxxx->xxx05xxxx,x);
	xxxx("xxx05xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx15xxxx,x);
	xxxx("xxx15xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx01xxxx,x);
	xxxx("xxx01xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx05xxxx,x);
	xxxx("xxx05xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxx15xxxx,x);
	xxxx("xxx15xxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxxxx->xxxxxxxxx,x);
	xxxx("xxxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxxxx->xxxxxxxxx,x);
	xxxx("xxxxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxxxx->xxxxxxxxx,x);
	xxxx("xxxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxxxx->xxxxxxxxx,x);
	xxxx("xxxxxxxxx",10,30,x);
*/
	return TRUE;
}


/*
------------------------------------------------------------------------

  xxxx xxxxxxxx xxxx_xxxxxx_xxx_xxxxxxxxxxx
      xxxxxxxxx
        xxxxxxxx_xxxx_xxxx xxxx xxxxxxxxxx_xxxxxxx  xxxx xxx_xxxx xxxxxx 16
        xxx xxxxxxxxx xxxxxxx xxxxxx84 xxxxxx xx xxxxxx 7
      xxxxxxxxx
        xxxxxxxxxx xxxxxxxxx xxxxxxxxxx xxxxxx 124 xxxxxx xx xxxxxx 12
        xxxxxx xxxxxxxxx xxxxxxx2 xxxxxx 548 xxxxxx xx xxxxxx 14
      xxxxxx
      xxxxxxxxxx

------------------------------------------------------------------------
*/
int xxxx_xxxxxx_xxx_xxxxxxxxxxx(char*  xxxxxxxxxxxxxxxxx, xxxxxxx* xxxx, xxxxxxxxxx* xxxxxxxxxxx, xxxxx *x) {

	xxxxxxx2 xxxxxxx;
/*    xxxx x[1024]; */

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx",
                               xxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxx);
    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxxxxx",
                               xxxxxxxxxxxxxxxx,
                               xxxxxxx(xxxxxxxxxxxxxxxx),
                               &xxxxxxxxxxxxxxxxxx);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxxxx2",
		xxxxxxxxxxxxx2,
		xxxxxxx(xxxxxxxxxxxxx2),
		&xxxxxxxxxxxxxxx2);

    if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxx_xxxx_xxxx", xxxx, xxxxxxxxxxxxxxxxx, xxxxxx(xxxxxxxxxxxxxxxxx));
	xxx_xxxxx(&xxxxxxxxx[1], "xxx", xxxxxxxxxxxxxxx, xxxx, sizeof(xxxxxxx));
	xxxxxxxxx[2].xxxx = xxxx;

	xxxxxx[0].xxxx = xxxx;

    xxx_xxxxx(&xxxxxxxxx[0], "xxxxxxxxxx", xxxxxxxxxxxxxxxxxx, xxxxxxxxxxx, sizeof(xxxxxxxxxx));
    xxx_xxxxx(&xxxxxxxxx[1], "xxxxxx", xxxxxxxxxxxxxxx2, &xxxxxxx, sizeof(xxxxxxx2));
	xxxxxxxxx[2].xxxx = xxxx;

	/* xxxx xxxx xxxxxxxx xxxx xxxx */
	xxxxxxxx = "xxxx_xxxxxx_xxx_xxxxxxxxxxx";

	if (xxxx_xxxxxxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, &xxxxxxx, x) == FALSE)
		return FALSE;

/*
	xxxxxx(xxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxx->xxxxxxxxx,x);
	xxxx("xxxxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxx->xxxxxxxxxx,x);
	xxxx("xxxxxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxx->xxxxxx2x,x);
	xxxx("xxxxxx2x",10,30,x);
	xxxxxx(xxxxxxxxxxx->xxxxxx2x,x);
	xxxx("xxxxxx2x",10,30,x);
	xxxxxx(xxxxxxxxxxx->xxxxxx2x,x);
	xxxx("xxxxxx2x",10,30,x);
	xxxxxx(xxxxxxxxxxx->xxxxxx2x,x);
	xxxx("xxxxxx2x",10,30,x);
	xxxxxxx(xxxxxxxxxxx->xxxxxxxx,x);
	xxxx("xxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxx->xxxxx,x);
	xxxx("xxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxx->xxxxxxxxx,x);
	xxxx("xxxxxxxxx",10,30,x);
	xxxxxxx(xxxxxxxxxxx->xxxxxxx,x);
	xxxx("xxxxxxx",10,30,x);
	xxxxxx(xxxxxxxxxxx->xxxxxxxx,x);
	xxxx("xxxxxxxx",10,30,x);
*/
	return TRUE;
}



/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxx
**---------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxx x xxx xxxxxxxxxx xx x xxx xxxxxx
**
**
**
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
int xxxxxxx(char *xxxx, xxxxx *x, char* xxxxxxxxxxxxxxxxx) {

	int xxxxxxxxxxxxx = 0;
	/* xxxxxx xxx_xxxxxxx xxx_xxx; */
	/* xxxxxx xxx_xxxxxxx_xxxxxxx_3 xxx_xxxxxxx_x3; */

	xxx_xxxx_x xxxxxxx_xxxxx[1024];
	xxx_xxxxx_xxxx_xx xxx_xxxxx_xxxx;
	char *xxxxxx;
	char *xxxxx;
	char *xxxx;
	char *xxxxxx;
	char *xxxxxx;
	char *xxxx;





	char xxx_xxxx[80];
	char xxx_xxxxxxxx[80];
	char xxxxxxxxxxx[80];

	char xxxxxxxxxxxxxxx[4];
	int xxxxxxxxxxxxxxx;
	char xxx[1024];
/*  xxxx xxxxxx[256];
	xxxx *xxxxxxxxx; */
	xxxxx xxxxx;

	/* xxxx_xxx_xxxx = xxxx;
	xxxx_xxx_xxxxx = x; */

	/*-------------------------------------------------*/
	/* xxxxx xxx xxxxx xxxxxxxxxxxxx                   */
	/*-------------------------------------------------*/
	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "\n%s================== xxx xxxxx xxxxxxx =================== \n", xxxxxxxxx());
		xxxxxxx (xxxxx.xxxxxxx, "%s xxxxxx xxxxxxxx:\t%s \n", xxxxxxxxx(), x->xxxx);
		xxxxxxx (xxxxx.xxxxxxx, "%s xxxxxx xxxx:\t%s \n", xxxxxxxxx(), x->xxx);
		xxxxxxx (xxxxx.xxxxxxx, "%s xxxxxx xxxxxx:\t%s \n", xxxxxxxxx(), x->xx);
		xxxxxxx (xxxxx.xxxxxxx, "%s xxxxxx:\t%s \n", xxxxxxxxx(), x->xxxxxx);
		xxxxxxx (xxxxx.xxxxxxx, "%s xxxx:\t\t%s \n", xxxxxxxxx(), x->xxxx);
		xxxxxxx (xxxxx.xxxxxxx, "%s xxxxxxxx:\t%s \n", xxxxxxxxx(), "*");
		xxxxxxx (xxxxx.xxxxxxx, "%s xxxxxxxx:\t%s \n", xxxxxxxxx(), x->xxxxxxxx);
		xxxxxx (xxxxx.xxxxxxx);
	}

	xxxxxxx (xxx_xxxx    , "%c%c%c%c%c%c%c", 'x','x','x','x','x','x','x');
    xxxxxxx (xxx_xxxxxxxx, "%c%c%c%c%c%c%c%c", 'x', 'x', 'x', 'x', 'x','_','3','0');

	if (xxxxxx(x->xxxx, "xxxxxxx"))
		xxxxxx(xxxxxxxxxxxxxxxxx, x->xxxx);
	else
		xxxxxx(xxxxxxxxxxxxxxxxx, xxx_xxxx);



	if (xxxxxx(x->xxxx, "xxxxxxx"))
		xxxx    = x->xxxx;
	else
		xxxx    = xxx_xxxx;

	xxxx = x->xxxxxxxx;

	if (xxxxxx(xxxx, "xxxxxxx") == 0)
	    xxxxxx(xxxx, "xx");

	/*--------------------------*/
	/* xxxxxx xxxxxxxx          */
	/*--------------------------*/
	if (xxxxxx(x->xxxxxxxx, "xxxxxxx")) {
		xxxxxx (xxxxxxxxxxx, (char*)xxxxxxxxx((unsigned char*)x->xxxxxxxx));
		xxxxxx    = xxxxxxxxxxx;
	} else {
		xxxxxx    = xxx_xxxxxxxx;
	}

	/*--------------------------*/
	/* xxx xxxxxx               */
	/*--------------------------*/
	xxxxxx = x->xxxxxx;

	/*--------------------------*/
	/* xxx xxxxxx xx            */
	/*--------------------------*/
	xxxxx = x->xx;

	/*--------------------------*/
	/* xxx xxxxxxxx xx xx       */
	/*--------------------------*/
	xxxxxx = x->xxxx;

    xxxxxxx (xxxxxxx_xxxxx,"xxxxxx=%s xxxxx=%s xxxx=%s xxxxxx=%s xxxxxx=%s xxxx=%s",
           (const char*) xxxxxx,
           (const char*) xxxxx,
           (const char*) xxxx,
           (const char*) xxxxxx,
           (const char*) xxxxxx,
           (const char*) xxxx);

	/* xxx xxx xxxx1000294598 */
	xxxxxxxxxxxxxxxxxxx( xxxxxxxxxxxxxxx );
	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "xxxxxxxxxxxxxxx xx xxx xx %ixx\n", xxxxxxxxxxxxxxx);
		xxxxxx  (xxxxx.xxxxxxx);
	}

	if( x->xxxxxxxxxxxxxxxxxx ) {
		char* xxxxxxxxxxxxxxx;
		if (xxxxx.xxxxxxx) {
			xxxxxxx ( xxxxx.xxxxxxx, "xxxxxxxxxxxx xxxxxxx, xxxxxxxxxx xxxxx xxx!\n" );
			xxxxxx  (xxxxx.xxxxxxx);
		}
		
		xxxxxxxxxxxxxxx( x->xxx, x->xx, x->xxxx, &xxxxxxxxxxxxxxx );
		xxxxxxxxxxxxx = xxxxxxxxxxxxxxx( x->xxx, x->xx, x->xxxx, "x3xxxxx", xxxxxxxxxxxxxxx );
		if( xxxxxxxxxxxxx == 1 ) {
			if (xxxxx.xxxxxxx) {
				xxxxxxx (xxxxx.xxxxxxx, "xxxxxxxxxxxx xxxxxxxxx xx xxxx xxxx xxxxxxxxx xxx xxx xxxxxxxxxx!\n");
				xxxxxxx (xxxxx.xxxxxxx, "xxxxxxxxxx xxxxx!\n");
				xxxxxx  (xxxxx.xxxxxxx);
			}
			return FALSE;
		}
		if (xxxxx.xxxxxxx) {
			xxxxxxx ( xxxxx.xxxxxxx, "xxxxxxxxxxxx xxxxxxxxx, xx xxxxxxxxx xxxxxxxx!\n" );
			xxxxxx  (xxxxx.xxxxxxx);
		}
	}
	xxx_xxxxxx = xxxxxxxxx(xxxxxxx_xxxxx, &xxx_xxxxx_xxxx);

	if(xxx_xxxxxx == xxx_xxxxxx_xxxx) {
		if (xxxxx.xxxxxxx) {
			xxxxxxx (xxxxx.xxxxxxx, "             xxxxxx    = %d \n", xxx_xxxxxx);
			xxxxxxx (xxxxx.xxxxxxx, "xxxxxxxxxx xxxxx!\n");
			xxxxxx  (xxxxx.xxxxxxx);
		}
/*      xxxxxxx (xxxxxx, "xxxxxx: %x xx=%x xxxx=%x xxxx=%x xxx=%x xxxxxxxx=%x xxxxxx=%x xxxxxx=%x",
                "xxxxxx xx xxx xxxxxxxxx.",
                x->xx,
                xxxx,
                x->xxx,
                "xxx",
                "xxx",
                "xxx",
                "xxx");
        xxxxxxxxxxxxxxx(x->xxx, x->xx, x->xxxx, &xxxxxxxxx);
		xxxxxxxxx (xxx_xxx_xxxxxxxx,
			xxx_xxxxxxxxxxx_x3,
			"xxxxxxxxxx",
			xxxxxx,
			"x3_xxxxx",
			xxxxxxxxx); */
		return FALSE;
	}
	else {
		if (xxxxx.xxxxxxx) {
			xxxxxxx (xxxxx.xxxxxxx, "             xxxxxx    = %d \n", xxx_xxxxxx);
			xxxxxxx (xxxxx.xxxxxxx, "xxxxxxxxxx xx!\n");
			xxxxxx  (xxxxx.xxxxxxx);
		}
	}

 	/* -----------------------------------------------
     * xxxxxxxxxx
     * ---------------------------------------------*/
    xxxxxxxxx[0].xxxx = "xxxxx_xxxxxx";
    xxxxxxxxx[0].xxxx = 12;
    xxxxxxxxx[0].xxxx = &xxxxx;
    xxxxxxxxx[0].xxxx = sizeof(xxxxx);
    xxxxxxxxx[0].xxxx = xxxxxxx_xxxx;

    xxxxxxxxx[1].xxxx = xxxx;
    xxxxxxxxx[0].xxxx = xxxx;
    xxxxxx[0].xxxx    = xxxx;

   	xxxxxxxx="xxx_xxxxxx_xxxx";

    xxx_xx = xxxxxxxxxxxxxxxxxxx("xxxxx", xxxxxxxxxxx, xxxxxxx(xxxxxxxxxxx), &xxxxxxxxxxxxx);

	if (xxx_xx != xxx_xx)
	{
		xxx_xxxxx("xxxxxxxxxxxxxxxxxxx", x);
		return FALSE;
	}

	if (!xxx_xxxxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x))
		return FALSE;

    xxxxxxx(xxxxx.xxxxxxxx,xxxxxxxxx); xxxxx(xxxxxxxxx);

	/*xxxxx xx xxx xxxxxxx xx xxxxxxxxx (>= 46x)*/
	xxxxxxxxxxxxxxx[0]=xxxxxxxxx[0];
	xxxxxxxxxxxxxxx[1]=xxxxxxxxx[1];
	xxxxxxxxxxxxxxx[2]=0;
	xxxxxxxxxxxxxxx = xxxx( xxxxxxxxxxxxxxx );
	if( (xxxxxxxxxxxxxxx < 46) ||
		(xxxxxxxxxxxxxxx == 46 && (xxxxxxxxx[2] == 'x' || xxxxxxxxx[2] == 'x')))
	{
		if (xxxxx.xxxxxxx) {
			xxxxxxx (xxxxx.xxxxxxx, "xxx xxxxxxx %s xx xxxxxxxxxxx!\n", xxxxxxxxx);
			xxxxxx  (xxxxx.xxxxxxx);
		}
		xxxxxxx( xxx, "xxxxxx xx xxxxxxx xx xxxxxxxxxxx xxx xxxxxxx! xxxx=%s;xxx=%s;xxxxx=%s", x->xxxx, x->xxx, x->xx );
		xxxxxxxxx (xxx_xxx_xxxxxxx,
			xxx_xxxxxxxxxxx_x3,
  			"x3xxxxx",
	  		xxx,
		  	"x3_xxx_xxxxx",
			xxxxxxxxxxx());
		xxxxxxxx( xxx_xxxxxx );
		return FALSE;
	}
	return TRUE;
}


/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxx
**---------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxxxxx x xxxx xxxx xxx xxxxxxxx xx x xxxxxxx xxx
**					 xxxx xxxxxxxxx xx xxxx xxx xxx xxxxxxxxxxxxx xx xxx xxx xxx
**
**
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
int xxxxxxxxxxxxxxxxxxxxxxxxxxxx(char *xxxx, xxxxx *x, char* xxxxxxxxxxxx) {

    xxxx_x xxxxxxxxxxxxxx = xxxx_xxxx;
    char xxxxxxxxxxxxxxxxx[17];
    xxxxxxxxxx *xxxxxxxxxxxxx;

	char x[1024];
	int xxxxxx;

	if (xxxxxxx(xxxx, x, xxxxxxxxxxxxxxxxx) == FALSE)
	  return FALSE;

	if (xxxx_xxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
	  return FALSE;

   if (xxxxxxxxxxxxxx==xxxx_xxxx) {
	   xxxxxxxxxxxxxx = xxxxxxxx("xxxxxxx_xxxxx", sizeof(xxxxxxxxxx), 0, 0);
	   if (xxxxxxxxxxxxxx==xxxx_xxxx) { xxx_xxxxx("xxxxxxxx xxxxxxx_xxxxx", x); return FALSE; }}
   else {
	   if (xxxxxx(xxxxxxxxxxxxxx) != 0) { xxx_xxxxx("xxxxxx xxxxxxx_xxxxx", x); return FALSE; }}

   if (xxxx_xxxx_xxxxxx_xxx_xxxxxxx(xxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxx, xxxxxxxxxxxx, x) == FALSE)
     return FALSE;

   xxxxxx ("\n%s================== xxx xxxxxxxx xx x xxxxxxx xxx =================== \n", xxxxxxxxx());
   xxxxxx ("%s xxxx       :\t%s \n", xxxxxxxxx(), xxxx);
   xxxxxx ("%s xxxxxx xxxx:\t%s \n", xxxxxxxxx(), x->xxx);
   xxxxxx ("%s xxxxxx xxxxxx:\t%s \n", xxxxxxxxx(), x->xx);
   xxxxxx ("%s xxxxxx:\t%s \n", xxxxxxxxx(), x->xxxxxx);
   xxxxxx ("%s xxxx:\t\t%s \n\n", xxxxxxxxx(), x->xxxx);

   xxxxxx ("%s %s\n", xxxxxxxxx(), xxxxxxxxxxxx);

   for (xxxxxx = 1; ; xxxxxx++)
   {
	   xxxxxxxxxxxxx =  xxxxxxxxx(xxxxxxxxxxxxxx, xxxxxx);

	   if (xxxxxxxxxxxxx == xxxx) break;

	   xxxxxxx(xxxxxxxxxxxxx->xxxxxxxx,x); xxxxx(x);
	   xxxxxx("%s\t%s \n", xxxxxxxxx(), x);
   }

   if (xxxxxx == 1)
     xxxxxx ("%s xx xxxxxxx xxxxx xx xxx xxxx xx xxx xxxxxxx xxx xx xxxxxxxxx.\n", xxxxxxxxx());


   if (xxxx_xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
	   return FALSE;

   if (xxxxxxxxxxxxxx != xxxx_xxxx) xxxxxxxx(xxxxxxxxxxxxxx);

   return TRUE;
}


/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxxxxxxx
**---------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxxxxx x xxxx xxxx xxx xxxxx xxxxxxx xxxx
**					 xxxx xxxxxxxxx xx xxxx xxx xxx xxxxxxxxxxxxx xx xxx xxx xxx
**					 xxx xx xxxxx xx xx xxx xxxxxxxxxxx.
**
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
int xxxxxxxxxxxxxxxxx(char *xxxx, xxxxx *x) {

    xxxx_x xxxxxxxxxxxxx = xxxx_xxxx;
	char x[1024];
	xxxxxxxxxx *xxxxxxxxxxxx;
    int xxxxxx;
    char xxxxxxxxxxxxxxxxx[17];

	if (xxxxxxx(xxxx, x, xxxxxxxxxxxxxxxxx) == FALSE)
	  return FALSE;

	if (xxxx_xxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
	  return FALSE;

   if (xxxxxxxxxxxxx==xxxx_xxxx) {
	   xxxxxxxxxxxxx = xxxxxxxx("xxxxxxx_xxxx",sizeof(xxxxxxxxxx), 0, 0);
	   if (xxxxxxxxxxxxx==xxxx_xxxx) { xxx_xxxxx("xxxxxxxx xxxxxxxxxx", x); return FALSE; }}
   else {
	   if (xxxxxx(xxxxxxxxxxxxx) != 0) { xxx_xxxxx("xxxxxx xxxxxxxxxx", x); return FALSE; }}

   if (xxxx_xxxx_xxxxxx_xx_xxxxxxx(xxxxxxxxxxxxxxxxx, xxxxxxxxxxxxx, x) == FALSE)
	   return FALSE;

   xxxxxx ("\n%s================== xxx xxxxxxx xxxx =================== \n", xxxxxxxxx());
   xxxxxx ("%s xxxx       :\t%s \n", xxxxxxxxx(), xxxx);
   xxxxxx ("%s xxxxxx xxxx:\t%s \n", xxxxxxxxx(), x->xxx);
   xxxxxx ("%s xxxxxx xxxxxx:\t%s \n", xxxxxxxxx(), x->xx);
   xxxxxx ("%s xxxxxx:\t%s \n", xxxxxxxxx(), x->xxxxxx);
   xxxxxx ("%s xxxx:\t\t%s \n\n", xxxxxxxxx(), x->xxxx);

   for (xxxxxx = 1; ; xxxxxx++)
   {
	   xxxxxxxxxxxx =  xxxxxxxxx(xxxxxxxxxxxxx,xxxxxx);

	   if (xxxxxxxxxxxx == xxxx) break;

	   xxxxxxx(xxxxxxxxxxxx->xxxx,x);
	   xxxxxx("%s xxxxxxx xxx %02d: %s\n", xxxxxxxxx(), xxxxxx, xxxxx(x));
   }

   if (xxxx_xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
	   return FALSE;

   if (xxxxxxxxxxxxx != xxxx_xxxx) xxxxxxxx(xxxxxxxxxxxxx);

   return TRUE;
}


/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxxx
**---------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxxx xxx x3xxxxxx xxxxxxxxxxxxx xxxx.
**
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
int xxxxxxxxxxxxx(char *xxxx, xxxxx *x, time_t xxxxxxxxxxxx, time_t* xxxxxxxxxxx, xxxxxxx_xxx_xxxxxx* xxxxxxxxxx)
{
    xxxx_x xxxxxxxxxxx = xxxx_xxxx;
    char xxxxxxxxxxxxxxxxx[17];
    char xxxxxxxxx[9];
    char xxxxxxxxx[7];
    struct xx *xx;

	/* xxx xxx xxxx1000293348 */
	time_t xxxxxxxxxxx;

	if (xxxxxxxxxxxx == 0) {
   	/*
	   xxx'x xxxxx xxxx xxx xxxxxxxxx
	*/
		xxxx(&xxxxxxxxxxxx);
		xxxxxxxxxxxx -= 24*3600;  /* 24 xxxxx */
	} else {
		/* xxx xxx xxxx1000293348 */
		/* xx xxxxxxxxxxxx xxxxx xxxx 24xxx, xxx xxxxxxxxxxxx 24xxx xxxx */
		xxxx(&xxxxxxxxxxx);
		if ((xxxxxxxxxxx - xxxxxxxxxxxx) > 86400)
			xxxxxxxxxxxx = xxxxxxxxxxx - 86400;

	}

	xx = xxxxxxxxx(&xxxxxxxxxxxx);
	xxxxxxxx(xxxxxxxxx, 9, "%x%x%d", xx);
	xxxxxxxx(xxxxxxxxx, 7, "%x%x%S", xx);

	if (xxxxxxx(xxxx, x, xxxxxxxxxxxxxxxxx) == FALSE)
	  return FALSE;

	if (xxxx_xxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
	   return FALSE;

	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "\nxxx xxxx xxxxxx xxxx xxxxx xxxx/xxxx: %s %s\n", xxxxxxxxx, xxxxxxxxx);
		xxxxxx  (xxxxx.xxxxxxx);
	}

    /* xxxx xxxxxx */
    if (xxxxxxxxxxx==xxxx_xxxx) {
      xxxxxxxxxxx = xxxxxxxx("xxxx_xxxxx",sizeof( xxxxxxxxxx),0,0);
	  if (xxxxxxxxxxx==xxxx_xxxx) { xxx_xxxxx("xxxxxxxx xxxx_xxxxx", x); return FALSE; }}
    else {
		if (xxxxxx(xxxxxxxxxxx) != 0) { xxx_xxxxx("xxxxxx xxxx_xxxxx", x); return FALSE; }}

	if (xxxx_xxxx_xxxxxx_xxx_xxxxxxx(x->xxxx, xxxxxxxxxxx, xxxxxxxxxx, x) == FALSE){
		/**** xxx xxx xxxx1000212006 ************************/
	   xxxx_xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x);
	   return FALSE;
	}

	if (xxxx_xxxx_xxxxxx_xx_xxxxxxxxxxxx(x->xxxx, xxxxxxxxxxx, xxxx(x->xx), x->xxx, xxxxxxxxxxxx, xxxxxxxxxxx, x) == FALSE){
		/**** xxx xxx xxxx1000212006 ************************/
	   xxxx_xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x);
	   return FALSE;
	}

   if (xxxx_xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
     return FALSE;

   if (xxxxxxxxxxx != xxxx_xxxx) xxxxxx(xxxxxxxxxxx);



	return TRUE;
}


/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxxxxxxxxxxx
**---------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxxx xxx x3xxxxxx xxxxxxxxxxxxx xxxx.
**
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
int xxxxxxxxxxxxxxxxxxxxx(char *xxxx, xxxxx *x, xxxxxxx_xxx_xxxxxx* xxxxxxxxxx)
{
    xxxx_x xxxxxxxxxxx = xxxx_xxxx;
    xxxxxxxxxx *xxxxxxxxxx;
	xxxxxxx xxxx;
	xxxxxxxxxx xxxxxxxxxxxxx;
	xxxxxxxxxx xxxxxxxxxxx;
    char x[1024], xxxxxxxxxxx[1024];
	char xxxxxxxxxx[2048];
    char xxxxxxxxxxxxxxxxx[17];
	char xxxxxxxxxx[41];
	char xxxxxxxxxxxxx[41] = "";
	char *xxx;
	char xxxxxx[12];
	char xxxxxx[10];
	char xxxxxxxxxxxx[41];
	FILE* xx, *xxxxxx;
	int xxxxx = TRUE;
	int x, xxxx, xxxxxxxxxxxxxxx = -1, xxxxxxxxx = -1;

    int xxxxxx;

	if (xxxxxxx(xxxx, x, xxxxxxxxxxxxxxxxx) == FALSE)
		return FALSE;

	if (xxxx_xxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
		return FALSE;

	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "\nxxx xxxx xxxxxxxxxxx xxxxxxx:\n");
		xxxxxx  (xxxxx.xxxxxxx);
	}

    /* xxxx xxxxxx */
    if (xxxxxxxxxxx==xxxx_xxxx) {
		xxxxxxxxxxx = xxxxxxxx("xxxx_xxxxx",sizeof( xxxxxxxxxx),0,0);
		if (xxxxxxxxxxx==xxxx_xxxx) { xxx_xxxxx("xxxxxxxx xxxx_xxxxx", x); return FALSE; }}
    else {
		if (xxxxxx(xxxxxxxxxxx) != 0) { xxx_xxxxx("xxxxxx xxxx_xxxxx", x); return FALSE; }}

	if (xxxx_xxxx_xxxxxx_xxx_xxxxxxx(x->xxxx, xxxxxxxxxxx, xxxxxxxxxx, x) == FALSE)
		return FALSE;

	if ((xx = xxxxx (xxxxxxxxxx->xxxxxxxx, "x")) == xxxx) {

		if ((xx = xxxxx (xxxxxxxxxx->xxxxxxxx, "x")) == xxxx) {

			xxxxxxxxxxxx (xxxxxxxxxx->xxxxxxxx, xxxxxxxxxxx(), xxxxxxxxx.xxxxxxxxxxxxx);
			return FALSE;
		}

		/* xxxxx xx xxxxxx xxxxxx xxxxxx */
		xxxxxxx(xx, "%-8s %-8s %-20s\t%-20s\t", "xxxx","xxxx","xxxxxxxx", "xxx xxxxxx");

		for (xxxxxx = 1; ; xxxxxx++)
		{

			xxxxxxxxxx =  xxxxxxxxx(xxxxxxxxxxx, xxxxxx);

			if (xxxxxxxxxx == xxxx) break;

			xxxxxxx(xxxxxxxxxx->xxxxxxx,x); xxxxx(x);
			if (*x == '\0')
				continue;

			xxxxxx(&xxxx, xxxxxxxxxx, sizeof(xxxxxxx));

			xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
			xxxxxxxxxxxxxxx = xxxx(x);

			xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,xxxxxxxxxxxx);xxxxx(xxxxxxxxxxxx);

			if (xxxxxxx(xxxxxxxxxxxx, xxxxxxxxxx->xxxxxxxx) == 0) {
				xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
				xxxxxxxxx = xxxx(x);
			}

			if (xxxxxxx(xxxxxxxxxx->xxxxxxx, "100", 3) != 0)
				continue;

   		    if (xxxxxxxxx < 0 || xxxxxxxxxxxxxxx != xxxxxxxxx)
  			  continue;

/*			xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x); xxxxx(x);
			xxxxxxx(xxxxxxxxxx->xxxxxxxx,x); xxxxx(x);
			xx (xxxxxxx(x, xxxxxxxxxx->xxxxxxxx) != 0)
				xxxxxxxx;
*/
			if (xxxx_xxxxxx_xxx_xxxxxxxxxxx(xxxxxxxxxxxxxxxxx, &xxxx, &xxxxxxxxxxx, x) == FALSE) {
				xxxxxx(xx);
				return FALSE;
			}

			xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x); xxxxx(x);
			xxxxxxx(xx, "%s[%s]\t", x, xxxxx(xxxxxxxxxxx.xxxxxxx));
		}
		xxxxxxx(xx, "\n");

	} else	{
		xxxxxx(xx);
		xx = xxxx;
	}

	if (xx == xxxx && (xx = xxxxx (xxxxxxxxxx->xxxxxxxx, "x+")) == xxxx) {

		xxxxxxxxxxxx (xxxxxxxxxx->xxxxxxxx, xxxxxxxxxxx(), xxxxxxxxx.xxxxxxxxxxxxx);
		return FALSE;
	}

	xxxxxxxxxxxxxxx = -1; xxxxxxxxx = -1;
	xxxxx = TRUE;
	/* xxxxx xx xxxxxxxxxxx xxxx xxxx */
	for (xxxxxx = 1; ; xxxxxx++)
	{

		xxxxxxxxxx =  xxxxxxxxx(xxxxxxxxxxx, xxxxxx);

		if (xxxxxxxxxx == xxxx) break;

		xxxxxxx(xxxxxxxxxx->xxxxxxx,x); xxxxx(x);
        if (*x == '\0')
			continue;

		xxxxxx(&xxxx, xxxxxxxxxx, sizeof(xxxxxxx));

	    xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
		xxxxxxxxxxxxxxx = xxxx(x);

		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,xxxxxxxxxxxx);xxxxx(xxxxxxxxxxxx);

		if (xxxxxxx(xxxxxxxxxxxx, xxxxxxxxxx->xxxxxxxx) == 0) {
			xxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
			xxxxxxxxx = xxxx(x);
		}

        if (xxxxxxx(xxxxxxxxxx->xxxxxxx, "100", 3) != 0)
			continue;

		if (xxxxxxxxx < 0 || xxxxxxxxxxxxxxx != xxxxxxxxx)
			continue;

/*
		xxxxxxx(xxxxxxxxxx->xxxxxxx,x);
        xxxx("xxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxx,x);
        xxxx("xxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxx,x);
        xxxx("xxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
        xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x);
        xxxx("xxxxxxxxxx",10,30,x);
*/
		xxxxxxx(xxxxxxxxxx->xxxxxxxx,xxxxxxxxxx); xxxxx(xxxxxxxxxx);

		xxx = xxxxxxxxxx;
		while (*xxx++) ;
		while (--xxx >= xxxxxxxxxx) if (*xxx == '_') break;
        while (--xxx >= xxxxxxxxxx) if (*xxx == '_') break;
        while (--xxx >= xxxxxxxxxx) if (*xxx == '_') { *xxx++; break; }

		if (xxxxxx(xxxxxxxxxxxxx, xxxxxxxxxx) != 0) {
			if (xxxxx == FALSE) {
			  xxxxxxx(xx, "\n");
			  xxxxxxx(xx, "%s\n", xxxxxxxxxx);
			}

			xxxxx = TRUE;
		}

		xxxxxx(xxxxxxxxxxxxx, xxxxxxxxxx);

		if (xxxx_xxxxxx_xxx_xxxxxxxxxxxxx(xxxxxxxxxxxxxxxxx, &xxxx, &xxxxxxxxxxxxx, x) == FALSE) {
			xxxxxx(xx);
			return FALSE;
		}

		if (xxxx_xxxxxx_xxx_xxxxxxxxxxx(xxxxxxxxxxxxxxxxx, &xxxx, &xxxxxxxxxxx, x) == FALSE) {
			xxxxxx(xx);
			return FALSE;
		}

		if (xxxxx == TRUE) {
            xxxxxxx(xxxxxxxxxxxxx.xxxxxxxxxx, xxxxxx); xxxxx(xxxxxx);
			xxxxxxx(xxxxxxxxxxxxx.xxxxxxxxxx, xxxxxx); xxxxx(xxxxxx);

 			xxxxxxx(xx, "%-8s %-8s %-20s\t%-20s\t", xxxxxx, xxxxxx, xxxxxxxxxx->xxxxxxxx, xxx);
			/* xxxxx xx xxxxxx xxxxxxxxxxx xxxx */
			xxxxxxx(xxxxxxxxxx, "%s %s", xxxxxxxxxx->xxxxxxxx, xxx);

			xxxxx = FALSE;
		}

		xxxxxxx(xxxxxxxxxx->xxxxxxxxxx,x); xxxxx(x);
		xxxx = xxxxxx(x) + xxxxxx(xxxxx(xxxxxxxxxxx.xxxxxxx)) + 2;
		xxxxxx(xxxxxxxxxxxxx.xxxxxxxxxx, x);
		xxxx -= xxxxxx(x);
		for (x = 0; x < xxxx; x++) xxxxxxx(xx, " ");
		xxxxxxx(xx, "%s", x);
		xxxxxxx(xx, "\t");
		xxxxxx(xxxxxxxxxx, " ");
		xxxxxx(xxxxxxxxxx, x);
	}

#ifndef WIN32
    xxxxxxx(xxxxxxxxxxx, "%s/xxxxxx %s %s", xxxxxxxxx(), xxxxxxxxxx->xxxxxxx, xxxxxxxxxx->xxxxxxxx);
	xxxxxx = xxxxx(xxxxxxxxxxx, "x" );
#else
    xxxxxxx(xxxxxxxxxxx, "%s\\xxxxxx %s %s", xxxxxxxxx(), xxxxxxxxxx->xxxxxxx, xxxxxxxxxx->xxxxxxxx);
	xxxxxx = _xxxxx(xxxxxxxxxxx, "xx" );
#endif

	if (xxxxx.xxxxxxx) {
		xxxxxxx (xxxxx.xxxxxxx, "xxxxx: %s\n", xxxxxxxxxxx);
	}

	if ( xxxxxx != xxxx) {

		xxxxxxx(xxxxxx, "%s\n", xxxxxxxxxx);
		if (xxxxx.xxxxxxx) {
			xxxxxxx (xxxxx.xxxxxxx, "xxxxxx: %s\n", xxxxxxxxxx);
		}

	} else
		xxxxxxxxxxxx ("xxxxxx", xxxxxxxxxxx(), xxxxxxxxx.xxxxxxxxxxxxx);

#ifndef WIN32
	xxxxxx(xxxxxx);
#else
	_xxxxxx(xxxxxx);
#endif

	xxxxxxx(xx, "\n");
	xxxxxx(xx);

	if (xxxx_xxxxxxxxxx(xxx_xxxxxx, xxxxxxxxx, xxxxxxxxx, xxxxxx, x) == FALSE)
		return FALSE;

	if (xxxxxxxxxxx != xxxx_xxxx) xxxxxx(xxxxxxxxxxx);

	return TRUE;
}



/* xxxxx xx xxxxxxxxxx xxx xx xxxxx xx xxxxxx xx xxxx xxxxxx xx x xxxxxx xxxx       */
/* xxxxx: xxx xx xxxxx xx xxxxxx xxxx, xxxxxx xx xxxxxxx xxxxxxxxx xx xxx xxxx      */
/* xxxxxxx: xxxxxxx xx xxx xx xxxxxxx, xxx_xx_xxx_xxxxx xx xxx xxx xxxxx xxxxxx xxx */
/*			xxxx xxx xxxxx xx xxx xxxx, xxx_xx_xxxxx xx xxx xxxxxx xx xxx xxxx      */

static int xxxxxxxx(char *xxxxxxxxx, int xxxx){

	char *xxxxxx;
	int x;
	int xxx = 0;

	if (xxxxxxxxx != xxxx){
		/* xxxxx xxx xx xxxxxx */
		xxxxxx = xxxxxxxxx(xxxxxxxxx," ");

		/* xx xxx xxx xx xxxxxxx xx xxx xxx xxxxx xxxxxx xx xxxxxxx*/
		if (!xxxxxx(xxxxxx, "xxx"))
			return(xxx_xx_xxxxx);

		/* xxx xxx xxxx xxxxxx xxxx 3 xxxxxx, xxx xxxx xxx xxxx*/
		if (xxxxxx(xxxxxx) == 3){

			/* xxxx xxx xx xxx xxxxxxxxxx xxx xxx xx xx xxxx xxxxxx*/
			for (x = 0; x < xxxx; x++){
				if (!xxxxxx(xxxxxx,xxx[x]))
					xxx++;
			}

			/* xxxxx xxx xxx xxxxxx xxxxx */
			for (x = 0; x < xxxxxxxxxxxxxx; x++) {
			    if (!xxxxxx(xxxxxx,xxxxxxxxxxx[x].xxxxxxxxx))
					xxx++;
			}

			/* xx xxx xx xxxxxxx xxxx 0 xxx xxx xxx xxxxx*/
			if (xxx > 0){
				return(xxx_xx_xxxxx);
			} else {
				return(xxx_xx_xxx_xxxxx);
			} /* xxx xx xxx > 0*/

		} else {
			return(xxxxxxx);
		} /* xxx xx xxxxxx... */


	} else {
		return(xxxxxxx);
	}/* xxx xx xxxxxxxxx != xxxx*/
}


/* xxxxx xx xxxxxxxxxx xxxxxxxx xxxxxx xx xxxxx xxx xxxxxx xx xxxx xxxxxx xx x xxxxxx xxxx */
/* xxxxx: xxxxxxxx xx xxxxx xx xxxxxx xxxx, xxxxxx xx xxxxxxxxx xxxxxxxxx xx xxx xxxx      */
static int xxxxxxxxxxxxx(char *xxxxxxxxxxxxxx, int xxxxxxxxx){

	char *xxxxxxxxxxx;
	int x;
	int xxx = 0;

	/* xx xxxxx xxxxxxxx xxxxxx xx xxx xxxxxxx */
	if (xxxxxxxxxxxxxx != xxxx){

		xxxxxxxxxxx = xxxxxxxxx(xxxxxxxxxxxxxx," ");

		if (!xxxxxx(xxxxxxxxxxx, "xxx"))
			return(xxxxx);


		/* xxx xxxxxxxx xxxxxx xxxx xxxxxx xxxx xxxxxxx xx xxxxxx */
		if (xxxxxx(xxxxxxxxxxx) == 2){

			/* xxxxx xx xxx xxxxxxxxxx xxxxxxxx xxxxxx xx xxxx xxxxxx*/
			for (x = 0; x < xxxxxxxxx; x++){
				if (!xxxxxx(xxxxxxxxxxx,xxxxxxxx[x].xx))
					xxx++;
			}

			/* xxxxx xx xxx xxxxxxxxxx xxxxxxxx xxxxxx xx x xxxxxx xxxx */
			for (x = 0; x < xxxxxxxxxxxxxx; x++){
				if (!xxxxxx(xxxxxxxxxxx,xxxxxxxxxxx[x].xxxxxxxxx))
					xxx++;
			}

			/* xx xxx xxxxxxxx xxxxxx xxx xxx xxxxx xx xxx xxxxxx xx xx xxxxxxx.*/
			if (xxx == 0){
				return(xxxxxxx);
			} else {
				return(xxxxx);
			}

		} else {
			return(xxxxxxx);
		} /*xxx xx xxxxxx... */

	} else {
		return(xxxxxxx);
	}/* xxx xx xxxxxxxxxxxxxx != xxxx */


}


/*---------------------------------------------------------------------------
** xxxxxxxxxxx:      xxxxxxxxxx xxx xxxxxxxx xxxx
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
static int xxxxxxxxxxx (void)
{
        /* xxx xxxxxxxxxxx xxxxxxxxx */
        static char xxxxxxxxxx[255];
        static char xxxxxxx[255];
        static char xxxxxxxxxx[255];
/*        xxxxxx xxxx xxxxxxxxxx[255]; */

		int x3xxxxxx = 0;
		int x3xxxxx = 0;
		FILE* xxx_xxxx;

        xxxxxxxxxxxxx = xxxxxx ("xxxxxx_x3xxxxx_xxxxxxxxxx");
        if (xxxxxxxxxxxxx == xxxx) {
		/* xxxxxxx 990217 xx xxx xxxx
		xxxxxxx (xxxxxxxxxx, "%x%x%x%x", xxxxxxxxx(),   xxxxxxxxxxx,
			xxxxxxxxxxx(), ".xxx"); xx */
            if (xxxxxxxxxxxxxxxx[0] == '\0')
				xxxxxxx(xxxxxxxxxx, "%s%s", xxxxxxxxxxx(), ".xxx");
			else
				xxxxxx(xxxxxxxxxx, xxxxxxxxxxxxxxxx);

			if (xxxxxxxxxxxxxxxxxx(xxxxxxxxxx, xxxxxxxxxx, xxxxxxxxx())){
				xxxxxxxxxxxxx = xxxxxxxxxx;
				x3xxxxx++;
			}

        } else {
			/*** xxxxx xxxx xxxx xxxxxx xxxxxx ***/
			xxx_xxxx = xxxxx(xxxxxxxxxxxxx,"x");
			if (xxx_xxxx != xxxx){
				xxxxxx(xxx_xxxx);
				x3xxxxx++;
			}
		}

        xxxxxxxxxx = xxxxxx ("xxxxxx_x3xxxxxx_xxxxxxxxxx");
        if (xxxxxxxxxx == xxxx) {
			if (xxxxxxxxxxxxxxxxxx(xxxxxxx, "x3xxxxxx.xxx", xxxxxxxxx())){
                xxxxxxxxxx = xxxxxxx;
				x3xxxxxx++;
			}
        } else {
			/*** xxxxx xxxx xxxx xxxxxx xxxxxx ***/
			xxx_xxxx = xxxx;
			xxx_xxxx = xxxxx(xxxxxxxxxx,"x");
			if (xxx_xxxx != xxxx){
				xxxxxx(xxx_xxxx);
				x3xxxxxx++;
			}
		}

/*
		xxxxxxxxxxxxx = xxxxxx ("xxxxxx_x3xxxxx_xxxxxxxxxx");
		xx (xxxxxxxxxxxxx == xxxx) {
			xxxxxxx (xxxxxxxxxx, "%x%x%x%x", xxxxxxxxx(),   xxxxxxxxxxx,
				xxxxxxxxxxx(), ".xxx");
			xxxxxxxxxxxxx = xxxxxxxxxx;
		}
*/

		if (x3xxxxxx == 0)
			xxxxxxxxxxxx("x3xxxxxx.xxx","x3xxxxx","");

		if (x3xxxxx == 0)
			xxxxxxxxxxxx("x3xxxxx.xxx","x3xxxxx","");

		if ((x3xxxxxx != 0) && (x3xxxxx != 0)){
			return(1);
		} else {
			return(0);
		}
}

/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxxxxx(xxxx)
**---------------------------------------------------------------------------
** xxxxxxxxxxx:      xxxxxxxxxx xxxxxxx xxxxxxxx xxxx
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
static void xxxxxxxxxxxxxxx (void)
{
        static char  xxxxxxxxxxx[256];

        /* xxx xxxxxxxxxxx xxxxxxxxx */
        xxxxxxxxxx = xxxxxx ("xxxxxx_xxxxxxxxxxx");
        if (xxxxxxxxxx == xxxx) {
#ifdef WIN32
                xxxxxxx (xxxxxxxxxxx, "%s%s%s", xxxxxxx.xxxxxxxxxxxxxxxx, xxxxxxx, "x3xxxxx.xxx");
#else
                xxxxxxx (xxxxxxxxxxx, "%s%s%s", xxxxxxx.xxxxxxxxxxxxxxx, xxxxxxx, "x3xxxxx.xxx");
#endif
        }
        else {
                xxxxxxx (xxxxxxxxxxx, "%s%s%s", xxxxxxxxxx, xxxxxxx, "x3xxxxx.xxx");
        }
        xxxxxxxxxx = xxxxxxxxxxx;
}


/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxxxxxx
**---------------------------------------------------------------------------
** xxxxxxxxxxx:      xxxxx xxxxx xx xxx xxxx xx xxx xxxxxx xxxxx
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
static void xxxxxxxxxxxxxxxx(void) {

  char* xxxxx;
  char  xxxx[xxxx_xxxx_xxx+1];
  xxx_xxxx_xxxx = xxx_xxxx_xxxx;

  while (xxx_xxxx_xxxx) {

		xxxxxxx (xxxx, xxx_xxxx_xxxx->xxxx, xxxx_xxxx_xxx);
		xxxx[xxxx_xxxx_xxx-1] = '\0';

		/*----------------------------------------------------*/
		/* xxx xxxxxxx                                        */
		/*----------------------------------------------------*/
		xxxxx = xxxxxx (xxxx, "=");
		if (xxxxx && xxxxxx (xxxxx, "xxxxxxxxxxxxxxxx") != xxxx) {

		  /*----------------*/
		  /* xxx xxxx       */
		  /*----------------*/
		  xxxxx = xxxxxx (xxxx, "=");
          if (xxxxx(xxxx, xxxxxxxxx(xxxxx, xxxx))) {

			 if (xxxxx = xxxxxx (xxxx, "=")) {
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				if (xxxxx = xxxxxx (xxxx, "=")) {
				  xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx, xxxx));
				  /*----------------*/
				  /* xxx xxxxxx     */
				  /*----------------*/
				  if (xxxxx = xxxxxx (xxxx, "=")) {
					 xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx, xxxx));
					 xxxxxxxxxxxxxx++;
				  }
				}
			 }
		  }
		}
      /*-------------------------------------------------*/
      /* xxx xxxx xxxx                                   */
      /*-------------------------------------------------*/
      xxx_xxxx_xxxx = xxx_xxxx_xxxx->xxxx;
  }
}


/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxx
**---------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxxx xxx x3xxxxxx xxxxxxxxxxxxx xxxx.
**
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
static void xxxxxxxxxxxxxx (void)
{
	/* xxxxxxxxx xx xxxxx xxxxx xxxxxx xxxx xxxxxxx */

	xxxxxxxx_xxxxxx		 xxxxxxxxxxx;	/* xxxx. xxxxxxxx xxxxx */
	xxxxx_xxxx_xxxxxx	 xxxxxxxx;		/* xxxx. x3xxxxx xxxxxx. xxxxxxx */
	xxxxx_xxxxxx_xxxxxx  xxxxxxxxx;     /* xxxx. x3xxxxx xxxxxx xxxxxxx */

	/*xxx	xxxxxxxx;						 xxxx xxx xxxxx xxx */
	/*xxx xxxxxxxxxxxxx;					 xxxx xxx xxxxx xxxxxxxx */


	char* xxxxx;
	char* xxxxxxx = xxxx;
	char* xxxxxxxx = xxxx;
	char  xxxx[xxxx_xxxx_xxx+1];

	xxx_xxxx_xxxx = xxx_xxxx_xxxx;
	while (xxx_xxxx_xxxx) {

		xxxxxxx (xxxx, xxx_xxxx_xxxx->xxxx, xxxx_xxxx_xxx);
		xxxx[xxxx_xxxx_xxx-1] = '\0';

		/*----------------------------------------------------*/
		/* xxx xxxxxxx                                        */
		/*----------------------------------------------------*/
		xxxxx = xxxxxx (xxxx, "=");
		if (xxxxx) {
			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxx                               */
			/*-------------------------------------------------*/
			if (xxxxxx (xxxxx, "xxxxxxxx") != xxxx) {
				/*----------------*/
				/* xxxxxxxx xxxxx */
				/*----------------*/
				xxxxxxxxxxx.xxx = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
				if (!xxxxxx(xxxxxxxxxxx.xxx, "xxxxxxxxxxxx"))
					xxxxxxxxxxx.xxxxxxxx = xx_xx_xx_xxxxx;
				if (!xxxxxx(xxxxxxxxxxx.xxx, "xxxxxxxxxxxxxx"))
					xxxxxxxxxxx.xxxxxxxx = xx_xx_xx_xxxxx;
				if (!xxxxxx(xxxxxxxxxxx.xxx, "xxxxxxxxxxxxxxx"))
					xxxxxxxxxxx.xxxxxxxx = xx_xx_xx_xxxxxx;
				if (!xxxxxx(xxxxxxxxxxx.xxx, "xxxxxxxxxxxxxxxx"))
					xxxxxxxxxxx.xxxxxxxx = xx_xx_xx_xxx;

				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxxx)
					xxxxxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxx)
					xxxxxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxx, xxxx));

				/* xxx xx xxx xx xxxxxxxxxx xx xxxxx xx xxxxx xxx xxxx xxxxxx */
				/* xxxx xx xxxxx xx xxxxx xxxxxxxxxx xxx xxxxxxxx xxxxxx. */
				if (xxxxxxxx && xxxxxxx) {
					xxxxxxxx[xxxxxxxxxxx].xxx = xxxxxx(xxxxxxxxxxx.xxx);
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxx = xxxxxxxxxxx.xxxxxxxx;
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxxxxx.xxxxxxxxx);
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxxxxx.xxxxxxxxx);


					/*----------------*/
					/* xxxxxx/xxxxxxx */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx)
						xxxxxxxx[xxxxxxxxxxx].xxxxxxx = xxxx (xxxxx);
					/*----------------*/
					/* xxxxxxxx       */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx) {
						if (xxxxxx (xxxxx, "xxxxxxx") != xxxx)
							xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxx = xxx_xxx_xxxxxxx;
						if (xxxxxx (xxxxx, "xxxxxx") != xxxx)
							xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxx = xxx_xxx_xxxxxx;
						if (xxxxxx (xxxxx, "xxxxxxx") != xxxx)
							xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxx = xxx_xxx_xxxxxxx;
						if (xxxxxx (xxxxx, "xxxxxxxx") != xxxx)
							xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxx = xxx_xxx_xxxxxxxx;
						if (xxxxxx (xxxxx, "xxxxx") != xxxx)
							xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxx = xxx_xxx_xxxxx;
						if (xxxxxx (xxxxx, "xxxxx") != xxxx)
							xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxx = xxx_xxx_xxxxx;
						xxxxxxxxxxx++;
						/* xxxxxxxx xxx xxxxxxxxx xx xxxxx xxxxxx*/
						xxxxxxxxxxxxxxxx(xxxxxxxxxxx,xxx_xxxxxxxx);
					}
				} /* xxx xx (xxxxxxxx && xxxxxxxx) */
			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxxxx		                       */
			/*-------------------------------------------------*/
			} else if (xxxxxx (xxxxx, "xxxxxxxxxx") != xxxx) {
				xxxxx = xxxxxx (xxxx, "=");
				if (xxxxx) xxxxxxxxxx = xxxx(xxxxx);
			} else if (xxxxxx (xxxxx, xxx_xxxx) != xxxx) {
				xxxxx = xxxxxx (xxxx, "=");
				if (xxxxx) xxx_xxxx = xxxx(xxxxx);
				if (xxxxx.xxxxxxx){
					xxxxxxx(xxxxx.xxxxxxx,"xxx xxxxxxxxxxxxx xxxx xxx xx %i\n", xxx_xxxx);
					xxxxxx(xxxxx.xxxxxxx);
				}
			}
			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxxxxxxxxx	                       */
			/*-------------------------------------------------*/
			else if (xxxxxx (xxxxx, "xxxxxxxxxxxxxxx") != xxxx) {
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxxx)
					xxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxx)
					xxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxx, xxxx));

				if (xxxxxxxx && xxxxxxx) {
					if (xxxxx = xxxxxx (xxxx, "=")) {
						/* xxxxxxxx xxxx */
						xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
						if (xxxxx = xxxxxx (xxxx, "=")) {
							/* xxxxxxxx xxxx */
							xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
							if (xxxxx = xxxxxx (xxxx, "=")) {
								/* xxx xxxxxxxx xxxxxxxx */
								xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
								if (xxxxx = xxxxxx (xxxx, "=")) {
									/* xxxxxxxx */
									xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
									if (xxxxx = xxxxxx (xxxx, "=")) {
										/* xxxxxxx xxx */
										xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
										if (xxxxx = xxxxxx (xxxx, "=")) {
											/* xxxxxxx */
											xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
											xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxx.xxxxxxxxx);
											xxxxxxxxxxxxxx[xxxxxxxxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxx.xxxxxxxxx);
											xxxxxxxxxxxxxxxxx++;
										}
									}
								}
							}
						}
					}
				}
			}
			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxxxxxxxx                         */
			/*-------------------------------------------------*/
			else if (xxxxxx (xxxxx, "xxxxxxxxxxxxxx") != xxxx) {
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxxx)
					xxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxx)
					xxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxx, xxxx));

				if (xxxxxxxx && xxxxxxx) {
					if (xxxxx = xxxxxx (xxxx, "=")) {
						/* xxxxxxx xxx */
						xxxxxxxxxx[xxxxxxxxxxxxx].xxxxxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
						if (xxxxx = xxxxxx (xxxx, "=")) {
							/* xxxxxxx */
							xxxxxxxxxx[xxxxxxxxxxxxx].xxxxxxx = xxxxxx(xxxxxxxxx(xxxxx,xxxx));
							xxxxxxxxxx[xxxxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxx.xxxxxxxxx);
							xxxxxxxxxx[xxxxxxxxxxxxx].xxxxxxxxx = xxxxxx(xxxxxxxx.xxxxxxxxx);
							xxxxxxxxxxxxx++;
						}
					}
				}
			}
			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxxxxxxxxxxxxxxxx                 */
			/*-------------------------------------------------*/
			else if (xxxxxx (xxxxx, "xxxxxxxxxxxxxxxxxxxxxx") != xxxx) {
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxxx)
					xxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxxx, xxxx));
				if (xxxxx = xxxxxx (xxxx, "=")) {
					xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxxx = xxxx(xxxxx);
					if (xxxxx && xxxxxxxx) {
						if (xxxxx = xxxxxx (xxxx, "=")) {
							/* xxxxxxxxxxx xxxxxx/xxxxxxx */
							xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxx = xxxx(xxxxx);
							xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxxx (xxxxxxxx.xxxxxxxxx);
							xxxxxxxxxxxxxx++;
						}
					}
				}

			}
			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxxxxx                            */
			/*-------------------------------------------------*/
			else if (xxxxxx (xxxxx, "xxxxxxxxxxx") != xxxx) {
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxxx)
					xxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxx)
					xxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxx, xxxx));

				/* xxx xx xxx xx xxxxxxxxxx xx xxxxx xx xxxxx xxx xxxx xxxxxx */
				/* xxxx xx xxxxx xx xxxxx xxxxxxxxxx xxx xxxxxxxxx xxxxxx. */
				if (xxxxxxxx && xxxxxxx){
					xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxx = xxxxxx (xxxxxxxx.xxxxxxxxx);
					xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxx = xxxxxx (xxxxxxxx.xxxxxxxxx);


					/*----------------*/
					/* xxx. xxxx      */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx) {
						int x, x;
						char *x;

						x = xxxxxxxxx[xxxxxxxxxxxx].xxxxxxx = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
						xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxxxxx[0] = xxxxxxxxx[xxxxxxxxxxxx].xxxxxxx;
						xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxxxxxxxx = 0;
						x = (int)xxxxxx(x);
						for (x = 0; x < x; x++) {
							if (x[x] == '\\') {
								x[x] = '\0';
								xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxxxxx[xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxxxxxxxx] =
									&(x[x + 1]);
								xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxxxxxxxx++;
								/**** xxxxx xx xxxxx xxxxxx xxx xxxxxxxx ***/
								/*xxxxxxxxxxxxxxxx(xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxxxxxxxxx,xxx_xxxx_xxxxxxxx);*/
							}
						}
					}
					/*----------------*/
					/* xxxxxx/xxxxxxx */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx)
						xxxxxxxxx[xxxxxxxxxxxx].xxxxxxx = xxxx (xxxxx);
					/*----------------*/
					/* xxx xxxxx      */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx) {
						xxxxxxxxx[xxxxxxxxxxxx].xxxxxxxx = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
						xxxxxxxxxxxx++;
						/* xxxxxxxx xxx xxxxxxxxx xx xxxxx xxxxxx*/
						xxxxxxxxxxxxxxxx(xxxxxxxxxxxx,xxx_xxxxx_xxxx);
					}
				} /* xxx xx ((xxxxxxxx == xxx_xx_xxxxx).... */
			}


			else if (xxxxxx (xxxxx, "xxxxxxxxxxxxx") != xxxx || xxxxxx (xxxxx, "xxxxxxxxxxxxxx") != xxxx) {
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxxx)
					xxxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxxxx = xxxxxx (xxxx, "=");
				if (xxxxxxx)
					xxxxxxxxx.xxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxxxx, xxxx));

				/* xxx xx xxx xx xxxxxxxxxx xx xxxxx xx xxxxx xxx xxxx xxxxxx */
				/* xxxx xx xxxxx xx xxxxx xxxxxxxxxx xxx xxxxxxxxx xxxxxx. */
				if (xxxxxxxx && xxxxxxx){
					xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxxx (xxxxxxxxx.xxxxxxxxx);
					xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxxx (xxxxxxxxx.xxxxxxxxx);

					/*----------------*/
					/* xxxxxxxxxxxxx  */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx)
						xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
					/*----------------*/
					/* xxxxxxxxxxxx   */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx)
						xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxxx = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
					/*----------------*/
					/* xxxxxx/xxxxxxx */
					/*----------------*/
					xxxxx = xxxxxx (xxxx, "=");
					if (xxxxx) {
						xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxx = xxxx (xxxxx);
						xxxxxxxxxxxxxx++;
					}
				} /* xxx xx ((xxxxxxxx == xxx_xx_xxxxx*/

			}
			/*-------------------------------------------------*/
			/* xxxxxxx: xxxxxxxxxxxxxxxxx                      */
			/*-------------------------------------------------*/
			else if (xxxxxx (xxxxx, "xxxxxxxxxxxxxxxxx") != xxxx) {

				/*----------------*/
				/* xxx xxxxxxxx   */
				/*----------------*/
				xxxxx = xxxxxx (xxxx, "=");
				if (xxxxx)
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxx  = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxx = xxxxxx (xxxx, "=");
				if (xxxxx)
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxxx  = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxx     */
				/*----------------*/
				xxxxx = xxxxxx (xxxx, "=");
				if (xxxxx)
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxxx	 = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
				/*----------------*/
				/* xxx xxxxxxxx   */
				/*----------------*/
				xxxxx = xxxxxx (xxxx, "=");
				if (xxxxx) {
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxx = xxxxxx (xxxxxxxxx(xxxxx, xxxx));
				}
				/*----------------*/
				/* xxxx xxxx xxxx */
				/*----------------*/
				xxxxx = xxxxxx (xxxx, "=");
				if (xxxxx) {
					xxxxxxxx[xxxxxxxxxxx].xxxxxxxxxxxx = xxxx(xxxxxxxxx(xxxxx, xxxx));
					xxxxxxxxxxx++;
				}

			}
      }

      /*-------------------------------------------------*/
      /* xxx xxxx xxxx                                   */
      /*-------------------------------------------------*/
      xxx_xxxx_xxxx = xxx_xxxx_xxxx->xxxx;
   }
}

/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxxxxxxxxxxxx
**---------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxx xx xxx xxxxxxx xxx xx xxx xxxxxxx, xxxxxx xx xxxxxxxxxx
**
** xxxxxxxxxxxxxx:   xxxx
** xxxxxxxxxxxxxxx:  xxxx
** xxxxxx xxxxxx:    xxxx
**--------------------------------------------------------------------------*/
static void xxxxxxxxxxxxxx()
{
        int x,x;
        int xxxxx = FALSE;

        xxxxxxxxxxxxxx = 0;

		/* xxx xxxxxx xxxxx xx xxxxxxx xxxx */
		if (xxxxxxxxxxxxxx > 0) {
			for (x = 0; x < xxxxxxxxxxxxxx; x++) {
				/*** xxx xxx xxxxx 24271 ***/
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxx = xxxxxxxxxxx[x].xxxxxxxxxx;
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxxxxxxxx[x].xxxxxxxxx;
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxxxxxxxx[x].xxxxxxxxx;
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxx = "xxxxxx";
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxxx = 0;

				for (x=0; x < xxxxxxxxxxx; x++) {
						if ((!xxxxxx(xxxxxxxx[x].xxxxxxxxx, xxxxxxxxxxx[x].xxxxxxxxx)) &&
								(!xxxxxx(xxxxxxxx[x].xxxxxxxxx, xxxxxxxxxxx[x].xxxxxxxxx)) &&
								(!xxxxxx(xxxxxxxx[x].xxxxxxxxxxx, xxxxxxxxxxx[x].xxxxxxxxxx)))
									xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxxx = xxxxxxxx[x].xxxxxxxxxxxx;
				}

				xxxxxxxxxxxxxx++;
			}
		}

		/* xxxx xxxxxxxxxx xxxxxx xxxx xxx xxxxxxx */
		for (x=0; x < xxxxxxxx; x++) {
			    xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxx = xxxx;
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxx[x].xxx;
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxx = xxxxx[x].xx;
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxx = xxxxx[x].xxxxxxxx;
				xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxxx = 0;

				for (x=0; x < xxxxxxxxxxx; x++) {
						if ((!xxxxxx(xxxxxxxx[x].xxxxxxxxx, xxxxx[x].xxx)) &&
								(!xxxxxx(xxxxxxxx[x].xxxxxxxxx, xxxxx[x].xx)) &&
								(!xxxxxx(xxxxxxxx[x].xxxxxxxxxxx, xxxx)))
									xxxxxxxxxxx[xxxxxxxxxxxxxx].xxxxxxxxxxxx = xxxxxxxx[x].xxxxxxxxxxxx;
				}

				xxxxxxxxxxxxxx++;
		}
}
/*--------------------------------------------------------------------------
**
** xxxxxxxxxxx:      xxxxx xxx xxxxxxx xxxx
**
** xxxxxxxxxxxxxx:   xxxxxxxx
**
** xxxxxxxxxxxxxxx:  xxxx
**
** xxxxxx xxxxxx:    xxxx
**
**--------------------------------------------------------------------------*/
static int xxxxxxxxxxxxxxx (char* xxxxxxxx)
{
        FILE* xx;
        int   x;
        int   xxxxxx=TRUE;
		time_t xxxxxxxxxxxxxxxxx;



		xxxx(&xxxxxxxxxxxxxxxxx);


        /*-------------------------------------------------------*/
        /* xxxxxxx xxxx xxxxxx                                   */
        /*-------------------------------------------------------*/
        if ((xx = xxxxx (xxxxxxxx, "x")) != xxxx) {

                /*-------------------------------------------------------*/
                /* xxxxx xxxxxx                                          */
                /*-------------------------------------------------------*/
                xxxxxxx (xx, "");
                xxxxxxx (xx, "#--------------------------------------------------------------------\n");
                xxxxxxx (xx, "#--------------------------------------------------------------------\n");
                xxxxxxx (xx, "# xxxxxxx        xxx xxxxxx  xxx xxxxxx  xxx xxxxxxxx xxxxxxxxxxxx\n");
                xxxxxxx (xx, "#      \n");
                for (x = 0 ; x < xxxxxxxxxxxxxx; x++)  {

                        /*xxxxxxxxxxx[x].xxxxxxxxxxxx = xxxxxxxxxxxxxxxxx;*/
                        xxxxxxx (xx, "xxxxxxxxxxxxxxxxx  =%s     =%s   =%s   =%s   =%lu\n",
							    /*** xxx xxx xxxxx24271 ***/
							    xxxxxxxxxxx[x].xxxxxxxxxxx,
                                xxxxxxxxxxx[x].xxxxxxxxx,
                                xxxxxxxxxxx[x].xxxxxxxxx,
                                xxxxxxxxxxx[x].xxxxxxxx,
                                xxxxxxxxxxx[x].xxxxxxxxxxxx);
						xxxxxx(xx);


                }
                xxxxxx (xx);
        }

        /*-------------------------------------------------------*/
        /* xxxxx: xxxxxxxxxxxxx xxxx xxx xxxxxx                  */
        /*-------------------------------------------------------*/
        else {
                xxxxxxxxxxxx (xxxxxxxx, xxxxxxxxxxx(), xxxxxxxxx.xxxxxxxxxxxxx);
                xxxxxx = 0;
        }
        return (xxxxxx);

}


static void xxxxxxxxxxxx40xxxxxx(void) {

    int xxxxxxxx;

	time_t xxxxxxxxxxxx;
    time_t xxxxxxxxxxx;
    int  x, x, xx1, xx2, xxxxx = FALSE;
    /* , xxxxxxx = xxxxx; */
	char *xxxxxxx;
	xxxxx xxxxxxxx;
	int xxxxxxxxxxx = 0;
	int xxxxxxxxxxxxxxxxxx = 0;

    for (xxxxxxxx = 0; xxxxxxxx < xxxxxxxxxxxxxx; xxxxxxxx++)
    {
		if (xxxxx.xxxxxxx){
			xxxxxxx(xxxxx.xxxxxxx,"xxxxxxxxxx xxxx=%s xxx=%s xxxxx=%s\n", xxxxxxxxxxx[xxxxxxxx].xxxxxxxxxxx, xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx, xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx);
			xxxxxx(xxxxx.xxxxxxx);
		}
		/**** xxx xxx xxxx1000209956 / xxxx1000214383 ***/
		/* xx xxx xxxxxx xxxx xxx.xx xx xx xxx. xx xxxxxxxx xxx xxx xxxxxxxx       */
		/* xx xxx. xxx xxxxx xxx xxx xxx.xx xxxx xxx xxxx xxxx xx xxx. xx xxxx xxx */
		/* xx xxxxx xxx xxxxxxx xxxxxx                                             */
		xxxxxxxxxxxxxx = 1;
		/***************************************************************************/
        xxxx(xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx);
        xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx;
        xxxxxxxxxxx[xxxxxxxx].xxxxxxxx;
        xxxxxxxxxxxx = xxxxxxxxxxx[xxxxxxxx].xxxxxxxxxxxx;
        xxxxxxxxxxx = xxxxxxxxxxxx;

		xxxxxxx = xxxx;

		/* xxx xxx xxxx xxx xxxxxxxxx */

        xxxxx = FALSE;
		if (xxxxx.xxxxxxx){
			xxxxxxx(xxxxx.xxxxxxx,"xxxxxxx xx xxxxxxxxxxxxx xxx xxxxx xxxx...\n");
			xxxxxx(xxxxx.xxxxxxx);
		}
		for (x = 0; x < xxxxxxxx; x++) {
            if ((!xxxxxx(xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx, xxxxx[x].xxx)) &&
                (!xxxxxx(xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx, xxxxx[x].xx))) {


				/* xxxxxxx = xxxxx; */
				/*xxx (x = 0 ; x < xxxxxxxxxxx; x++)  {

					xx (!xxxxxx(xxxxxxxx[x].xxx, xxxxx[x].xxx) &&
						!xxxxxx(xxxxxxxx[x].xx, xxxxx[x].xx) &&
						xxxxxxxx[x].xxxxx == xxxx_xxxx_xxxx) {
						xxxxxxx = xxxx;
						xxxxx;
					}
				}*/


				xxxxxx (xxxxxxxx.xxxx,	 xxxxx[x].xxxx);
				xxxxxx (xxxxxxxx.xxx,      xxxxx[x].xxx);
				xxxxxx (xxxxxxxx.xxxxxxxx, xxxxx[x].xxxxxxxx);
				xxxxxx (xxxxxxxx.xx,       xxxxx[x].xx);
				xxxxxx (xxxxxxxx.xxxxxx,   xxxxx[x].xxxxxx);
				xxxxxx (xxxxxxxx.xxxx,     xxxxx[x].xxxx);
				xxxxxx (xxxxxxxx.xxxxxxxx, xxxxx[x].xxxxxxxx);
				xxxxxx (xxxxxxxx.xxxxxxxx, xxxxx[x].xxxxxxxx);

				xxxxx = TRUE;
				if (xxxxx.xxxxxxx){
					xxxxxxx(xxxxx.xxxxxxx,"xxxxx xxxxxxxx...\n");
					xxxxxx(xxxxx.xxxxxxx);
				}
				break;
            }
		}

		if (!xxxxx) {
			if (xxxxx.xxxxxxx){
				xxxxxxx(xxxxx.xxxxxxx,"xxxxxxx xx xxxxxx xxxxxxxxxx xxxxxxxxxxxxx...\n");
				xxxxxx(xxxxx.xxxxxxx);
			}
			for (x = 0; x < xxxxxxxxxxxxxx; x++) {

				if ((!xxxxxx(xxxxxxxxxxx[xxxxxxxx].xxxxxxxxxxx, xxxxxxxxxxx[x].xxxxxxxxxx)) &&
					(!xxxxxx(xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx, xxxxxxxxxxx[x].xxxxxxxxx)) &&
					(!xxxxxx(xxxxxxxxxxx[xxxxxxxx].xxxxxxxxx, xxxxxxxxxxx[x].xxxxxxxxx))) {

					 xxxxxxx = xxxxxxxxxxx[x].xxxxxxxxxx;

					  /*-------------------------------------------------------------*/
					  /* xxx xxxx xx xxxxxxx xxxxxxxxxxxxx                           */
					  /*-------------------------------------------------------------*/
					  for (x = 0; x < xxxxxxxxxxx; x++) {

						  xx1 = xxxx (xxxxxxxxxxx[x].xxxxxxxxx);
						  xx2 = xxxx (xxxxxxx[x].xxxxxxxxx);

						  if ((xxxxx (xxxxxxx, xxxxxxx[x].xxxx)) &&
							  (!xxxxxx (xxxxxxxxxxx[x].xxxxxxxxx, xxxxxxx[x].xxxxxxxxx)) &&
							  (xx1 == xx2)) {

    						  xxxxxx (xxxxxxxx.xxxx,	 xxxxxxx);
							  xxxxxx (xxxxxxxx.xxx,      xxxxxxx[x].xxxxxxxxx);
							  xxxxxx (xxxxxxxx.xxxxxxxx, "");
							  xxxxxx (xxxxxxxx.xx,       xxxxxxx[x].xxxxxxxxx);
							  xxxxxx (xxxxxxxx.xxxxxx,   xxxxxxx[x].xxxxxx);
							  xxxxxx (xxxxxxxx.xxxx,     xxxxxxx[x].xxxx);
							  xxxxxx (xxxxxxxx.xxxxxxxx, xxxxxxx[x].xxxxxxxx);
							  xxxxxx (xxxxxxxx.xxxxxxxx, xxxxxxx[x].xxxxxxxx);
							  xxxxx = TRUE;
							  if (xxxxx.xxxxxxx){
								xxxxxxx(xxxxx.xxxxxxx,"xxxxx xxxxxxxx...\n");
								xxxxxx(xxxxx.xxxxxxx);
							  }
							  break;
						  }
					  }
					break;
				}
			}
		}
			if (xxxxx)  {
				for (x = 0; x < xxxxxxxxxxxxx; x++) {
					if ((xxxxxx(xxxxxxxxxx[x].xxxxxxxxx, "xxx") == 0 ||
						xxxxxx(xxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx.xxx) == 0) &&
						(xxxxxx(xxxxxxxxxx[x].xxxxxxxxx, "xxx") == 0 ||
						!xxxxxx(xxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx.xx))) {

						xxxxxxxxxxxxxxxxxxx( &xxxxxxxx );

						if (xxxxxxx_xxxx) {
							xxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxx, &xxxxxxxx, xxxxxxxxxxxx);
							break; /* xxxx xxx xxxxxxxx xxx xxx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxx;
									  xxxxx'x xxxx xxxx xxxx xxxx xx xxx xxxx !!!
									  xxxx xxx xxx xxx xxxxxxxxxxxxx */
						}
						else if (xxxxxxx_xxx) {
							xxxxxxxxxxxxxxxxx(xxxxxxx, &xxxxxxxx);
							break; /* xxxx xxx xxxxxxxx xxx xxx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxx;
									  xxxxx'x xxxx xxxx xxxx xxxx xx xxx xxxx !!!
									  xxxx xxx xxx xx xxx xxx xxx xxxxxxxxxxxxx */
						}
						else
							xxxxxxxxxxxxx(xxxxxxx, &xxxxxxxx, xxxxxxxxxxxx, &xxxxxxxxxxx, &xxxxxxxxxx[x]);
					}
				}

				/* xxxx xxx xxx xx xxx xxx xxx xxxxxxxxxxxxx; xxx xxxxxxxxxx xx xxx xxxxxx xxx */
				for (x = 0; x < xxxxxxxxxxxxxxxxx; x++) {
					if ((xxxxxx(xxxxxxxxxxxxxx[x].xxxxxxxxx, "xxx") == 0 ||
						xxxxxx(xxxxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx.xxx) == 0) &&
						(xxxxxx(xxxxxxxxxxxxxx[x].xxxxxxxxx, "xxx") == 0 ||
						!xxxxxx(xxxxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx.xx))) {

						xxxxxxxxxxxxxxxxxxxxx(xxxxxxx, &xxxxxxxx, &xxxxxxxxxxxxxx[x]);
					}
				}

			} else {
				if (xxxxx.xxxxxxx){
					xxxxxxx(xxxxx.xxxxxxx,"xxxxxxxxxxxxx xxxxxxx: xxx xxx xxxx xxxxx xxxxxxxxxxx xxx xxxxxxxxxx xxxx!\n");
					xxxxxx(xxxxx.xxxxxxx);
				}
			}
		/**** xxx xxx xxxx1000209956 / xxxx1000214383 ***/
        if (xxxxxxxxxxxxxx == 1)
			xxxxxxxxxxx[xxxxxxxx].xxxxxxxxxxxx = xxxxxxxxxxx;
	}
}

/*---------------------------------------------------------------------------
** xxxxxxxx xxxxxxxxxxxxxxxxxxx
** xxxxxx xxx xxxxxxxxxxxx xxxxx xxxxxxx xxx xxxxxxxxxxxx xxxxxx xx xxxxxxxxx
** xxx xxxx xxx xxxxxxxx
**-------------------------------------------------------------------------*/
void xxxxxxxxxxxxxxxxxxx( xxxxx* xxxxxxxx )
{
	int x;
	int xxxxxxxxxxxx = 9;
	int xxxxxxxx = 9;
	xxxxxxxx->xxxxxxxxxxxxxxxxxx = 0;
	if (xxxxx.xxxxxxx){
		xxxxxxx(xxxxx.xxxxxxx,"xxxxxxxx xx xxxxxx %s,%s:%s xxx xxxxxxxxxxxx xxxxxxx...\n", xxxxxxxx->xxxx, xxxxxxxx->xxx, xxxxxxxx->xx);
		xxxxxx(xxxxx.xxxxxxx);
	}
	for( x = 0; x < xxxxxxxxxxxxxxxx; x++ )
	{
		if( xxxxxxx( xxxxxxxxxxxx[x].xxxx, "xxx" ) == 0 || xxxxx( xxxxxxxx->xxxx, xxxxxxxxxxxx[x].xxxx ))
		{
			xxxxxxxx = 9;
			if( xxxxxxx( xxxxxxxxxxxx[x].xxxx, "xxx" ) == 0 ) /* xx xxxx xxxxxxxxx */
			{
				if( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 )
				{
					xxxxxxxx = 8;
				} else if ( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xx ) == 0 )
				{
					xxxxxxxx = 7;
				} else if ( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xxx ) == 0 )
				{
					xxxxxxxx = 6;
				} else if ( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xx ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xxx ) == 0 )
				{
					xxxxxxxx = 5;
				}
			} else /*xxxx xxxxxxxxx*/
			{
				if( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 )
				{
					xxxxxxxx = 4;
				} else if ( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xx ) == 0 )
				{
					xxxxxxxx = 3;
				} else if ( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, "xxx" ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xxx ) == 0 )
				{
					xxxxxxxx = 2;
				} else if ( xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xx ) == 0 && xxxxxxx( xxxxxxxxxxxx[x].xxxxxxxxx, xxxxxxxx->xxx ) == 0 )
				{
					xxxxxxxx = 1;
				}
			}
			if( xxxxxxxx < xxxxxxxxxxxx )
			{
				xxxxxxxxxxxx = xxxxxxxx;
				xxxxxxxx->xxxxxxxxxxxxxxxxxx = xxxxxxxxxxxx[x].xxxxxx;
			}
		}
	}
}

/*---------------------------------------------------------------------------
** xxxxxxxx xxxx xxxx
**--------------------------------------------------------------------------*/
int xxxx (int xxxx, char *xxxx[ ])
{
	int   xxxxxx;
	char xxxxxx[256];
	char xxxxxxxxxxxxxx[256];
	int xxxxxxxx;
	int xxxxxxx = 0;

#ifdef WIN32

	xxxxxxx xxxxxxx;
	int     xxx;

	xxx = xxxxxxxxxx (0x0101, &xxxxxxx);
	if (xxx == xxxxxx_xxxxx)
	{
		xxxxxxx (xxxxxx, "xxxxxxxxxx() xxxxxx: %ld\n", xxxxxxxxxxxx ());
		return 1;
	}
#endif


/**** xxx xxx xxxxx71355 ***/
#ifndef WIN32
	xxxxxxxxx(xx_xxx,"");
#endif

	xxxxxxxxxxx(xxxx[0]);
	xxxxxxxxxxxxxxxxxxxxxxx (xxxx, xxxx);

	/* xxxxxxxxxx xxxxxxx */
	xxxxxxxxxxxxxx();


	/*** xxx xxx xxxxx52232 ****/
	/*** xx xxx xx xxxx xxxxxx xxxxx xxx xxxxxxx -> xx xxxx ***/
	if (!xxxxxxxxxxx()){
		/** xxxxxxxx xxxx xxxxx xxxxxxxxx ***
		xx (xxxxxxxxxxxxxxx(xxxx, xxxx, xxxxxxxxxxxxxx)){
			xxxxxxxxx (xxxxxxxxxxxxxx, 0.0);
		} xxxx {
			/** xxxx xxxxx, xxxx xxxxxxxxxxx **
			xxxxxxxxx (xxxxxxxxxxx(), 0.0);
		}*/
		return(0);
	}


	/* xxxx xxx xxxxxx xxxx */
	xxxxxx = xxxxxxxxxxxxxx(xxxxxxxxxx, xxx_xxxx);

	/* xxxx xxxxxx xxx xxxxxxx xxxx */
	xxxxxx = xxxxxxxxxxxxxx(xxxxxxxxxxxxx, xxx_xxxx);
	if (xxxxxx) xxxxxxxxxxxxxxx();

	if (xxxxxx) {
		xxxxxxxxxxxxxxx();
		xxxxxx = xxxxxxxxxxxxxx(xxxxxxxxxx, xxx_xxxx);
	}

	/* xxxxx xxxxxx xxx xxxxxxx xxxx */
	xxxxxxxxxxxxxxx();

	/*** xxx xxx xxxxx40128 ****/
	/*xxxxxxxxxxxxx();*/
	/*** xxx xx xxx xxx xxxxx40128 ****/

	/** xxx xxx xxx xx40130 **/
   	/* xxx xxx xxxxxxx xxxxxxxxx xxxx xxxxxx xxxxxx */


    xxxxxxxxxxxx();

	xxxxxxxxxxxxxxxx();

	/* xxxx xxx xxxxxx - xxxxx xxxxxxxx xx x3xxxxxx xx. xxxxx xxxxxxxx */
    if (xxxxxx) xxxx_xxx_xxxxxx(xxxx, xxxxxxxxxx);

/* xxxxx xxxxx xxxxx xxxxx xx xxxxxx */
/* xxxxxxxx xx xxxx xxxxx xx xxxx xxxxx xxx xxxx xxxx xxxxx: xxxxxx !!!!
	xxx (xxxxxxxx = 0; xxxxxxxx < xxxxxxxxxxx; ++xxxxxxxx)
		xx (xxxxxxxx[xxxxxxxx].xxxxx == xxxx_xxxx_xx &&
			xxxxxxxxxxxxxxx(xxxxxxxx[xxxxxxxx].xxx, xxxxxxxx[xxxxxxxx].xx, xxxxxxxxxxx(), xxxx[0]) == 0)
		{

			xxxxxx (xxxxxxxx[xxxxxxx].xxxx, xxxxxxxx[xxxxxxxx].xxxx);
			xxxxxx (xxxxxxxx[xxxxxxx].xx, xxxxxxxx[xxxxxxxx].xx);
			xxxxxx (xxxxxxxx[xxxxxxx].xxx, xxxxxxxx[xxxxxxxx].xxx);
			xxxxxxxx[xxxxxxx].xxxxx = xxxxxxxx[xxxxxxxx].xxxxx;

			++xxxxxxx;
		}

	xxxxxxxxxxx = xxxxxxx;
*/





	/* xxxxx xxxxxx, xxxxxxx xxx xxx xxxx */
	xxxxxxxxxxxxxx();


	/* xxx xxxxxxxx xxx xxx xxxxxxxxx */
	/* xxxxxxxxxx xxx xxx xxxxxxxx */
/*    xxxxxx_xxxx (xxxxxxxxxxxxx); */

	/* xxxxx xxxxxxx */
    xxxxxxxxxxxxxx();


	xxxxxxxxxxxx40xxxxxx();

    /* xxxxx xxxxxxxxxxx */
    xxxxxxxxxxxxxxx(xxxxxxxxxx);

	/** xxxxxxxx xxxx xxxxx xxxxxxxxx ***
	xx (xxxxxxxxxxxxxxx(xxxx, xxxx, xxxxxxxxxxxxxx)){
		xxxxxxxxx (xxxxxxxxxxxxxx, 0.0);
	} xxxx {
		/** xxxx xxxxx, xxxx xxxxxxxxxxx **
		xxxxxxxxx (xxxxxxxxxxx(), 0.0);
	}*/
	/*xxxxxxxxx (xxxxxxxxxxx(), 0.0);*/
	return 0;

}
